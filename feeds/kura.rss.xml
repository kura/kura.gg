<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>kura.gg - kura</title><link>https://kura.gg/</link><description></description><lastBuildDate>Sun, 30 Aug 2020 17:30:00 +0100</lastBuildDate><item><title>Configuring upstreams dynamically with DNS in OpenResty</title><link>https://kura.gg/2020/08/30/configuring-upstreams-dynamically-with-dns-in-openresty/</link><description>
&lt;p&gt;This article is a continuation of &lt;a class="reference external" href="https://kura.gg/2020/08/09/retrying-dynamically-configured-upstreams-with-openresty/"&gt;retrying dynamically configured
upstreams&lt;/a&gt;
that gives an example of how you can configure OpenResty to update your
upstream backend servers dynamically with &lt;span class="caps"&gt;DNS&lt;/span&gt;.&lt;/p&gt;
&lt;div class="section" id="breaking-down-init-worker-by-lua-block"&gt;
&lt;h2&gt;Breaking down &lt;cite&gt;init_worker_by_lua_block&lt;/cite&gt;&lt;/h2&gt;
&lt;p&gt;&lt;cite&gt;init_worker_by_lua_block&lt;/cite&gt; can be used to make an nginx worker do some fun
stuff. In this instance we’re going to use it in conjunction with
&lt;cite&gt;ngx.timer.every&lt;/cite&gt; and the &lt;cite&gt;resty.dns.resolver&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;Here is the full example of my &lt;cite&gt;init_worker_by_lua_block&lt;/cite&gt;.&lt;/p&gt;
&lt;pre class="code lua literal-block"&gt;
&lt;span class="n"&gt;init_worker_by_lua_block&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;_backend_servers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;update_dns&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="c1"&gt;-- Set up the resolver&lt;/span&gt;
        &lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;resolver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"resty.dns.resolver"&lt;/span&gt;
        &lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;resolver&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;nameservers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"1.1.1.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"1.0.0.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;53&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;  &lt;span class="c1"&gt;-- Cloudflare&lt;/span&gt;
            &lt;span class="n"&gt;retrans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;-- 5 retransmissions on receive timeout&lt;/span&gt;
            &lt;span class="n"&gt;timeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;-- 1 sec&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt;
            &lt;span class="n"&gt;ngx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ngx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ERR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"failed to instantiate resolver: "&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="kr"&gt;return&lt;/span&gt;
        &lt;span class="kr"&gt;end&lt;/span&gt;

        &lt;span class="c1"&gt;-- Pull DNS …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Sun, 30 Aug 2020 17:30:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2020-08-30:/2020/08/30/configuring-upstreams-dynamically-with-dns-in-openresty/</guid><category>misc</category><category>nginx</category><category>openresty</category><category>lua</category></item><item><title>Retrying dynamically configured upstreams with OpenResty</title><link>https://kura.gg/2020/08/09/retrying-dynamically-configured-upstreams-with-openresty/</link><description>
&lt;div class="section" id="preamble"&gt;
&lt;h2&gt;Preamble&lt;/h2&gt;
&lt;p&gt;OpenResty is a modified version of nginx with LuaJIT compiled in and many
nginx options that can be controlled or modified via Lua. It is very commonly
used in content delivery networks for it’s configurability.&lt;/p&gt;
&lt;p&gt;As such, we use OpenResty and one of the features we use is the ability to
dynamically modify upstream backends. To achieve this we use some logic within
OpenResty to update upstreams based on &lt;span class="caps"&gt;DNS&lt;/span&gt; records. This means we can pull
upstreams in and out of service via &lt;span class="caps"&gt;DNS&lt;/span&gt; records and have OpenResty
update it’s upstream proxy passing configuration without needing to push
configs out to hundreds of servers and reload daemons.&lt;/p&gt;
&lt;p&gt;The logic behind how we update the upstream backends is beyond the scope of
this post, so let’s just say we have a table of upstream servers.&lt;/p&gt;
&lt;pre class="code lua literal-block"&gt;
&lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;upstream_servers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;"10.0.0.1:443"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;"10.0.0.2 …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Sun, 09 Aug 2020 17:00:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2020-08-09:/2020/08/09/retrying-dynamically-configured-upstreams-with-openresty/</guid><category>misc</category><category>nginx</category><category>openresty</category><category>lua</category></item><item><title>Eevee — Adding more structure to posts</title><link>https://kura.gg/2016/06/25/eevee-adding-more-structure-to-posts/</link><description>&lt;img alt="Eevee the Pokémon" class="align-center" src="/images/eeveelutions.png"/&gt;

&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="/eevee/"&gt;Eevee&lt;/a&gt; is a theme for &lt;a class="reference external" href="https://getpelican.com"&gt;Pelican&lt;/a&gt;, based on
Google’s &lt;a class="reference external" href="https://material.google.com/"&gt;Material Design&lt;/a&gt; specification that I
released in June 2016.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://schema.org/"&gt;Schema.org&lt;/a&gt; is a collaborative effort, including
private companies like Google and the open source community to promoter adding
additional structure to data that indentifies what parts of &lt;span class="caps"&gt;HTML&lt;/span&gt; are being used
for, for example it can help a search engine understand what content is more
important to index or, it can help a user with a screen reader get to the
important content more easily. These structures are more commonly known as
microformats or microdata.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="structure-is-a-beautiful-thing"&gt;
&lt;h2&gt;Structure is a beautiful thing&lt;/h2&gt;
&lt;p&gt;&lt;span class="caps"&gt;HTML&lt;/span&gt; — by it’s very design is structured — the difference is that the content
defines or modifies that structure.&lt;/p&gt;
&lt;p&gt;By using microformat data structures from schema.org you can define what
elements are more prominent or important through a large set of additional
vocabulary, improving the experience for everyone …&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Sat, 25 Jun 2016 21:00:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2016-06-25:/2016/06/25/eevee-adding-more-structure-to-posts/</guid><category>eevee</category><category>pelican</category></item><item><title>Eevee — Updating share buttons and adding Muut</title><link>https://kura.gg/2016/06/19/eevee-updating-share-buttons-and-adding-muut/</link><description>&lt;img alt="Eevee the Pokémon" class="align-center" src="/images/eeveelutions.png"/&gt;

&lt;p&gt;This week I pushed the &lt;a class="reference external" href="https://github.com/kura/eevee/tree/0.0.3"&gt;0.0.3 update&lt;/a&gt; for my Pelican theme &lt;a class="reference external" href="/eevee/"&gt;Eevee&lt;/a&gt; containing new and improved styling for share buttons and adding
the ability to use &lt;a class="reference external" href="https://muut.com/"&gt;Muut&lt;/a&gt; instead of Disqus for comments.&lt;/p&gt;
&lt;div class="section" id="share-button-changes"&gt;
&lt;h2&gt;Share button changes&lt;/h2&gt;
&lt;p&gt;The original styling of the share buttons wasn’t particularly pretty.&lt;/p&gt;
&lt;img alt="Eevee's original share button styling" class="align-center" src="/images/eevee-original-share-buttons.png"/&gt;
&lt;p&gt;They badly needed a make over, and so they were restyled to be more prominent,
look less out of place and randomly pasted in to the page and to have a colour
scheme that matches the social media site they share to.&lt;/p&gt;
&lt;img alt="Eevee's new 0.0.3 share button styling" class="align-center" src="/images/eevee-0.0.3-share-buttons.png"/&gt;
&lt;p&gt;These buttons appear on articles and pages, but when viewing an article with
&lt;tt class="docutils literal"&gt;DISQUS_SITENAME&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;MUUT_SITENAME&lt;/tt&gt; enabled a fourth button is shown that
links to the comments section of the current article.&lt;/p&gt;
&lt;img alt="Eevee's new 0.0.3 article share button styling" class="align-center" src="/images/eevee-0.0.3-article-share-buttons.png"/&gt;
&lt;/div&gt;
&lt;div class="section" id="comments-powered-by-muut"&gt;
&lt;h2&gt;Comments powered by Muut&lt;/h2&gt;
&lt;p&gt;To enable commenting with Muut, simply modify &lt;tt class="docutils literal"&gt;pelicanconf.py&lt;/tt&gt; and set the
Muut site name.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;MUUT_SITENAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'somethinghere'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will automatically cause …&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Sun, 19 Jun 2016 01:45:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2016-06-19:/2016/06/19/eevee-updating-share-buttons-and-adding-muut/</guid><category>eevee</category><category>pelican</category><category>eevee</category><category>muut</category></item><item><title>Lightbox — A pure CSS lightbox for Pelican</title><link>https://kura.gg/2016/06/13/lightbox--a-pure-css-lightbox-for-pelican/</link><description>&lt;img alt="Lightbox" class="align-center" src="/images/lightbox.png"/&gt;

&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;With the release of my &lt;a class="reference external" href="/eevee/"&gt;Eevee&lt;/a&gt; theme for Pelican, I realised
displaying a thumbnail image of the theme that linked to a larger image wasn’t
the most appealing design choice. I prefer to leave Javascript out of the
equation where possible, being one of those weird people that have it disabled
by default.&lt;/p&gt;
&lt;p&gt;As such I sought out a way to create a pure &lt;span class="caps"&gt;CSS&lt;/span&gt; equivalent of a Lightbox and
turn it in to an &lt;span class="caps"&gt;RST&lt;/span&gt; directive to plug directly in to Pelican.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Mon, 13 Jun 2016 20:50:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2016-06-13:/2016/06/13/lightbox--a-pure-css-lightbox-for-pelican/</guid><category>lightbox</category><category>pelican</category><category>lightbox</category><category>eevee</category></item><item><title>Eevee — Using Font Awesome icons in menus</title><link>https://kura.gg/2016/06/12/eevee-using-font-awesome-icons-in-menus/</link><description>&lt;img alt="Eevee the Pokémon" class="align-center" src="/images/eeveelutions.png"/&gt;

&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="/eevee/"&gt;Eevee&lt;/a&gt; is a theme for &lt;a class="reference external" href="https://getpelican.com"&gt;Pelican&lt;/a&gt;, based on
Google’s &lt;a class="reference external" href="https://material.google.com/"&gt;Material Design&lt;/a&gt; specification that I
released in June 2016.&lt;/p&gt;
&lt;p&gt;Eevee allows configuring menu links in the header and footer of a template —
including social links.&lt;/p&gt;
&lt;p&gt;Eevee also includes &lt;a class="reference external" href="https://fontawesome.com/"&gt;Font Awesome&lt;/a&gt; by default, at
time of release and writing of this article it provides Font Awesome version 4.6.3.&lt;/p&gt;
&lt;p&gt;Because the links are totally customisable, it means you can inject &lt;span class="caps"&gt;HTML&lt;/span&gt;
directly in to a link name and — because Font Awesome is included by default
— you can inject Font Awesome icons in to link names using &lt;span class="caps"&gt;HTML&lt;/span&gt;.&lt;/p&gt;
&lt;img alt="Social icons in Eevee menu" src="/images/eevee-social-icons.png"/&gt;
&lt;/div&gt;
&lt;div class="section" id="using-icons-in-links"&gt;
&lt;h2&gt;Using icons in links&lt;/h2&gt;
&lt;p&gt;Menu’s in Eevee are controlled by Pelican’s configuration, for information on
how to modify menu’s please see &lt;a class="reference external" href="/eevee/#header-and-footer-options"&gt;the Eevee documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Imagine you have a list of links to social websites in your menu, similar to
the list below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;SOCIAL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;'Github'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'https://github.com/'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'Twitter'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'https …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Sun, 12 Jun 2016 23:40:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2016-06-12:/2016/06/12/eevee-using-font-awesome-icons-in-menus/</guid><category>eevee</category><category>pelican</category></item><item><title>Eevee — A Material Design theme for Pelican</title><link>https://kura.gg/2016/06/12/eevee-a-material-design-theme-for-pelican/</link><description>&lt;img alt="Eevee the Pokémon" class="align-center" src="/images/eeveelutions.png"/&gt;

&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Eevee is a theme for &lt;a class="reference external" href="https://getpelican.com"&gt;Pelican&lt;/a&gt;, based on Google’s
&lt;a class="reference external" href="https://material.google.com/"&gt;Material Design&lt;/a&gt; specification. It is named
after the Pokémon &lt;a class="reference external" href="https://www.pokemon.com/uk/pokedex/eevee"&gt;Eevee&lt;/a&gt; because
— like the Pokémon — it can evolve in to many ‘elemental types.’&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Sun, 12 Jun 2016 10:25:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2016-06-12:/2016/06/12/eevee-a-material-design-theme-for-pelican/</guid><category>eevee</category><category>pelican</category></item><item><title>Blackhole 2.0: or, How I Learned to Love Asyncio</title><link>https://kura.gg/2016/05/21/blackhole-2.0-or-how-i-learned-to-love-asyncio/</link><description>
&lt;p&gt;A brief history of a tiny part of the Internet.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://blackhole.io/1"&gt;Blackhole 1 — Blackhole as it was originally
known&lt;/a&gt; — was written on &lt;a class="reference external" href="https://docs.python.org/2/whatsnew/2.7.html"&gt;Python 2.7&lt;/a&gt;, briefly supporting &lt;a class="reference external" href="https://docs.python.org/2.6/whatsnew/2.6.html"&gt;Python 2.6&lt;/a&gt; for a time and also
supporting early version of &lt;a class="reference external" href="https://docs.python.org/3.2/whatsnew/3.2.html"&gt;Python 3&lt;/a&gt;, &lt;a class="reference external" href="https://www.pypy.org/features.html"&gt;PyPy 2&lt;/a&gt; and &lt;a class="reference external" href="https://www.pypy.org/features.html"&gt;PyPy 3&lt;/a&gt;. Built on top of &lt;a class="reference external" href="https://www.tornadoweb.org/en/stable/"&gt;Tornado&lt;/a&gt;, it was asynchronous in a fashion and
— quite simply — worked.&lt;/p&gt;
&lt;p&gt;The original prototype that became Blackhole was &lt;a class="reference external" href="/simplemta"&gt;SimpleMTA&lt;/a&gt; — a
prototype that was created quickly, to serve a very simple testing purpose that
I had for it.&lt;/p&gt;
&lt;p&gt;As I needed SimpleMTA to do more, I wrote Blackhole to accomplish that task.
I’d been using Tornado a bit and wanted to experiment with it more. Building
on top of Tornado created some oddities in how the program was designed and
that always irked me.&lt;/p&gt;
&lt;p&gt;Between the time of the last 1.8.X and the 2.0 release, I experimented with …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Sat, 21 May 2016 00:20:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2016-05-21:/2016/05/21/blackhole-2.0-or-how-i-learned-to-love-asyncio/</guid><category>coding</category><category>python</category><category>python3.5</category><category>3.5</category><category>asyncio</category><category>email</category><category>smtp</category><category>mta</category></item><item><title>Farewell Ian</title><link>https://kura.gg/2015/12/30/farewell-ian/</link><description>&lt;div class="figure"&gt;
&lt;img alt="Ian Murdock" src="/images/ian-murdock.png"/&gt;
&lt;p class="caption"&gt;Image by Stephen Shankland&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Today news arrived that broke my heart, Ian Murdock has passed away. I never
met Ian but he had an enormous impact on my life, through his work.&lt;/p&gt;
&lt;p&gt;Debian has been my operating system of choice for many years now, it runs on
all of my servers and my home computers. Ian’s vision for the operating system
is why I started using it and use it to this day. It’s why I’ve continued to
work on the operating system and create packages of all of my work for it.&lt;/p&gt;
&lt;p&gt;Ian is, without a doubt, one of the biggest influences on my career and on my life.&lt;/p&gt;
&lt;p&gt;Farewell sir, you will be missed.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Wed, 30 Dec 2015 22:34:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2015-12-30:/2015/12/30/farewell-ian/</guid><category>misc</category><category>Ian Murdock</category><category>Debian</category></item><item><title>SSHFP DNS records</title><link>https://kura.gg/2015/10/18/sshfp-dns-records/</link><description>&lt;p&gt;&lt;a class="reference external" href="https://tools.ietf.org/html/rfc4255"&gt;&lt;span class="caps"&gt;SSHFP&lt;/span&gt;&lt;/a&gt; records are a defense against
people blindly typing ‘yes’ when asked if they want to continue connecting to
an &lt;span class="caps"&gt;SSH&lt;/span&gt; host who’s authenticity is unknown.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ssh some.host.tld
The authenticity of host 'some.host.tld (123.456.789.10)' can't be established.
ED25519 key fingerprint is 69:76:51:39:a4:c6:de:15:7c:50:4b:4a:a7:98:40:5e.
Are you sure you want to continue connecting (yes/no)?
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This prompt is likely to be extremely familiar to you and, most people seem to
just type ‘yes’ to move on with their lives, which defeats the whole purpose of
this prompt.&lt;/p&gt;
&lt;p&gt;If you use &lt;span class="caps"&gt;DNSSEC&lt;/span&gt; you can bypass this prompt entirely by publishing your
server’s key fingerprints via &lt;span class="caps"&gt;DNS&lt;/span&gt; and having &lt;span class="caps"&gt;SSH&lt;/span&gt; authenticate them for you.&lt;/p&gt;
&lt;div class="section" id="generating-your-sshfp-record"&gt;
&lt;h2&gt;Generating your &lt;span class="caps"&gt;SSHFP&lt;/span&gt; record&lt;/h2&gt;
&lt;p&gt;You can get &lt;span class="caps"&gt;SSH&lt;/span&gt; to generate the &lt;span class="caps"&gt;DNS&lt;/span&gt; records for you, log in …&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Sun, 18 Oct 2015 03:30:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2015-10-18:/2015/10/18/sshfp-dns-records/</guid><category>tutorials</category><category>dnssec</category><category>dns</category><category>sshfp</category><category>ssh</category></item><item><title>DNSSEC with Rage4 and name.com</title><link>https://kura.gg/2015/10/18/dnssec-with-rage4-and-name.com/</link><description>&lt;p&gt;I currently use &lt;a class="reference external" href="https://www.name.com/"&gt;name.com&lt;/a&gt; as my registrar and I use
&lt;a class="reference external" href="https://rage4.com/"&gt;Rage4&lt;/a&gt; because Rage4 are awesome, they also support &lt;span class="caps"&gt;TLSA&lt;/span&gt;
and &lt;span class="caps"&gt;SSHFP&lt;/span&gt; records and of course, &lt;span class="caps"&gt;DNSSEC&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;I’m writing this up because I found getting &lt;span class="caps"&gt;DNSSEC&lt;/span&gt; from Rage4 to work with
name.com as my registrar was a pain and the name.com support were not very helpful,
linking me to a support article that I’d already read and did not help at all.&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;Rage4&lt;/h2&gt;
&lt;p&gt;I’m going to assume you’ve already got your records in Rage4, if not, the
interface is really easy so you’ll figure it out.&lt;/p&gt;
&lt;p&gt;Within the management section for your domain’s zone, there is a menu bar of
icons, the icon pictured below enabled &lt;span class="caps"&gt;DNSSEC&lt;/span&gt;.&lt;/p&gt;
&lt;img alt="Enabled DNSSEC" src="/images/rage4-dnssec-icon.png"/&gt;
&lt;p&gt;Clicking this will turn on &lt;span class="caps"&gt;DNSSEC&lt;/span&gt;. You will then have a new icon that will
allow you to display your &lt;span class="caps"&gt;DNSSEC&lt;/span&gt; information.&lt;/p&gt;
&lt;img alt="Display DNSSEC info" src="/images/rage4-dnssec-info-icon.png"/&gt;
&lt;p&gt;Clicking this icon …&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Sun, 18 Oct 2015 03:10:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2015-10-18:/2015/10/18/dnssec-with-rage4-and-name.com/</guid><category>tutorials</category><category>dnssec</category><category>dns</category><category>rage4. name.com</category></item><item><title>Running a Tor exit node is not as scary as it sounds</title><link>https://kura.gg/2015/02/02/running-a-tor-exit-node-is-not-as-scary-as-it-sounds/</link><description>
&lt;p&gt;There is a variety of information out there about being a Tor exit node
operator. Articles like &lt;a class="reference external" href="https://testbit.eu/tor-exit-node-less-week/"&gt;this one&lt;/a&gt;
make the thought of running a Tor exit as scary prospect, it’s understandable,
some countries have laws that make running an exit scary too.&lt;/p&gt;
&lt;p&gt;I run &lt;a class="reference external" href="/tor/"&gt;a variety of relays&lt;/a&gt; in various countries in this crazy World
and thought I’d share my experiences.&lt;/p&gt;
&lt;div class="section" id="choosing-a-hosting-partner"&gt;
&lt;h2&gt;Choosing a hosting partner&lt;/h2&gt;
&lt;p&gt;I personally choose to use a third party hosting provider for my relays,
rather than using colocation. I just find this is easier and I don’t have to
think about the hardware much at all.&lt;/p&gt;
&lt;p&gt;Finding a provider can be a pain, there is a decent list on the &lt;a class="reference external" href="https://trac.torproject.org/projects/tor/wiki/doc/GoodBadISPs"&gt;Tor wiki&lt;/a&gt;. I use
some of the providers on this list but I’ve also found it can be a really
good idea to just contact a provider and talk to them …&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Mon, 02 Feb 2015 09:59:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2015-02-02:/2015/02/02/running-a-tor-exit-node-is-not-as-scary-as-it-sounds/</guid><category>misc</category><category>tor</category></item><item><title>HPKP: HTTP Public Key Pinning with HAProxy</title><link>https://kura.gg/2015/01/27/hpkp-http-public-key-pinning-with-haproxy/</link><description>
&lt;p&gt;Public Key Pinning is a security feature that tells a web browser to associate
a public cryptographic key with a server or servers. When a web browser visits
a website for the first time, it will read the &lt;span class="caps"&gt;HPKP&lt;/span&gt; header and store the hashes
for the certificates that are provided. Each time the browser then revisits
that website, the hash from the provided public key is compared against the
stored keys, if the hashes do not match, the web browser should display a warning.&lt;/p&gt;
&lt;p&gt;The &lt;span class="caps"&gt;HPKP&lt;/span&gt; header adds protection against man-in-the-middle (&lt;span class="caps"&gt;MITM&lt;/span&gt;) attacks but,
if incorrectly configured can make your website display a &lt;span class="caps"&gt;TLS&lt;/span&gt; error for a long
period of time.&lt;/p&gt;
&lt;p&gt;Here’s a look at what this website publishes as it’s &lt;span class="caps"&gt;HKPK&lt;/span&gt; header.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Public-Key-Pins: pin-sha256="cYf9T3Il8DaCnaMaM0LatIAru1vqmcu2JSwS7uvyEB0=";
                 pin-sha256="u2q8QZ8Hjp3o/efZjsch9NKjnZmrISJQjwoi/rmsKLU=";
                 max-age=15768000; includeSubDomains
&lt;/pre&gt;
&lt;p&gt;To explain it, the first &lt;cite&gt;pin-sha265&lt;/cite&gt; key is the hash of the public key that …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Tue, 27 Jan 2015 07:04:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2015-01-27:/2015/01/27/hpkp-http-public-key-pinning-with-haproxy/</guid><category>tutorials</category><category>haproxy</category><category>http</category><category>tls</category><category>ssl</category><category>hpkp</category><category>public key pinning</category></item><item><title>Debian Wheezy encrypted Maildir using encfs</title><link>https://kura.gg/2015/01/26/debian-wheezy-encrypted-maildir-using-encfs/</link><description>
&lt;p&gt;This is really a follow up article to &lt;a class="reference external" href="/debian-wheezy-tls-mailserver-with-mysql-clamav-domainkeys-dkim-spf-solr-imap-search/"&gt;one I wrote earlier this year&lt;/a&gt;
but is really applicable to any similar set-up, with some modifications. The
only configuration similarity this requires is that mail for all users is
stored on the filesystem in the same place, rather than to separate locations
i.e. each user having ~/.Maildir.&lt;/p&gt;
&lt;div class="section" id="encfs"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;EncFS&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install encfs
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once installed, you’ll need to make a directory for encrypted and decrypted
mail to live.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo mkdir /var/mail/encrypted /var/mail/decrypted
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You’ll need to set up permissions so your mail user can access the fuse device
and the new directories.&lt;/p&gt;
&lt;p&gt;For me, this user and group are called &lt;em&gt;vmail&lt;/em&gt; but yours may be different.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo chgrp mail /var/mail/decrypted
sudo g+rw /var/mail/decrypted
sudo usermod -a -g fuse vmail
sudo chgrp fuse /dev/fuse
sudo chmod g+rw /dev/fuse
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next …&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Mon, 26 Jan 2015 21:25:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2015-01-26:/2015/01/26/debian-wheezy-encrypted-maildir-using-encfs/</guid><category>tutorials</category><category>debian</category><category>wheezy</category><category>postfix</category><category>dovecot</category><category>mail</category><category>encrypted</category></item><item><title>Block yourself from emailing someone using Postfix</title><link>https://kura.gg/2015/01/20/block-yourself-from-emailing-someone-using-postfix/</link><description>&lt;p&gt;I think most of us have been in a position where we really shouldn’t continue
communicating with someone or contact that person when drunk… You know what I
mean, ex relationships etc (it happens.)&lt;/p&gt;
&lt;p&gt;With Postfix you can block yourself from emailing that person again, which is
quite useful.&lt;/p&gt;
&lt;p&gt;In &lt;cite&gt;/etc/postfix/main.cf&lt;/cite&gt; add make the start of your &lt;cite&gt;smtpd_recipient_restrictions&lt;/cite&gt;
look like below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;smtpd_recipient_restrictions =
    check_recipient_access hash:/etc/postfix/recipient_access,
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create a new file &lt;cite&gt;/etc/postfix/recipient_access&lt;/cite&gt; and add the email address you
wish to block, the word &lt;cite&gt;&lt;span class="caps"&gt;REJECT&lt;/span&gt;&lt;/cite&gt; in capitals and optionally; a  reason. Example below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;test@example.com REJECT Don't be silly... You're probably drunk.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For every address you wish to block yourself from emailing, simply add them on
a new line.&lt;/p&gt;
&lt;p&gt;You can see the email is blocked from being sent in &lt;cite&gt;/var/log/mail.log&lt;/cite&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOQUEUE: reject …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Tue, 20 Jan 2015 23:38:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2015-01-20:/2015/01/20/block-yourself-from-emailing-someone-using-postfix/</guid><category>tutorials</category><category>postfix</category><category>smtp</category></item><item><title>Debian Wheezy TLS mailserver with MySQL, ClamAV, DomainKeys, DKIM, SPF and Solr-powered IMAP SEARCH</title><link>https://kura.gg/2015/01/03/debian-wheezy-tls-mailserver-with-mysql-clamav-domainkeys-dkim-spf-solr-imap-search/</link><description>
&lt;p&gt;This mail platform does use a fair amount of memory, the memory usage is ClamAV
and Solr, the latter being used for &lt;span class="caps"&gt;IMAP&lt;/span&gt; &lt;span class="caps"&gt;SEARCH&lt;/span&gt;. I personally use 2 &lt;span class="caps"&gt;GB&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;I’ll warn you all now, this is a long article.&lt;/p&gt;
&lt;div class="section" id="ssl"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;&lt;span class="caps"&gt;SSL&lt;/span&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo openssl genrsa -out /etc/ssl/private/mail.key 4096
sudo openssl req -new -key /etc/ssl/private/mail.key -out /tmp/mail.csr
sudo openssl x509 -req -days 365 -in /tmp/mail.csr -signkey /etc/ssl/private/mail.key -out /etc/ssl/certs/mail.crt
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="mysql"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;MySQL&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install mysql-server
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You’ll be prompted several times for a password for MySQL during the installation,
just come up with something nice and secure.&lt;/p&gt;
&lt;p&gt;The first thing to set-up will be the MySQL database and schema.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysql -u root -p
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next up, create the database.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CREATE DATABASE mailserver CHARACTER SET utf8 COLLATE utf8_general_ci;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And grant some privileges, you …&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Sat, 03 Jan 2015 19:48:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2015-01-03:/2015/01/03/debian-wheezy-tls-mailserver-with-mysql-clamav-domainkeys-dkim-spf-solr-imap-search/</guid><category>tutorials</category><category>debian</category><category>wheezy</category><category>postfix</category><category>dovecot</category><category>clamav</category><category>domainkeys</category><category>dkim</category><category>spf</category><category>imap</category></item><item><title>torproject.org mirror</title><link>https://kura.gg/2015/01/02/torproject.org-mirror/</link><description>
&lt;div class="section" id="mirror"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;Mirror&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With the DDoS attacks on the &lt;a class="reference external" href="https://www.torproject.org"&gt;torproject.org&lt;/a&gt;
website over the mid to end of December, I decided it would be prudent to join
the relatively small list of mirrors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="access"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;Access&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;+——- —-+—————————+
| Website | Dist / Downloads |
+=========+==================+
| &lt;span class="caps"&gt;HTTP&lt;/span&gt;    | &lt;span class="caps"&gt;HTTP&lt;/span&gt; &lt;span class="caps"&gt;DIST&lt;/span&gt;        |
+————-+—————————+
| &lt;span class="caps"&gt;HTTPS&lt;/span&gt;   | &lt;span class="caps"&gt;HTTPS&lt;/span&gt; &lt;span class="caps"&gt;DIST&lt;/span&gt;       |
+————-+—————————+
| &lt;span class="caps"&gt;FTP&lt;/span&gt;     | &lt;span class="caps"&gt;FTP&lt;/span&gt; &lt;span class="caps"&gt;DIST&lt;/span&gt;         |
+————-+—————————+
| &lt;span class="caps"&gt;RSYNC&lt;/span&gt;   | &lt;span class="caps"&gt;RSYNC&lt;/span&gt; &lt;span class="caps"&gt;DIST&lt;/span&gt;       | +————-+—————————+&lt;/p&gt;
&lt;p&gt;Note: This mirror is now dead and links have been removed.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Fri, 02 Jan 2015 04:48:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2015-01-02:/2015/01/02/torproject.org-mirror/</guid><category>tor</category><category>tor</category></item><item><title>Santa’s tor relay changes</title><link>https://kura.gg/2014/12/27/santas-tor-relay-changes/</link><description>
&lt;div class="section" id="exiting-relays"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;Exiting relays&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Both &lt;a class="reference external" href="https://globe.torproject.org/#/relay/865A408E2B1EA3E18C9A12E80A8D458F9C985C16"&gt;SpunkWeasel (&lt;span class="caps"&gt;865A408E2B1EA3E18C9A12E80A8D458F9C985C16&lt;/span&gt;)&lt;/a&gt;
and &lt;a class="reference external" href="https://globe.torproject.org/#/relay/B8E6FFEB6F91FA3D26BC572836FB0ABBD142DC87"&gt;AnorexicSquirrel (&lt;span class="caps"&gt;B8E6FFEB6F91FA3D26BC572836FB0ABBD142DC87&lt;/span&gt;)&lt;/a&gt;
have been given additional horsepower in terms of &lt;span class="caps"&gt;CPU&lt;/span&gt; and memory and both have
been allowed to exit. Additionally, both are now capable of IPv6 connectivity
as guards, relays and exits.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="new-relays"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;New relays&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A new exit relay has been put online called &lt;a class="reference external" href="https://globe.torproject.org/#/relay/24B1783665A9B0A4BF640A1CD02F685C0CA098ED"&gt;VivaciousAlpaca (&lt;span class="caps"&gt;24B1783665A9B0A4BF640A1CD02F685C0CA098ED&lt;/span&gt;)&lt;/a&gt;.
It has the same &lt;span class="caps"&gt;CPU&lt;/span&gt; and memory as SpunkWeasel and AnorexicSquirrel and also
has full IPv6 capabilities.&lt;/p&gt;
&lt;p&gt;A full list of my public Tor relays can be found on the &lt;a class="reference external" href="/tor/"&gt;tor page&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Sat, 27 Dec 2014 01:12:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2014-12-27:/2014/12/27/santas-tor-relay-changes/</guid><category>tor</category><category>tor</category></item><item><title>Tor all the things!</title><link>https://kura.gg/2014/10/02/tor-all-the-things/</link><description>
&lt;div class="section" id="privacy-is-key"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;Privacy is key&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I am a big fan of keeping my browsing habits and other personal information
private. As such, I use a &lt;span class="caps"&gt;VPN&lt;/span&gt; service provided by &lt;a class="reference external" href="https://proxy.sh/panel/aff.php?aff=079"&gt;proxy.sh (affiliate link)&lt;/a&gt;, I also use their proxies, Tor and
various other proxies, usually from online lists, should I feel the need.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="anonymous-nodes"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;Anonymous nodes&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I’ve run some Tor nodes for quite a while now, two Exits and five relays to be
precise. They are all listed as being part of the same family and have never
had any reference to me being their operator.&lt;/p&gt;
&lt;p&gt;Sadly, these seven nodes will always remain a secret due to the hassle that
inherently comes with running Tor Exit nodes. These issues include some mean
emails and &lt;span class="caps"&gt;IP&lt;/span&gt; addresses and &lt;span class="caps"&gt;CIDR&lt;/span&gt; blocks being blacklisted by services like Netflix.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="new-nodes"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;New nodes!&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The good news is, I have recently launched three more nodes! These nodes
belong to a …&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Thu, 02 Oct 2014 03:45:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2014-10-02:/2014/10/02/tor-all-the-things/</guid><category>tor</category><category>tor</category></item><item><title>batfish(1) - writing a Digital Ocean V2 API wrapper</title><link>https://kura.gg/2014/09/15/batfish-writing-a-digital-ocean-v2-api-wrapper/</link><description>
&lt;p&gt;Batfish is a Python client and &lt;span class="caps"&gt;API&lt;/span&gt; wrapper for the &lt;a class="reference external" href="https://developers.digitalocean.com/"&gt;Digital Ocean V2 &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt;. It can be used as a library module in
your own Python code but also provides a &lt;span class="caps"&gt;CLI&lt;/span&gt; interface and a shell-like command interpreter.&lt;/p&gt;
&lt;p&gt;Batfish is still under development and is considered in the Alpha stage. It is
not yet available via PyPI but can be tried out using the &lt;a class="reference external" href="https://github.com/kura/batfish"&gt;code available on
GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There is a small amount of &lt;a class="reference external" href="https://batfish.readthedocs.org"&gt;documentation available on Read The Docs&lt;/a&gt; and tests are still being written to get as
much coverage as possible and eaked out all of the bugs. You can find the
&lt;a class="reference external" href="https://travis-ci.org/kura/batfish"&gt;latest test status on Travis &lt;span class="caps"&gt;CI&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="module-interface"&gt;
&lt;h2&gt;Module interface&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;batfish&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authorize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"abcde12345"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;droplets&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Droplet&lt;/span&gt; &lt;span class="n"&gt;ego&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kura&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gg&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Droplet&lt;/span&gt; &lt;span class="n"&gt;fax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kura&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gg&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Droplet&lt;/span&gt; &lt;span class="n"&gt;jet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kura&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gg&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Droplet&lt;/span&gt; &lt;span class="n"&gt;ski&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kura&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gg&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;droplet_reboot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1234&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="cli-interface"&gt;
&lt;h2&gt;&lt;span class="caps"&gt;CLI&lt;/span&gt; interface&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ batfish authorize
abcde12345
$ batfish droplets …&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Mon, 15 Sep 2014 22:20:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2014-09-15:/2014/09/15/batfish-writing-a-digital-ocean-v2-api-wrapper/</guid><category>coding</category><category>python</category><category>digital ocean</category></item><item><title>yarg(1) — A semi hard Cornish cheese, also queries PyPI</title><link>https://kura.gg/2014/08/09/yarg/</link><description>
&lt;p&gt;Yarg is a PyPI client, it was written for &lt;a class="reference external" href="https://pypip.in"&gt;pypip.in&lt;/a&gt; and can search packages as well as read the &lt;span class="caps"&gt;RSS&lt;/span&gt; feeds
from PyPI for new packages and new package version releases.&lt;/p&gt;
&lt;div class="section" id="search-interface"&gt;
&lt;h2&gt;Search interface&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;yarg&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yarg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"yarg"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;'yarg'&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;
&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;'Kura'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;'kura@kura.gg'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="newest-packages-interface"&gt;
&lt;h2&gt;Newest packages interface&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;yarg&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;packages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yarg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newest_packages&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;packages&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Package&lt;/span&gt; &lt;span class="n"&gt;yarg&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Package&lt;/span&gt; &lt;span class="n"&gt;gray&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Package&lt;/span&gt; &lt;span class="n"&gt;ragy&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;'yarg'&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;
&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;'https://pypi.python.org/pypi/yarg&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="updated-packages-interface"&gt;
&lt;h2&gt;Updated packages interface&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;yarg&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;packages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yarg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;latest_updated_packages&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;packages&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Package&lt;/span&gt; &lt;span class="n"&gt;yarg&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Package&lt;/span&gt; &lt;span class="n"&gt;gray&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Package&lt;/span&gt; &lt;span class="n"&gt;ragy&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;'yarg'&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;
&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;'0.1.2'&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;
&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;'https://pypi.python.org/pypi/yarg/0.1.2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="documentation"&gt;
&lt;h2&gt;Documentation&lt;/h2&gt;
&lt;p&gt;Full documentation is at &amp;lt;&lt;a class="reference external" href="https://yarg.readthedocs.org"&gt;https://yarg.readthedocs.org&lt;/a&gt;&amp;gt;.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Sat, 09 Aug 2014 13:30:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2014-08-09:/2014/08/09/yarg/</guid><category>coding</category><category>python</category><category>pypi</category></item><item><title>Speeding up pypip.in and reducing load on PyPI</title><link>https://kura.gg/2014/08/07/speeding-up-pypip.in-and-reducing-load-on-pypi/</link><description>
&lt;p&gt;As you might expect, &lt;a class="reference external" href="https://pypip.in"&gt;pypip.in&lt;/a&gt; employes a fair amount of
caching in the backend to control load on the imaging &lt;span class="caps"&gt;API&lt;/span&gt; and servers.&lt;/p&gt;
&lt;p&gt;For a long time, this cache was entirely managed by Varnish and was doing a
fantastic job. Varnish has a hit:miss ratio of 10:1, for every 10 hits we get
1 miss. This is a fairly decent ratio when you consider where these images are
displayed, how often they are viewed and that Varnish only caches the images
for an hour.&lt;/p&gt;
&lt;div class="section" id="the-impact-on-pypi"&gt;
&lt;h2&gt;The impact on PyPI&lt;/h2&gt;
&lt;p&gt;You will firstly need to understand how pypip.in used to work to understand the
changes that were made and why they were made.&lt;/p&gt;
&lt;p&gt;Let’s set up the request first - a request for a shield is made and it is not
present in the Varnish cache.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Request received in API layer
              |
              v
    API layer queries PyPI
              |
              v
   PyPI …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Thu, 07 Aug 2014 08:42:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2014-08-07:/2014/08/07/speeding-up-pypip.in-and-reducing-load-on-pypi/</guid><category>coding</category><category>python</category><category>pypipins</category><category>pypip.in</category><category>shields</category></item><item><title>So you want to run your own copy of pypip.in?</title><link>https://kura.gg/2014/07/26/so-you-want-to-run-your-own-copy-of-pypip.in/</link><description>
&lt;p&gt;While pypip.in is available under the &lt;span class="caps"&gt;MIT&lt;/span&gt; license on &lt;a class="reference external" href="https://github.com/badges/pypipins"&gt;GitHub&lt;/a&gt;, it’s not explained how to really use it properly.&lt;/p&gt;
&lt;p&gt;You can gather how to set-up the Python source of the project and get the
&lt;a class="reference external" href="https://twistedmatrix.com"&gt;Twisted&lt;/a&gt; process running, this is totally reliant
on using the &lt;a class="reference external" href="https://img.shields.io"&gt;img.shields.io&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I decided to write this article explaining how to install your own copy of the
shields nodejs code, pypipin itself and even cover off supervisord and Varnish too.&lt;/p&gt;
&lt;div class="section" id="shields-nodejs"&gt;
&lt;h2&gt;shields &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; nodejs&lt;/h2&gt;
&lt;div class="section" id="nodejs"&gt;
&lt;h3&gt;nodejs&lt;/h3&gt;
&lt;p&gt;First of all you’ll need to get the latest source code copy of nodejs from the
&lt;a class="reference external" href="https://nodejs.org/download/"&gt;nodejs download page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Extract it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tar -xvzf node-&amp;lt;VERSION&amp;gt;.tar.gz
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd node-&amp;lt;VERSION&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You’ll need to install the build tools, if you don’t have them already.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install build-essential
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then make and install node.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make &amp;amp;&amp;amp; sudo make install
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="redis"&gt;
&lt;h3&gt;Redis&lt;/h3&gt;
&lt;p&gt;Redis is used to temporarily store PyPI responses.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo …&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Sat, 26 Jul 2014 23:40:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2014-07-26:/2014/07/26/so-you-want-to-run-your-own-copy-of-pypip.in/</guid><category>coding</category><category>python</category><category>pypipins</category><category>pypip.in</category><category>shields</category></item><item><title>New pypip.in shields and styling</title><link>https://kura.gg/2014/07/25/new-pypip.in-shields-and-styling/</link><description>
&lt;div class="section" id="supported-python-versions"&gt;
&lt;h2&gt;Supported Python versions&lt;/h2&gt;
&lt;p&gt;This one is generated from the list of classifiers you provide to PyPI.&lt;/p&gt;
&lt;p&gt;If no Python version classifiers exist, it defaults to Python 2.7. This is
because really, Python 3 is not widely used in production or supported by libraries.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="python-implementation-s"&gt;
&lt;h2&gt;Python implementation(s)&lt;/h2&gt;
&lt;p&gt;I think this one is really cool. Chances are you’re unlikely to get more than
two supported implementations, like CPython and PyPy or CPython and Stackless.&lt;/p&gt;
&lt;p&gt;The shield uses the Python implementation classifiers to generate this shield.
It supports all classifiers that PyPI supports (CPython, Jython, Iron Python,
PyPy and Stackless) and defaults to CPython is none are set.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="styling-changes"&gt;
&lt;h2&gt;Styling changes&lt;/h2&gt;
&lt;p&gt;This change is simply because of the upgrade of the shields library. This
allows us to use the default rounded badges like below.&lt;/p&gt;
&lt;p&gt;But also allow you to use a much nicer, cleaner, flat styling like the ones
used on this …&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Fri, 25 Jul 2014 01:00:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2014-07-25:/2014/07/25/new-pypip.in-shields-and-styling/</guid><category>coding</category><category>python</category><category>pypi</category><category>shields</category></item><item><title>nginx 1.7.3 released with pagespeed/psol 1.8.31.4 and naxsi 0.53-2</title><link>https://kura.gg/2014/07/09/nginx-1.7.3-released-with-pagespeed-psol-1.8.31.4-and-naxsi-0.53-2/</link><description>&lt;p&gt;nginx 1.7.3 is now available on &lt;a class="reference external" href="/apt.kura.gg/"&gt;apt.kura.gg&lt;/a&gt; with updated
versions of both pagespeed and naxsi.&lt;/p&gt;
&lt;p&gt;Pagespeed is now version 1.8.31.4 and Naxsi is 0.53-2, both are the latest
versions available and will be used for each nginx release until newer
versions are available.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Wed, 09 Jul 2014 13:30:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2014-07-09:/2014/07/09/nginx-1.7.3-released-with-pagespeed-psol-1.8.31.4-and-naxsi-0.53-2/</guid><category>deb builds</category><category>apt</category></item><item><title>haproxy OCSP stapling</title><link>https://kura.gg/2014/07/02/haproxy-ocsp-stapling/</link><description>
&lt;p&gt;With haproxy 1.5 finally being released we are lucky enough to get a basic
interface around &lt;span class="caps"&gt;OCSP&lt;/span&gt; stapling.&lt;/p&gt;
&lt;p&gt;Sadly this interface really is quite basic and it’s not the simplest thing to
figure out without some trial and error.&lt;/p&gt;
&lt;p&gt;According to the official documentation, you should be able to pipe your
&lt;span class="caps"&gt;OCSP&lt;/span&gt; response to haproxy via it’s stats socket. Sadly I could not get this to
work properly at all, so I decided to swap the piping for a file and reload solution.&lt;/p&gt;
&lt;p&gt;You’ll need to get a copy of your certification authorities root certificate
to proceed with this.&lt;/p&gt;
&lt;div class="section" id="looking-for-your-ocsp-uri"&gt;
&lt;h2&gt;Looking for your &lt;span class="caps"&gt;OCSP&lt;/span&gt; &lt;span class="caps"&gt;URI&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;If you don’t know the &lt;span class="caps"&gt;URI&lt;/span&gt; you need to do an &lt;span class="caps"&gt;OCSP&lt;/span&gt; lookup against, you can find
it in your certificate data.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;openssl x509 -in /path/to/your/certificate -text
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Inside the output, look for the following section.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Authority Information Access …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Wed, 02 Jul 2014 23:45:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2014-07-02:/2014/07/02/haproxy-ocsp-stapling/</guid><category>tutorials</category><category>haproxy</category><category>ssl</category><category>ocsp</category><category>ocsp stapling</category></item><item><title>Hauntr - A theme for Pelican</title><link>https://kura.gg/2014/06/09/hauntr/</link><description>&lt;div class="figure align-center"&gt;
&lt;img alt="Haunter, the evolved Pokémon form of Gastly" src="/images/haunter.png"/&gt;
&lt;p class="caption"&gt;(Image by &lt;a class="reference external" href="https://kawiku.deviantart.com/art/Haunter-350580512"&gt;Kawiku&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Hauntr is a minimal, lightweight and clean theme for the
&lt;a class="reference external" href="https://getpelican.com"&gt;Pelican&lt;/a&gt; blogging platform.&lt;/p&gt;
&lt;p&gt;It is named after the Pokémon ‘Haunter’ because it is a modified version
(you might say evolved) of my previous theme, &lt;a class="reference external" href="/ghastly/"&gt;Ghastly&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="features"&gt;
&lt;h2&gt;Features&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Disqus&lt;/li&gt;
&lt;li&gt;Pygments&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;CSS&lt;/span&gt; minifying using webassets&lt;/li&gt;
&lt;li&gt;Share buttons&lt;/li&gt;
&lt;li&gt;Custom 404 page&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Mon, 09 Jun 2014 18:00:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2014-06-09:/2014/06/09/hauntr/</guid><category>misc</category><category>pelican</category></item><item><title>Pelican FontAwesome</title><link>https://kura.gg/2014/06/08/pelican-fontawesome/</link><description>
&lt;p&gt;Pelican FontAwesome allows you to embed &lt;a class="reference external" href="https://fortawesome.github.io/Font-Awesome/"&gt;FontAwesome&lt;/a&gt; icons in your &lt;span class="caps"&gt;RST&lt;/span&gt; posts and pages.&lt;/p&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;To install pelican-fontawesome, simply install it from PyPI:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install pelican-fontawesome
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then enable it in your pelicanconf.py&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
    &lt;span class="s1"&gt;'pelican_fontawesome'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Include the FontAwesome &lt;span class="caps"&gt;CSS&lt;/span&gt; in your base template.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"//netdna.bootstrapcdn.com/font-awesome/4.1.0/css/font-awesome.min.css"&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="usage"&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;In your article or page, you simply need to add a reference to FontAwesome and
then the icon name.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;:fa:&lt;/span&gt;&lt;span class="nv"&gt;`fa-github`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which will result in:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"fa fa-github"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And the user will see: &lt;span class="fa fa-github"&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;You can also increase the size, just like the &lt;a class="reference external" href="https://fortawesome.github.io/Font-Awesome/examples/"&gt;FontAwesome documentation&lt;/a&gt; shows.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;:fa:&lt;/span&gt;&lt;span class="nv"&gt;`fa-github fa-4x`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Will result in: &lt;span class="fa fa-github fa-4x"&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="license"&gt;
&lt;h2&gt;License&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://opensource.org/licenses/MIT"&gt;&lt;span class="caps"&gt;MIT&lt;/span&gt;&lt;/a&gt; license.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Sun, 08 Jun 2014 11:30:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2014-06-08:/2014/06/08/pelican-fontawesome/</guid><category>coding</category><category>pelican</category><category>fontawesome</category><category>icons</category><category>python</category></item><item><title>Python platform and version dependent wheel build bot proposal</title><link>https://kura.gg/2014/05/29/python-platform-and-version-dependent-wheel-build-bot-proposal/</link><description>&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;This proposal describes a build system for generating “wheel” archives and is
very, very informal. This plan was drawn up after a random discussion with
Jannis Liedel on Twitter and &lt;span class="caps"&gt;IRC&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Wheel files can be platform and Python-version dependent, a way of generating
these files automatically needs to be created and linked to the Packaging
Index (PyPI.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="design"&gt;
&lt;h2&gt;Design&lt;/h2&gt;
&lt;p&gt;After discussions with Jannis, I believe the simplest
solution would likely be the best solution for this problem. As such, I feel
that using a custom-built, lightweight solution makes more sense than using
something like buildbot.&lt;/p&gt;
&lt;div class="section" id="technology"&gt;
&lt;h3&gt;Technology&lt;/h3&gt;
&lt;p&gt;I feel the platform should leverage existing Python packages that are tried,
tested and well used in the community. Therefore I feel we should use a
combination of the following;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;RabbitMQ for queueing builds&lt;/li&gt;
&lt;li&gt;Celery for building wheels and&lt;/li&gt;
&lt;li&gt;pyenv for managing multiple Python versions&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="operating-systems"&gt;
&lt;h3&gt;Operating systems&lt;/h3&gt;
&lt;p&gt;I lack any understanding of Windows or …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Thu, 29 May 2014 12:30:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2014-05-29:/2014/05/29/python-platform-and-version-dependent-wheel-build-bot-proposal/</guid><category>coding</category><category>python</category><category>wheel</category></item><item><title>tugboat-bash-completion</title><link>https://kura.gg/2014/05/28/tugboat-bash-completion/</link><description>
&lt;p&gt;tugboat-bash-completion is a bash completion script the &lt;a class="reference external" href="https://github.com/pearkes/tugboat"&gt;tugboat&lt;/a&gt; &lt;span class="caps"&gt;CLI&lt;/span&gt; interface for the &lt;a class="reference external" href="https://www.digitalocean.com/"&gt;Digital Ocean&lt;/a&gt; &lt;span class="caps"&gt;API&lt;/span&gt;.&lt;/p&gt;
&lt;div class="section" id="downloads"&gt;
&lt;h2&gt;Downloads&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/kura/tugboat-bash-completion/tarball/master"&gt;.tar.gz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/kura/tugboat-bash-completion/zipball/master"&gt;.zip&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;div class="section" id="debian-ubuntu"&gt;
&lt;h3&gt;Debian/Ubuntu&lt;/h3&gt;
&lt;div class="section" id="install-manually"&gt;
&lt;h4&gt;Install manually&lt;/h4&gt;
&lt;p&gt;Download the source file from above and run the commands below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo make install
. ~/bashrc
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or you can do it the lazy way&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo wget https://github.com/kura/tugboat-bash-completion/blob/master/tugboat &lt;span class="se"&gt;\&lt;/span&gt;
    -O /etc/bash_completion.d/tugboat
. ~/bashrc
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="notes"&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;It’s worth noting that any command that supports a FUZZY_MATCH will take a
small amount of time to respond, due to querying the &lt;span class="caps"&gt;API&lt;/span&gt; for a list of either
droplets or images.&lt;/p&gt;
&lt;p&gt;Commands that do a droplet lookup;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;destroy&lt;/li&gt;
&lt;li&gt;halt&lt;/li&gt;
&lt;li&gt;info&lt;/li&gt;
&lt;li&gt;password-reset&lt;/li&gt;
&lt;li&gt;rebuild&lt;/li&gt;
&lt;li&gt;resize&lt;/li&gt;
&lt;li&gt;restart&lt;/li&gt;
&lt;li&gt;snapshot&lt;/li&gt;
&lt;li&gt;ssh&lt;/li&gt;
&lt;li&gt;start&lt;/li&gt;
&lt;li&gt;wait&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An image lookup;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;destroy_image&lt;/li&gt;
&lt;li&gt;info_image&lt;/li&gt;
&lt;li&gt;rebuild&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="source"&gt;
&lt;h2&gt;Source&lt;/h2&gt;
&lt;p&gt;The source can be found on &lt;a class="reference external" href="https://github.com/kura/tugboat-bash-completion"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="issues"&gt;
&lt;h2&gt;Issues&lt;/h2&gt;
&lt;p&gt;Issues can be tracked using &lt;a class="reference external" href="https://github.com/kura/tugboat-bash-completion/issues"&gt;GitHub Issues&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="license"&gt;
&lt;h2&gt;License&lt;/h2&gt;
&lt;p&gt;This software is licensed using the &lt;span class="caps"&gt;MIT&lt;/span&gt; License.
The …&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Wed, 28 May 2014 09:00:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2014-05-28:/2014/05/28/tugboat-bash-completion/</guid><category>coding</category><category>digital ocean</category><category>tugboat</category><category>bash</category><category>completion</category></item><item><title>Ghastly - A theme for Pelican</title><link>https://kura.gg/2014/05/26/ghastly-a-theme-for-pelican/</link><description>&lt;div class="figure"&gt;
&lt;img alt="Gastly, the Ghost Pokémon" src="/images/gastly.png"/&gt;
&lt;p class="caption"&gt;(Image by &lt;a class="reference external" href="https://raiba-art.deviantart.com/art/Gastly-294533100"&gt;Raiba-art&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I’d like to introduce Ghastly, a clean and minimal, lightweight theme for the
&lt;a class="reference external" href="https://getpelican.com"&gt;Pelican&lt;/a&gt; blogging platform.&lt;/p&gt;
&lt;p&gt;Ghastly is based heavily off of Casper, the default theme for
&lt;a class="reference external" href="https://ghost.org"&gt;Ghost&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It’s name is derived from the D&amp;amp;D monster, the Ghast and Gastly, the Pokémon.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Mon, 26 May 2014 23:00:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2014-05-26:/2014/05/26/ghastly-a-theme-for-pelican/</guid><category>coding</category><category>pelican</category><category>ghost</category></item><item><title>Moved debian and ubuntu to separate repositories on apt.kura.gg</title><link>https://kura.gg/2014/03/24/moved-debian-and-ubuntu-to-separate-repositories-on-apt.kura.gg/</link><description>
&lt;p&gt;I have made a breaking change to the &lt;a class="reference external" href="/apt.kura.gg/"&gt;apt.kura.gg&lt;/a&gt; repositories.&lt;/p&gt;
&lt;p&gt;Ubuntu is now properly supported, but to do this properly it meant separating
Ubuntu and Debian in to totally separate sections to fix the dependency issues.&lt;/p&gt;
&lt;div class="section" id="breaking-changes"&gt;
&lt;h2&gt;Breaking changes&lt;/h2&gt;
&lt;p&gt;Anyone currently using apt.kura.gg as it is will get 404 errors and will need to
reconfigure their &lt;span class="caps"&gt;APT&lt;/span&gt; settings.&lt;/p&gt;
&lt;div class="section" id="debian"&gt;
&lt;h3&gt;Debian&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo sed -i 's/apt.kura.gg\//apt.kura.gg\/debian\//g' /etc/apt/sources.list.d/apt.kura.gg.list
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ubuntu"&gt;
&lt;h3&gt;Ubuntu&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo sed -i 's/apt.kura.gg\//apt.kura.gg\/ubuntu\//g' /etc/apt/sources.list.d/apt.kura.gg.list
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Mon, 24 Mar 2014 19:19:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2014-03-24:/2014/03/24/moved-debian-and-ubuntu-to-separate-repositories-on-apt.kura.gg/</guid><category>deb builds</category><category>apt</category></item><item><title>apt.kura.gg now supports i386</title><link>https://kura.gg/2014/03/08/apt.kura.gg-now-supports-i386/</link><description>&lt;p&gt;I have decided to support the i386 architecture on &lt;a class="reference external" href="/apt.kura.gg/"&gt;apt.kura.gg&lt;/a&gt; as well as amd64.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Sat, 08 Mar 2014 15:20:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2014-03-08:/2014/03/08/apt.kura.gg-now-supports-i386/</guid><category>deb builds</category><category>apt</category></item><item><title>haproxy1.5-dev22kura1</title><link>https://kura.gg/2014/03/06/haproxy1.5-dev22kura1/</link><description>
&lt;div class="section" id="changes"&gt;
&lt;h2&gt;Changes&lt;/h2&gt;
&lt;p&gt;This patched version is built using the &lt;cite&gt;USE_ZLIB&lt;/cite&gt; option, allowing for usage
of compression or using haproxy as a compression offloader.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="requirements"&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;haproxy requires openssl-1.0.1d or higher.&lt;/p&gt;
&lt;p&gt;On a standard Debian 7 install you should have openssl-1.0.1e-2, you
can find which version you have by running&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dpkg -l openssl
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This should return something similar to&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ii  openssl        1.0.1e-2        amd64        Secure Socket Layer (SSL) binary and related cryptographic tools
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="build-notes"&gt;
&lt;h2&gt;Build notes&lt;/h2&gt;
&lt;p&gt;Builds were done on Debian 7 &lt;span class="caps"&gt;AMD64&lt;/span&gt;, I will not be providing 32bit versions as
this is mainly for my own usage and amusement.&lt;/p&gt;
&lt;p&gt;This haproxy build is compiled against openssl, providing the npn module,
allowing for haproxy to work under &lt;span class="caps"&gt;SSL&lt;/span&gt;/&lt;span class="caps"&gt;TLS&lt;/span&gt; and allowing the use of &lt;span class="caps"&gt;SPDY&lt;/span&gt;/2 and
&lt;span class="caps"&gt;SPDY&lt;/span&gt;/3.&lt;/p&gt;
&lt;p&gt;This version is available on &lt;a class="reference external" href="/apt.kura.gg/"&gt;apt.kura.gg&lt;/a&gt;
or as a manual download, from the link below.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="manual-download"&gt;
&lt;h2&gt;Manual download …&lt;/h2&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Thu, 06 Mar 2014 03:32:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2014-03-06:/2014/03/06/haproxy1.5-dev22kura1/</guid><category>deb builds</category><category>debian</category><category>ubuntu</category><category>haproxy</category><category>spdy</category><category>ssl</category></item><item><title>pypip.in most requested shields</title><link>https://kura.gg/2014/03/03/pypip.in-most-requested-shields/</link><description>
&lt;div class="section" id="pypip-in"&gt;
&lt;h2&gt;pypip.in&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pypip.in/"&gt;pypip.in&lt;/a&gt; is a website &lt;a class="reference external" href="/2013/12/24/shields-for-pypi-packages/"&gt;I have written about before&lt;/a&gt;. I decided I would
look at the shields and see which ones were the most requested so far this year.&lt;/p&gt;
&lt;p&gt;Due to the volumn of requests, I only keep 90 days
of logs from nginx and no logs from Varnish, pypipin or the local version of
buckler. nginx sits in front of Varnish so, even if Varnish responds with a
cached version of the shield, a log line is still written to say it was requested.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="top-20"&gt;
&lt;h2&gt;Top 20&lt;/h2&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://docs.python-requests.org/en/latest/index.html"&gt;requests&lt;/a&gt; [downloads]&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pillow.readthedocs.org/en/latest/"&gt;Pillow&lt;/a&gt; [version]&lt;/li&gt;
&lt;li&gt;Pillow [downloads]&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://deeplearning.net/software/theano/"&gt;Theano&lt;/a&gt; [version]&lt;/li&gt;
&lt;li&gt;Theano [downloads]&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/joke2k/faker"&gt;fake-factory&lt;/a&gt; [downloads]&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://livestreamer.tanuki.se/en/latest/install.html"&gt;livestreamer&lt;/a&gt; [downloads]&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.django-cms.org/en/"&gt;django-cms&lt;/a&gt; [downloads]&lt;/li&gt;
&lt;li&gt;django-cms [version]&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/sivel/speedtest-cli"&gt;speedtest-cli&lt;/a&gt; [version]&lt;/li&gt;
&lt;li&gt;speedtest-cli [downloads]&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://boto.readthedocs.org/en/latest/"&gt;boto&lt;/a&gt; [downloads]&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/globocom/thumbor"&gt;thumbor&lt;/a&gt; [downloads]&lt;/li&gt;
&lt;li&gt;thumbor [version]&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.pip-installer.org/en/latest/"&gt;pip&lt;/a&gt; [version]&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pythonhosted.org/tweepy/html/"&gt;tweepy&lt;/a&gt; [version]&lt;/li&gt;
&lt;li&gt;tweepy [downloads]&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://django-allauth.readthedocs.org/en/latest/"&gt;django-allauth&lt;/a&gt; [downloads]&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://pymssql.org/"&gt;pymssql&lt;/a&gt; [downloads]&lt;/li&gt;
&lt;li&gt;pymssql [version]&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first thing that struck me is that I actually hadn’t heard of or used
quite a lot of …&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Mon, 03 Mar 2014 21:40:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2014-03-03:/2014/03/03/pypip.in-most-requested-shields/</guid><category>misc</category><category>python</category><category>pypi</category><category>pip</category></item><item><title>vagrant-bash-completion &amp; go-bash-completion on apt.kura.gg</title><link>https://kura.gg/2014/02/27/vagrant-bash-completion-and-go-bash-completion-on-apt.kura.gg/</link><description>
&lt;div class="section" id="requirements"&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;bash-completion 1:2.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="downloads"&gt;
&lt;h2&gt;Downloads&lt;/h2&gt;
&lt;p&gt;There versions are available on &lt;a class="reference external" href="/apt.kura.gg/"&gt;apt.kura.gg&lt;/a&gt;
or as a manual download, from the links below.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="manual-download"&gt;
&lt;h2&gt;Manual download&lt;/h2&gt;
&lt;table class="docutils"&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="/files/vagrant-bash-completion-0.0.6.deb"&gt;vagrant-bash-completion-0.0.6.deb&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="/files/go-bash-completion-0.0.1.deb"&gt;go-bash-completion-0.0.1.deb&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="md5"&gt;
&lt;h2&gt;&lt;span class="caps"&gt;MD5&lt;/span&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1dcb73ca965b3731df20823a6005392c  vagrant-bash-completion-0.0.6.deb
db494d0bf1b3dcdbcce5b0111ad377a0  go-bash-completion-0.0.1.deb
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="sha1"&gt;
&lt;h2&gt;&lt;span class="caps"&gt;SHA1&lt;/span&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ed6890fdd08ac459a0f61112fcfb48f9e3ce953d  vagrant-bash-completion-0.0.6.deb
fd92cd53f2d6ff98077cb10d3578381025d002e7  go-bash-completion-0.0.1.deb
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Thu, 27 Feb 2014 23:14:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2014-02-27:/2014/02/27/vagrant-bash-completion-and-go-bash-completion-on-apt.kura.gg/</guid><category>deb builds</category><category>debian</category><category>ubuntu</category><category>vagrant</category><category>go</category><category>bash</category><category>completion</category></item><item><title>haproxy1.5-dev22</title><link>https://kura.gg/2014/02/22/haproxy1.5-dev22/</link><description>
&lt;div class="section" id="requirements"&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;haproxy requires openssl-1.0.1d or higher.&lt;/p&gt;
&lt;p&gt;On a standard Debian 7 install you should have openssl-1.0.1e-2, you
can find which version you have by running&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dpkg -l openssl
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This should return something similar to&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ii  openssl        1.0.1e-2        amd64        Secure Socket Layer (SSL) binary and related cryptographic tools
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="build-notes"&gt;
&lt;h2&gt;Build notes&lt;/h2&gt;
&lt;p&gt;Builds were done on Debian 7 &lt;span class="caps"&gt;AMD64&lt;/span&gt;, I will not be providing 32bit versions as
this is mainly for my own usage and amusement.&lt;/p&gt;
&lt;p&gt;This haproxy build is compiled against openssl, providing the npn module,
allowing for haproxy to work under &lt;span class="caps"&gt;SSL&lt;/span&gt;/&lt;span class="caps"&gt;TLS&lt;/span&gt; and allowing the use of &lt;span class="caps"&gt;SPDY&lt;/span&gt;/2 and
&lt;span class="caps"&gt;SPDY&lt;/span&gt;/3.&lt;/p&gt;
&lt;p&gt;This version is available on &lt;a class="reference external" href="/apt.kura.gg/"&gt;apt.kura.gg&lt;/a&gt;
or as a manual download, from the link below.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="manual-download"&gt;
&lt;h2&gt;Manual download&lt;/h2&gt;
&lt;table class="docutils"&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="/files/haproxy_1.5-dev22_amd64.deb"&gt;haproxy_1.5-dev22_amd64.deb&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="md5"&gt;
&lt;h2&gt;&lt;span class="caps"&gt;MD5&lt;/span&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1d258aaf1592ac5d6cb34e495e283591  haproxy_1.5-dev22_amd64.deb
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="sha1"&gt;
&lt;h2&gt;&lt;span class="caps"&gt;SHA1&lt;/span&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;f17cb661d2ceb1686a0a4b8566168503a0d372d9  haproxy_1.5-dev22_amd64.deb
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Sat, 22 Feb 2014 05:32:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2014-02-22:/2014/02/22/haproxy1.5-dev22/</guid><category>deb builds</category><category>debian</category><category>ubuntu</category><category>haproxy</category><category>spdy</category><category>ssl</category></item><item><title>haproxy stateful SSL session resumption</title><link>https://kura.gg/2014/02/22/haproxy-stateful-ssl-session-resumption/</link><description>
&lt;p&gt;By default haproxy enables stateless &lt;span class="caps"&gt;SSL&lt;/span&gt; session resumption, but you can enable
stateful session resumption in accordance with
&lt;a class="reference external" href="https://www.ietf.org/rfc/rfc5077.txt"&gt;&lt;span class="caps"&gt;RFC&lt;/span&gt; 5077&lt;/a&gt;. This functionality, like
the &lt;span class="caps"&gt;SSL&lt;/span&gt; handling it relies on is only available from haproxy 1.5.&lt;/p&gt;
&lt;div class="section" id="configuration"&gt;
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;The option to enable stateful &lt;span class="caps"&gt;SSL&lt;/span&gt; session resumption is as below&lt;/p&gt;
&lt;pre class="literal-block"&gt;
no-tls-tickets
&lt;/pre&gt;
&lt;p&gt;You will need to add it in to your bind line, like below&lt;/p&gt;
&lt;pre class="literal-block"&gt;
bind 0.0.0.0:443 ssl ... no-tls-tickets
&lt;/pre&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Sat, 22 Feb 2014 05:10:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2014-02-22:/2014/02/22/haproxy-stateful-ssl-session-resumption/</guid><category>tutorials</category><category>haproxy</category><category>ssl</category></item><item><title>nginx 1.5.10 with SPDY 3.1</title><link>https://kura.gg/2014/02/06/nnginx-1.5.10-with-spdy3.1/</link><description>
&lt;p&gt;I have built and released nginx 1.5.10 with &lt;span class="caps"&gt;SPDY&lt;/span&gt; 3.1. Like the &lt;a class="reference external" href="/2014/02/02/nginx-1.5.9-and-ngx_pagespeed-1.7.30.3-beta/"&gt;nginx 1.5.9
release&lt;/a&gt;
, this release comes with ngx_pagespeed 1.7.30.3-beta and is available
on &lt;a class="reference external" href="https://apt.kura.gg"&gt;apt.kura.gg&lt;/a&gt; or as downloads below.&lt;/p&gt;
&lt;div class="section" id="manual-download"&gt;
&lt;h2&gt;Manual download&lt;/h2&gt;
&lt;table class="docutils"&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="/files/nginx_1.5.10_all.deb"&gt;nginx_1.5.10_all.deb&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="/files/nginx-common_1.5.10_all.deb"&gt;nginx-common_1.5.10_all.deb&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="/files/nginx-doc_1.5.10_all.deb"&gt;nginx-doc_1.5.10_all.deb&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="/files/nginx-light_1.5.10_amd64.deb"&gt;nginx-light_1.5.10_amd64.deb&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="/files/nginx-full_1.5.10_amd64.deb"&gt;nginx-full_1.5.10_amd64.deb&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="/files/nginx-extras_1.5.10_amd64.deb"&gt;nginx-extras_1.5.10_amd64.deb&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="/files/nginx-naxsi_1.5.10_amd64.deb"&gt;nginx-naxsi_1.5.10_amd64.deb&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="/files/nginx-naxsi-ui_1.5.10_all.deb"&gt;nginx-naxsi-ui_1.5.10_all.deb&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="/files/nginx-light-dbg_1.5.10_amd64.deb"&gt;nginx-light-dbg_1.5.10_amd64.deb&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="/files/nginx-full-dbg_1.5.10_amd64.deb"&gt;nginx-full-dbg_1.5.10_amd64.deb&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="/files/nginx-extras-dbg_1.5.10_amd64.deb"&gt;nginx-extras-dbg_1.5.10_amd64.deb&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="/files/nginx-naxsi-dbg_1.5.10_amd64.deb"&gt;nginx-naxsi-dbg_1.5.10_amd64.deb&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="md5"&gt;
&lt;h2&gt;&lt;span class="caps"&gt;MD5&lt;/span&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;9fe2e5273cc195161268f7d85261c4e2  nginx_1.5.10_all.deb
edc55aa4866036eade02cd49957a9126  nginx-common_1.5.10_all.deb
0361cdb3d00ac6e65c5e9d6167ba0d36  nginx-doc_1.5.10_all.deb
833264c08fc6212f55ae37c26bd5cbc5  nginx-light_1.5.10_amd64.deb
c5c1ffa0dd93673ac4a859a11d1b3b50  nginx-full_1.5.10_amd64 …&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Thu, 06 Feb 2014 03:30:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2014-02-06:/2014/02/06/nnginx-1.5.10-with-spdy3.1/</guid><category>deb builds</category><category>debian</category><category>ubuntu</category><category>nginx</category><category>spdy</category><category>pagespeed</category><category>ngx_pagespeed</category></item><item><title>nginx 1.5.9 and ngx_pagespeed 1.7.30.3-beta</title><link>https://kura.gg/2014/02/02/nginx-1.5.9-and-ngx_pagespeed-1.7.30.3-beta/</link><description>
&lt;p&gt;I have built and released nginx 1.5.9 with ngx_pagespeed module 1.7.30.3-beta
and published them on &lt;a class="reference external" href="https://apt.kura.gg"&gt;apt.kura.gg&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="manual-download-install"&gt;
&lt;h2&gt;Manual download &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; install&lt;/h2&gt;
&lt;table class="docutils"&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="/files/nginx_1.5.9_all.deb"&gt;nginx_1.5.9_all.deb&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="/files/nginx-common_1.5.9_all.deb"&gt;nginx-common_1.5.9_all.deb&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="/files/nginx-doc_1.5.9_all.deb"&gt;nginx-doc_1.5.9_all.deb&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="/files/nginx-light_1.5.9_amd64.deb"&gt;nginx-light_1.5.9_amd64.deb&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="/files/nginx-full_1.5.9_amd64.deb"&gt;nginx-full_1.5.9_amd64.deb&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="/files/nginx-extras_1.5.9_amd64.deb"&gt;nginx-extras_1.5.9_amd64.deb&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="/files/nginx-naxsi_1.5.9_amd64.deb"&gt;nginx-naxsi_1.5.9_amd64.deb&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="/files/nginx-naxsi-ui_1.5.9_all.deb"&gt;nginx-naxsi-ui_1.5.9_all.deb&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="/files/nginx-light-dbg_1.5.9_amd64.deb"&gt;nginx-light-dbg_1.5.9_amd64.deb&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="/files/nginx-full-dbg_1.5.9_amd64.deb"&gt;nginx-full-dbg_1.5.9_amd64.deb&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="/files/nginx-extras-dbg_1.5.9_amd64.deb"&gt;nginx-extras-dbg_1.5.9_amd64.deb&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="/files/nginx-naxsi-dbg_1.5.9_amd64.deb"&gt;nginx-naxsi-dbg_1.5.9_amd64.deb&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="md5"&gt;
&lt;h2&gt;&lt;span class="caps"&gt;MD5&lt;/span&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;e3595519df9865941f0bd5c2c28bba18  nginx_1.5.9_all.deb
b2f3e4dcded2ce419175be8f4329b81e  nginx-common_1.5.9_all.deb
379ea6ad2805f3584609617deb5d1db9  nginx-doc_1.5.9_all.deb
140247350a651b24bde7278ce1f18148  nginx-light_1.5.9_amd64.deb
0a28a4965f00a5e739187aa81a16af3f  nginx-full_1.5.9_amd64.deb
e54ab6b670cfe7d56502ef08b6e2656f  nginx-extras_1.5.9_amd64.deb
9bb9b524c523a69f9f263eefbe5f5783  nginx-naxsi_1.5.9_amd64.deb
7b8e254515d3b6f90b8e55c720d314b8 …&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Sun, 02 Feb 2014 17:54:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2014-02-02:/2014/02/02/nginx-1.5.9-and-ngx_pagespeed-1.7.30.3-beta/</guid><category>deb builds</category><category>debian</category><category>ubuntu</category><category>haproxy</category><category>nginx</category><category>spdy</category><category>pagespeed</category><category>ngx_pagespeed</category></item><item><title>kura.gg’s A* SSL rating</title><link>https://kura.gg/2014/02/02/kura.gg-a-star-ssl-rating/</link><description>
&lt;p&gt;I am a firm believer in using &lt;span class="caps"&gt;SSL&lt;/span&gt; as much as possible, for me that is pretty
much everywhere and, thanks to the wonderful guys at
&lt;a class="reference external" href="https://www.globalsign.com/"&gt;GlobalSign&lt;/a&gt;, most of
my &lt;span class="caps"&gt;SSL&lt;/span&gt; certificates are free becauses my projects are all open source.&lt;/p&gt;
&lt;p&gt;I used a blog post by &lt;a class="reference external" href="https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/"&gt;Hynek Schlawack&lt;/a&gt;
as a base for my &lt;span class="caps"&gt;SSL&lt;/span&gt; setup, he is keeping this article up-to-date as much as
possible so it should be a great source for any security conscious people that
would like to know more and get good explanations about each part.&lt;/p&gt;
&lt;p&gt;Let’s take a brief look at how this website achieves it’s A* rating.&lt;/p&gt;
&lt;div class="section" id="key"&gt;
&lt;h2&gt;Key&lt;/h2&gt;
&lt;p&gt;I use a 4096 bit &lt;span class="caps"&gt;RSA&lt;/span&gt; key that is no a &lt;a class="reference external" href="https://wiki.debian.org/SSLkeys#Identifying_Weak_Keys"&gt;Debian weak key&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="protcols"&gt;
&lt;h2&gt;Protcols&lt;/h2&gt;
&lt;p&gt;I do not support SSLv2 or SSLv3 but I do support much stronger protocols;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;span class="caps"&gt;TLS&lt;/span&gt; 1.2,&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;TLS&lt;/span&gt; 1.1 and,&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;TLS&lt;/span&gt; 1.0.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="dhparam"&gt;
&lt;h2&gt;dhparam&lt;/h2&gt;
&lt;p&gt;It’s a …&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Sun, 02 Feb 2014 15:18:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2014-02-02:/2014/02/02/kura.gg-a-star-ssl-rating/</guid><category>tutorials</category><category>ssl</category></item><item><title>Advertise multiple NPN protocols with haproxy</title><link>https://kura.gg/2014/01/31/advertise-multiple-npn-protocols-with-haproxy/</link><description>&lt;p&gt;I have previously written an article on &lt;a class="reference external" href="/2013/07/15/haproxy-nginx-and-spdy-with-ssl-termination-debian-7/"&gt;using &lt;span class="caps"&gt;SPDY&lt;/span&gt; with haproxy&lt;/a&gt;
but have been spending some time recently being annoyed that the &lt;a class="reference external" href="https://spdycheck.org/#kura.gg"&gt;&lt;span class="caps"&gt;SPDY&lt;/span&gt; check
tool&lt;/a&gt; said I didn’t advertise a fall back to
&lt;span class="caps"&gt;HTTP&lt;/span&gt; over &lt;span class="caps"&gt;SSL&lt;/span&gt; in the &lt;span class="caps"&gt;NPN&lt;/span&gt; protocol list.&lt;/p&gt;
&lt;p&gt;After some digging I discovered it was actually quite simple to advertise
multiple protocols using npn and haproxy.&lt;/p&gt;
&lt;p&gt;Previously my article called for using the following section of configuration
at the end of the bind line.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;npn spdy/2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To advertise &lt;span class="caps"&gt;HTTP&lt;/span&gt; protocols as well as &lt;span class="caps"&gt;SPDY&lt;/span&gt; you simply need to add them to the
npn list, using commas as a delimiter.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;npn spdy/2,http/1.1
&lt;/pre&gt;&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Fri, 31 Jan 2014 15:25:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2014-01-31:/2014/01/31/advertise-multiple-npn-protocols-with-haproxy/</guid><category>tutorials</category><category>haproxy</category><category>npn</category><category>spdy</category><category>http/1.1</category></item><item><title>apt.kura.gg</title><link>https://kura.gg/2014/01/26/apt.kura.gg/</link><description>&lt;p&gt;After releasing my own versions of haproxy with &lt;span class="caps"&gt;SPDY&lt;/span&gt; support and nginx with
ngx_pagespeed and &lt;span class="caps"&gt;SPDY&lt;/span&gt; support, I decided it would make sense to actually
host these in my own apt repository, so I did.&lt;/p&gt;
&lt;p&gt;You can enable this by adding it to your apt config.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget -qO - https://apt.kura.gg/apt.kura.gg.key &lt;span class="p"&gt;|&lt;/span&gt; sudo apt-key add -
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"deb https://apt.kura.gg/ `lsb_release -cs` main"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sudo tee /etc/apt/sources.list.d/apt.kura.gg.list
sudo apt-get update
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Simple.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Sun, 26 Jan 2014 02:05:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2014-01-26:/2014/01/26/apt.kura.gg/</guid><category>deb builds</category><category>apt</category></item><item><title>deadsnakes.sh</title><link>https://kura.gg/2014/01/26/deadsnakes.sh/</link><description>&lt;p&gt;If you’re an Python developer that uses Ubuntu or even Debian, you have
probably heard of Felix Krull’s &lt;a class="reference external" href="https://launchpad.net/~fkrull/+archive/deadsnakes"&gt;deadsnakes&lt;/a&gt; &lt;span class="caps"&gt;PPA&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;I find myself using it a lot and since I tend to destroy my environments quite
frequently, I thought I’d save myself some time and write a simple
shell script to install the &lt;span class="caps"&gt;PPA&lt;/span&gt;, the versions of Python I frequently use and,
after messing up a machine — ignore the existing version of python.&lt;/p&gt;
&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/8517802.js'&gt;&lt;/script&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Sun, 26 Jan 2014 01:50:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2014-01-26:/2014/01/26/deadsnakes.sh/</guid><category>coding</category><category>python</category></item><item><title>haproxy1.5-dev21, nginx 1.5.8, SPDY &amp; pagespeed 1.7.30.2</title><link>https://kura.gg/2014/01/08/haproxy1.5-dev21-nginx-1.5.8-spdy-pagespeed-1.7.30.2/</link><description>
&lt;p&gt;I have previously released &lt;a class="reference external" href="/2013/07/15/haproxy-nginx-and-spdy-with-ssl-termination-debian-7/"&gt;haproxy1.5-dev19 with &lt;span class="caps"&gt;SSL&lt;/span&gt; &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; &lt;span class="caps"&gt;SPDY&lt;/span&gt; support enabled&lt;/a&gt;
and &lt;a class="reference external" href="/2013/07/10/nginx-spdy-and-ngx-pagespeed/"&gt;nginx 1.4.1 with &lt;span class="caps"&gt;SPDY&lt;/span&gt; support and pagespeed&lt;/a&gt;, although I do
not remember which version of pagespeed.&lt;/p&gt;
&lt;p&gt;I have received a few messages asking me for the latest version of haproxy,
nginx and pagespeed so I decided to finally build and release them.&lt;/p&gt;
&lt;div class="section" id="requirements"&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;haproxy requires openssl-1.0.1d or higher.&lt;/p&gt;
&lt;p&gt;On a standard Debian 7 install you should have openssl-1.0.1e-2, you
can find which version you have by running&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dpkg -l openssl
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This should return something similar to&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ii  openssl        1.0.1e-2        amd64        Secure Socket Layer (SSL) binary and related cryptographic tools
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="build-notes"&gt;
&lt;h2&gt;Build notes&lt;/h2&gt;
&lt;p&gt;Builds were done on Debian 7 &lt;span class="caps"&gt;AMD64&lt;/span&gt;, I will not be providing 32bit versions as
this is mainly for my own usage and amusement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="haproxy"&gt;
&lt;h2&gt;haproxy&lt;/h2&gt;
&lt;p&gt;This haproxy build is compiled against openssl, providing the npn module,
allowing for haproxy …&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Wed, 08 Jan 2014 13:00:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2014-01-08:/2014/01/08/haproxy1.5-dev21-nginx-1.5.8-spdy-pagespeed-1.7.30.2/</guid><category>deb builds</category><category>debian</category><category>ubuntu</category><category>haproxy</category><category>nginx</category><category>spdy</category><category>pagespeed</category><category>ngx_pagespeed</category></item><item><title>Shields for PyPI packages</title><link>https://kura.gg/2013/12/24/shields-for-pypi-packages/</link><description>
&lt;p&gt;Some time back in April 2013 I was bored and looking for a new project to keep
my attention, if only for a short period of time.&lt;/p&gt;
&lt;p&gt;My colleague &lt;a class="reference external" href="https://twitter.com/codeinthehole"&gt;@codeinthehole&lt;/a&gt; had an idea
but no time to implement it, this idea was to have shields like those of
&lt;a class="reference external" href="https://travis-ci.org"&gt;travis-ci&lt;/a&gt; (shown below) but displaying package
download counts.&lt;/p&gt;
&lt;img alt="Status of blackhole on Travis CI" src="https://api.travis-ci.org/kura/blackhole.png?branch=master"/&gt;
&lt;div class="section" id="tech-stack"&gt;
&lt;h2&gt;Tech stack&lt;/h2&gt;
&lt;p&gt;From the very start I decided to use
&lt;a class="reference external" href="https://www.tornadoweb.org/en/stable/"&gt;Tornado framework&lt;/a&gt;, although this may
change in the future.&lt;/p&gt;
&lt;p&gt;The original plan was to generate the images using Pillow (&lt;span class="caps"&gt;PIL&lt;/span&gt;) and then simply
cache them to disk. I decided it would make far more sense to do this using
&lt;a class="reference external" href="https://www.varnish-cache.org/"&gt;Varnish&lt;/a&gt; and not have to worry about it
working as expected.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="manually-generating-the-images"&gt;
&lt;h2&gt;Manually generating the images&lt;/h2&gt;
&lt;p&gt;The images were originally generated from a base template using Pillow, but
sadly Python’s image manipulation is not very good, especially it’s text
manipulation and the shields could …&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Tue, 24 Dec 2013 14:07:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2013-12-24:/2013/12/24/shields-for-pypi-packages/</guid><category>coding</category><category>python</category><category>pypi</category><category>shields</category></item><item><title>Bye bye Google Analytics, hello self-hosted Open Web Analytics &amp; DuckDuckGo search</title><link>https://kura.gg/2013/09/17/bye-bye-google-analytics-hello-self-hosted-open-web-analytics-duckduckgo-search/</link><description>
&lt;p&gt;Today I can happily announce that &lt;a class="reference external" href="https://github.com/kura/kura.gg/commit/5e82c14bab3922d81b430549dd258a2047d1367f"&gt;the Google Analytics tracking code has been
removed from this website&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="goodybye-google-analytics-hello-open-web-analytics"&gt;
&lt;h2&gt;Goodybye Google Analytics &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; hello Open Web Analytics&lt;/h2&gt;
&lt;p&gt;I’ve been planning on doing it from a while because I do not like Google Analytics,
I don’t like being tracked and I actively stopped trying to use Google services
for my own reasons.&lt;/p&gt;
&lt;p&gt;The company I work for uses &lt;a class="reference external" href="https://piwik.org/"&gt;Piwik&lt;/a&gt;
for some of our clients, I am not a fan
of Piwik or how it works and does things. I did some research and found some
service providers but their free options were limited or I felt they weren’t a
good fit, eventually I stumbled upon &lt;a class="reference external" href="https://www.openwebanalytics.com"&gt;Open Web Analytics&lt;/a&gt; and decided that it
not only suited my purposes, but it meant servers I control would hold the
analytical data, rather than some third party.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hello-duckduckgo"&gt;
&lt;h2&gt;Hello DuckDuckGo&lt;/h2&gt;
&lt;p&gt;After launching the new version of …&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Tue, 17 Sep 2013 18:00:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2013-09-17:/2013/09/17/bye-bye-google-analytics-hello-self-hosted-open-web-analytics-duckduckgo-search/</guid><category>misc</category><category>google analytics</category><category>duckduckgo</category><category>open web analytics</category><category>owa</category></item><item><title>My $PS1 with git branch, new files, staged files and commit status</title><link>https://kura.gg/2013/08/18/my-ps1-with-git-branch-new-files-staged-files-and-commit-status/</link><description>&lt;p&gt;I love my prompt, always have and always will. I spend so much of my life
in a terminal, usually with half a dozen mini terminals open in each tab.
As such I like to tweak it and get it as perfect as possible for my life, needs
and even mood.&lt;/p&gt;
&lt;p&gt;In the past I’ve had quite a large &lt;span class="caps"&gt;PS1&lt;/span&gt; that covers multiple lines and gives a
lot of information, after having that &lt;span class="caps"&gt;PS1&lt;/span&gt; in one form or another for some time
I decided it was time for a change, to a smaller &lt;span class="caps"&gt;PS1&lt;/span&gt; that takes up a lot less space.&lt;/p&gt;
&lt;p&gt;So here it is, the first image is my standard &lt;span class="caps"&gt;PS1&lt;/span&gt; when in a git repository,
the red @ means a file hasn’t been added to Git, a blue @ means a tracked file
has been modified but not stage and finally a green @ means a file is staged …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Sun, 18 Aug 2013 17:25:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2013-08-18:/2013/08/18/my-ps1-with-git-branch-new-files-staged-files-and-commit-status/</guid><category>coding</category><category>bash</category><category>dash</category><category>ps1</category><category>git</category></item><item><title>Blackhole 1.8.0 development, Mock and Python entry_points</title><link>https://kura.gg/2013/08/18/blackhole-1.8.0-development-mock-and-python-entry-points/</link><description>
&lt;p&gt;Over the last week I’ve been doing a huge amount of refactoring of
&lt;a class="reference external" href="https://blackhole.io"&gt;Blackhole&lt;/a&gt; as well as writing dozens of additional
tests. To make Blackhole more testable I needed to make a big change to
how the program is launched and controlled.&lt;/p&gt;
&lt;div class="section" id="setup-py-scripts-vs-entry-points"&gt;
&lt;h2&gt;setup.py scripts vs. entry_points&lt;/h2&gt;
&lt;p&gt;Whenever I’ve written Python programs that require some kind of command line
script I’ve always used distutils’ scripts, this can be seen &lt;a class="reference external" href="https://github.com/kura/blackhole/blob/05c6647aeb25ecfcc17d9df535db330a68016a24/setup.py#L37-L39"&gt;in blackhole’s
setup.py on GitHub&lt;/a&gt;
or in the three line example below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;scripts&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;'blackhole/bin/blackhole'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;],&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In doing so, it allowed me to be lazy and write a lot of prodecural code in the
main “binary” which made it pretty much impossible to test. You can also see
that &lt;a class="reference external" href="https://github.com/kura/blackhole/blob/bb6cccca3a75def324ed5cb64a32fd2e5773a038/blackhole/bin/blackhole"&gt;on GitHub in the main “binary”&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I’ve noticed that most people who write Python packages that have some kind of
command line entry point use …&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Sun, 18 Aug 2013 12:00:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2013-08-18:/2013/08/18/blackhole-1.8.0-development-mock-and-python-entry-points/</guid><category>coding</category><category>python</category><category>blackhole</category><category>setup.py</category><category>entry_points</category><category>mock</category><category>tests</category><category>testing</category></item><item><title>Writing a Vimeo and YouTube plugin for Pelican</title><link>https://kura.gg/2013/08/09/writing-a-vimeo-and-youtube-plugin-for-pelican/</link><description>
&lt;p&gt;&lt;a class="reference external" href="https://getpelican.com/"&gt;Pelican&lt;/a&gt; is a Python-powered static blog generator
that processes &lt;a class="reference external" href="https://docutils.sourceforge.net/rst.html"&gt;ReStructuredText&lt;/a&gt;
and &lt;a class="reference external" href="https://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt; articles and
pages and converts them to &lt;span class="caps"&gt;HTML&lt;/span&gt;. I use Pelican to power this blog.&lt;/p&gt;
&lt;p&gt;There is a YouTube &lt;span class="caps"&gt;RST&lt;/span&gt; directive built in to Pelican core but it really
shouldn’t exist there.&lt;/p&gt;
&lt;p&gt;I submitted a pull request for Pelican core to enable Vimeo videos in articles
but that request was declined because it didn’t belong in the core. So I
decided I would write it as a plugin instead and while I was doing it, also
wrote a plugin for YouTube so that it could be removed from the core.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.getpelican.com/en/3.2/plugins.html#how-to-create-plugins"&gt;There is a decent amount of detail in the Pelican documentation on how to
write plugins&lt;/a&gt;, I’m
not going to cover the whole process but I thought I would cover a little of
what I did.&lt;/p&gt;
&lt;div class="section" id="adding-an-rst-directive"&gt;
&lt;h2&gt;Adding an &lt;span class="caps"&gt;RST&lt;/span&gt; directive&lt;/h2&gt;
&lt;p&gt;Really all we’re doing …&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Fri, 09 Aug 2013 17:38:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2013-08-09:/2013/08/09/writing-a-vimeo-and-youtube-plugin-for-pelican/</guid><category>coding</category><category>python</category><category>pelican</category><category>youtube</category><category>vimeo</category></item><item><title>Writing the STARTTLS command in to Blackhole</title><link>https://kura.gg/2013/07/31/writing-the-starttls-command-in-to-blackhole/</link><description>
&lt;p&gt;Blackhole has always been able to handle unencrypted &lt;span class="caps"&gt;SMTP&lt;/span&gt; and
for a long time it’s been able to handle encrypted &lt;span class="caps"&gt;SMTP&lt;/span&gt; via TLSv1.&lt;/p&gt;
&lt;p&gt;One thing Blackhole hasn’t been able to do until the 1.7.0 release
is handle &lt;cite&gt;&lt;span class="caps"&gt;STARTTLS&lt;/span&gt;&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;In the past the &lt;cite&gt;&lt;span class="caps"&gt;STARTTLS&lt;/span&gt;&lt;/cite&gt; command would cause Blackhole to return the
standard &lt;cite&gt;250 &lt;span class="caps"&gt;OK&lt;/span&gt;&lt;/cite&gt; response but would continue to operate on unencrypted
&lt;span class="caps"&gt;SMTP&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;I wanted to fix this and do it properly, but this meant learning how
to do so with Tornado, which itself proved to be tricky. I ended up
deciding to go to my local coding spot - the pub and hash it out.&lt;/p&gt;
&lt;div class="section" id="connection-stream"&gt;
&lt;h2&gt;connection_stream&lt;/h2&gt;
&lt;p&gt;The first thing I had to do was refactor the code that created the
instance of &lt;cite&gt;tornado.iostream.IOStream&lt;/cite&gt; and &lt;cite&gt;tornado.iostream.SSLIOStream&lt;/cite&gt;
so that it didn’t actually do the ssl wrapping.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;connection_stream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Detect which socket …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Wed, 31 Jul 2013 13:36:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2013-07-31:/2013/07/31/writing-the-starttls-command-in-to-blackhole/</guid><category>coding</category><category>python</category><category>tornado</category><category>iostream</category><category>ssl</category><category>starttls</category><category>blackhole</category></item><item><title>Wrapping a Tornado IOStream with SSL</title><link>https://kura.gg/2013/07/29/wrapping-a-tornado-iostream-with-ssl/</link><description>
&lt;p&gt;As part of my effort to make &lt;a class="reference external" href="https://blackhole.io/"&gt;Blackhole&lt;/a&gt; as
useful and usable as possible, I needed to be able to support &lt;span class="caps"&gt;SSL&lt;/span&gt;/&lt;span class="caps"&gt;TLS&lt;/span&gt;
enabled connections.&lt;/p&gt;
&lt;p&gt;Tornado itself has two built-in IOStreams that help us do the job;
the first is the standard &lt;a class="reference external" href="https://www.tornadoweb.org/en/stable/iostream.html#tornado.iostream.IOStream"&gt;IOStream&lt;/a&gt;
and the second is the &lt;a class="reference external" href="https://www.tornadoweb.org/en/stable/iostream.html#tornado.iostream.SSLIOStream"&gt;SSLIOStream&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With this in mind we simply need to spawn two sockets, by default these
listen on port 25 for standard &lt;span class="caps"&gt;SMTP&lt;/span&gt; and port 465 for &lt;span class="caps"&gt;SSL&lt;/span&gt;/&lt;span class="caps"&gt;TLS&lt;/span&gt;
encrypted &lt;span class="caps"&gt;SMTP&lt;/span&gt;. With these two sockets bound we’re then very
simply able to listen for incoming connections on either socket
and use &lt;cite&gt;socket.socket.getsockname()&lt;/cite&gt; to figure out if the
connection is to the encrypted or unencrypted socket.&lt;/p&gt;
&lt;div class="section" id="code"&gt;
&lt;h2&gt;Code&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;connection_stream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Detect which socket the connection is being made on,&lt;/span&gt;
&lt;span class="sd"&gt;    create and iostream for the connection, wrapping it&lt;/span&gt;
&lt;span class="sd"&gt;    in SSL if connected over the SSL socket.&lt;/span&gt;

&lt;span class="sd"&gt;    The parameter 'connection' is an …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Mon, 29 Jul 2013 20:00:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2013-07-29:/2013/07/29/wrapping-a-tornado-iostream-with-ssl/</guid><category>coding</category><category>python</category><category>tornado</category><category>iostream</category><category>ssl</category><category>blackhole</category></item><item><title>haproxy stats</title><link>https://kura.gg/2013/07/19/haproxy-stats/</link><description>
&lt;p&gt;I recently wrote an article on &lt;a class="reference external" href="/2013/07/15/haproxy-nginx-and-spdy-with-ssl-termination-debian-7/"&gt;using haproxy, &lt;span class="caps"&gt;SSL&lt;/span&gt; and
&lt;span class="caps"&gt;SPDY&lt;/span&gt; with nginx backend servers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This article is a little extra on top of that to explain
how to enable statistics for haproxy so you can monitor
the backend statuses etc.&lt;/p&gt;
&lt;div class="section" id="example-stats-page"&gt;
&lt;h2&gt;Example stats page&lt;/h2&gt;
&lt;img alt="Moar stats!" src="/images/haproxy-stats.png"/&gt;
&lt;/div&gt;
&lt;div class="section" id="enabling-stats"&gt;
&lt;h2&gt;Enabling stats&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
listen stats :8000
    mode http
    stats enable
    stats hide-version
    stats realm haproxy\ stats
    stats uri /
    stats auth admin:admin
&lt;/pre&gt;
&lt;p&gt;Place the above content in the haproxy configuration
file (&lt;em&gt;/etc/haproxy/haproxy.cfg&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Be sure to replace &lt;em&gt;admin:admin&lt;/em&gt; with your a proper
username and password, username first, password
after the colon.&lt;/p&gt;
&lt;p&gt;Restart haproxy, and then browse to &lt;a class="reference external" href="https://yoursite.com:8000"&gt;https://yousite.com:8000&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Fri, 19 Jul 2013 13:00:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2013-07-19:/2013/07/19/haproxy-stats/</guid><category>tutorials</category><category>haproxy</category><category>stats</category></item><item><title>DJUGL June 2013 talk on blackhole and blackhole.io</title><link>https://kura.gg/2013/07/17/djugl-june-2013-talk-on-blackhole-and-blackhole-io/</link><description>&lt;p&gt;I have been a frequent audience member of &lt;a class="reference external" href="https://www.djugl.org/item/443153"&gt;&lt;span class="caps"&gt;DJUGL&lt;/span&gt;&lt;/a&gt;
for a few years now and spend most of the time asking questions,
playing devils advocate and generally being my annoying self.&lt;/p&gt;
&lt;p&gt;I have repeatedly said I would do a talk but never got round to it
until &lt;a class="reference external" href="https://twitter.com/JonWebJobs"&gt;Jon&lt;/a&gt; basically forced me
to get round to it.&lt;/p&gt;
&lt;p&gt;My talk was on &lt;a class="reference external" href="https://blackhole.io"&gt;blackhole/blackhole.io&lt;/a&gt; and
covered several topics including &lt;a class="reference external" href="https://pypy.org"&gt;PyPy&lt;/a&gt;,
&lt;a class="reference external" href="/simplemta/"&gt;SimpleMTA&lt;/a&gt; and moved on to talking
about spamming and starting work on my honey pot suite called
&lt;a class="reference external" href="https://nectar.blackhole.io"&gt;Nectar&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can find the slides on &lt;a class="reference external" href="https://speakerdeck.com/kura/djugl-june-2013"&gt;Speaker Deck&lt;/a&gt;,
sadly I ran out of time when creating them and although I was
promised time to finish them at work, I got busy. So I replaced
content with “Taylor Replacements(tm)”.&lt;/p&gt;
&lt;p&gt;The event, attendees and other speakers are listen on the &lt;a class="reference external" href="https://lanyrd.com/2013/djugl-june/"&gt;Lanyrd
event page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Several people took photos of the event, I don’t remember …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Wed, 17 Jul 2013 21:00:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2013-07-17:/2013/07/17/djugl-june-2013-talk-on-blackhole-and-blackhole-io/</guid><category>talks</category><category>python</category><category>pypy</category><category>blackhole</category><category>blackhole.io</category><category>mta</category><category>email</category><category>honeypot</category></item><item><title>haproxy, nginx and SPDY with SSL termination (Debian 7)</title><link>https://kura.gg/2013/07/15/haproxy-nginx-and-spdy-with-ssl-termination-debian-7/</link><description>
&lt;p&gt;&lt;a class="reference external" href="/2013/07/10/nginx-spdy-and-ngx-pagespeed/"&gt;I wrote an article last week&lt;/a&gt; explaining that I had changed my blog
and built my own nginx packages with &lt;a class="reference external" href="https://www.chromium.org/spdy"&gt;&lt;span class="caps"&gt;SPDY&lt;/span&gt;&lt;/a&gt; built in.&lt;/p&gt;
&lt;p&gt;I decided I would take things a little further and poke around with
haproxy some more. The initial plan was to compile the latest dev
source of haproxy with &lt;span class="caps"&gt;SSL&lt;/span&gt; termination enabled.&lt;/p&gt;
&lt;p&gt;In doing so I realised I would lose &lt;span class="caps"&gt;SPDY&lt;/span&gt; support, which upset me a
little. After some digging I found that the 1.5-dev branch of
haproxy supports npn and thus can handle &lt;span class="caps"&gt;SPDY&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;I tweaked my builds a little more and managed to get haproxy
running as an &lt;span class="caps"&gt;SSL&lt;/span&gt; terminating load balancer, with &lt;span class="caps"&gt;SPDY&lt;/span&gt; connections
being sent off to my nginx servers with &lt;span class="caps"&gt;SPDY&lt;/span&gt; enabled and all other
non-&lt;span class="caps"&gt;SPDY&lt;/span&gt; connections were passed on to an nginx virtual host with
&lt;span class="caps"&gt;SPDY&lt;/span&gt; disabled.&lt;/p&gt;
&lt;div class="section" id="requirements"&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;I have released my haproxy build as a debian file below …&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Mon, 15 Jul 2013 22:30:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2013-07-15:/2013/07/15/haproxy-nginx-and-spdy-with-ssl-termination-debian-7/</guid><category>tutorials</category><category>debian</category><category>ubuntu</category><category>haproxy</category><category>nginx</category><category>spdy</category><category>ssl</category><category>ssl termination</category></item><item><title>nginx, SPDY and ngx_pagespeed (Debian/Ubuntu)</title><link>https://kura.gg/2013/07/10/nginx-spdy-and-ngx-pagespeed/</link><description>
&lt;p&gt;I decided to rebuild syslog.tv as pure &lt;span class="caps"&gt;HTML&lt;/span&gt; using &lt;span class="caps"&gt;RST&lt;/span&gt; and
&lt;a class="reference external" href="https://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; and rebrand it as kura.gg.&lt;/p&gt;
&lt;p&gt;In doing so I decided I would go all out and use &lt;a class="reference external" href="https://www.chromium.org/spdy"&gt;&lt;span class="caps"&gt;SPDY&lt;/span&gt;&lt;/a&gt; and
&lt;a class="reference external" href="https://nginx.org/en/docs/http/ngx_http_spdy_module.html"&gt;ngx_pagespeed&lt;/a&gt; (&lt;a class="reference external" href="https://developers.google.com/speed/"&gt;mod_pagespeed&lt;/a&gt;) for fun to see exactly
what I could do.&lt;/p&gt;
&lt;p&gt;Sadly no version of nginx has been officially released with &lt;span class="caps"&gt;SPDY&lt;/span&gt;
or ngx_pagespeed enabled, you can compile nginx from source to
enable &lt;span class="caps"&gt;SPDY&lt;/span&gt; so I thought I would go ahead and do it, releasing
some Debian packages in the process.&lt;/p&gt;
&lt;p&gt;After compiling nginx from the source package available at the
&lt;a class="reference external" href="https://launchpad.net/~nginx"&gt;Ubuntu &lt;span class="caps"&gt;PPA&lt;/span&gt;&lt;/a&gt;, I decided I would go further and compile in ngx_pagespeed.&lt;/p&gt;
&lt;div class="section" id="installing"&gt;
&lt;h2&gt;Installing&lt;/h2&gt;
&lt;p&gt;I have released the 4 required debian packages below (please note
they are only available for amd64);&lt;/p&gt;
&lt;table class="docutils"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th class="head"&gt;&lt;span class="caps"&gt;FILE&lt;/span&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;span class="caps"&gt;GPG&lt;/span&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;span class="caps"&gt;MD5&lt;/span&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;span class="caps"&gt;SHA1&lt;/span&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="/files/nginx_1.4.1_all.deb"&gt;nginx_1.4.1_all.deb&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="/files/nginx_1.4.1_all.deb.asc"&gt;owGMl1NwLw…&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="/files/nginx_1.4.1_all.deb.md5"&gt;42f790a1f6…&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="/files/nginx_1.4.1_all.deb.sha1"&gt;f4495055e9…&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="/files/nginx-common_1.4.1_all.deb"&gt;nginx-common_1.4.1_all.deb&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="/files/nginx-common_1.4.1_all.deb.asc"&gt;owGMt1NwJU…&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="/files/nginx-common_1.4.1_all.deb.md5"&gt;ca4ec5688d…&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="/files/nginx-common_1.4.1_all.deb.sha1"&gt;633bfc2eaa …&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Wed, 10 Jul 2013 22:30:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2013-07-10:/2013/07/10/nginx-spdy-and-ngx-pagespeed/</guid><category>tutorials</category><category>debian</category><category>ubuntu</category><category>nginx</category><category>spdy</category><category>pagespeed</category><category>ngx_pagespeed</category><category>mod_pagespeed</category></item><item><title>Bash portforwarding with autocompletion</title><link>https://kura.gg/2013/03/12/bash-portforwarding-with-autocompletion/</link><description>
&lt;p&gt;I spend a &lt;span class="caps"&gt;LOT&lt;/span&gt; of time with tunnels open to multiple machines, connecting
directly to PostgreSQL, RabbitMQ and many other services all via &lt;span class="caps"&gt;SSH&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;I have written several helper functions and this is the final version
that I created in a small competition with &lt;a class="reference external" href="https://twitter.com/codeinthehole"&gt;@codeinthehole.&lt;/a&gt;&lt;/p&gt;
&lt;div class="gist"&gt;
    &lt;script src='https://gist.github.com/5065819.js'&gt;&lt;/script&gt;
&lt;/div&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;Simply add the contents to &lt;em&gt;~/.bashrc&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="usage"&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;Usage is pretty simply, just called portforward from the command line,
pressing &amp;lt;&lt;span class="caps"&gt;TAB&lt;/span&gt;&amp;gt; as you type in a server name from your ~/.ssh/config file
and the same with the port.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;portforward sy&amp;lt;TAB&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Will become:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;portforward syslog.tv
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And finally&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;portforward syslog.tv &lt;span class="m"&gt;15672&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Tue, 12 Mar 2013 18:00:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2013-03-12:/2013/03/12/bash-portforwarding-with-autocompletion/</guid><category>tutorials</category><category>autocompletion</category><category>bash</category><category>port forwarding</category></item><item><title>Unbanning an IP, multiple IPs or a block of IPs from DenyHost</title><link>https://kura.gg/2012/11/13/unbanning-an-ip-a-block-of-ips-or-a-block-of-ips-from-denyhost/</link><description>&lt;p&gt;I wrote this little Python program a while ago and now people are
starting to email me about it, asking for it to be part of the DenyHosts
Debian packages so I figured I’d write a quick article on it.&lt;/p&gt;
&lt;p&gt;If you’re like my developers, you’ll find yourself getting banned from
servers all the time and have to come speak to someone like me (your sys
engineer/admin), or maybe you are an admin and are sick of people
banning themselves and want and easy way to unban them.&lt;/p&gt;
&lt;p&gt;So give this a try:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/kura/denyhosts-unban"&gt;https://github.com/kura/denyhosts-unban&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;From the GitHub page you can download either the tarballs, zipballs or a
Debian .deb package. Install it using the instructions in the &lt;span class="caps"&gt;README&lt;/span&gt; and
you’re good to go.&lt;/p&gt;
&lt;div class="section" id="unban"&gt;
&lt;h2&gt;Unban&lt;/h2&gt;
&lt;p&gt;Unbanning is simple, you can either unban a single &lt;span class="caps"&gt;IP&lt;/span&gt; using:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo denyhosts-unban &lt;span class="m"&gt;10&lt;/span&gt;.0.0.1 …&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Tue, 13 Nov 2012 17:45:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2012-11-13:/2012/11/13/unbanning-an-ip-a-block-of-ips-or-a-block-of-ips-from-denyhost/</guid><category>tutorials</category><category>denyhosts</category><category>unban</category></item><item><title>Java 6 on Ubuntu 12.04 (including Tomcat 6)</title><link>https://kura.gg/2012/11/08/java-6-on-ubuntu-12-04-including-tomcat-6/</link><description>
&lt;p&gt;If like me you run in to issue when using OpenJDK, my issues come from
it’s memory problems when you’re allocating and using large amounts of
memory - mostly for Solr where we’re concerned but obviously I’d switch
for other high memory usage instances too.&lt;/p&gt;
&lt;p&gt;So without further ado, lets get the installation going.&lt;/p&gt;
&lt;p&gt;You’ll need Debian’s “add-apt-repository”, on servers this doesn’t
usually come by default so we’ll need to install it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install python-software-properties
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next we need to add Java’s &lt;span class="caps"&gt;PPA&lt;/span&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo add-apt-repository ppa:sun-java-community-team/sun-java6
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once this is done we’ll need to update our apt caches and install Java 6.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install sun-java6-jdk
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that this is installed we should get the Java version, remember it
for future.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;java -version
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You’ll get something like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;java version &lt;span class="s2"&gt;"1.6.0_20"&lt;/span&gt; OpenJDK Runtime Environment &lt;span class="o"&gt;(&lt;/span&gt;IcedTea6 &lt;span class="m"&gt;1 …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Thu, 08 Nov 2012 11:47:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2012-11-08:/2012/11/08/java-6-on-ubuntu-12-04-including-tomcat-6/</guid><category>tutorials</category></item><item><title>How to generate an /etc/shadow compatible password</title><link>https://kura.gg/2012/10/11/how-to-generate-an-etcshadow-compatible-password/</link><description>&lt;p&gt;You’ll need mkpasswd, on Debian 6 and Ubuntu 12.04 you can install this using:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install whois
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is pretty weird that it comes with the whois package though…&lt;/p&gt;
&lt;p&gt;And then run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkpasswd -m sha-512
&lt;/pre&gt;&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Thu, 11 Oct 2012 09:56:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2012-10-11:/2012/10/11/how-to-generate-an-etcshadow-compatible-password/</guid><category>tutorials</category><category>/etc/shadow</category><category>mkpasswd</category><category>password</category><category>sha-512</category><category>sha512</category></item><item><title>Send all email to a blackhole (never gets delivered), test delivery speed and much more using blackhole.io</title><link>https://kura.gg/2012/06/26/send-all-email-to-a-blackhole-never-gets-delivered-test-delivery-speed-and-much-more-using-blackhole-io/</link><description>
&lt;p&gt;I have built and released an open-source email server in the past for
testing send rates and speeds, this project was called SimpleMTA and is
available &lt;a class="reference external" href="https://syslog.tv/simplemta/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Recently I have rebuilt this project for an internal project at work
using the &lt;a class="reference external" href="https://www.tornadoweb.org/"&gt;Tornado framework&lt;/a&gt;. Sadly this project as a whole cannot be
released but a version of this code will be released in the near future.&lt;/p&gt;
&lt;p&gt;Until that is released I have launched a new service called
&lt;a class="reference external" href="https://blackhole.io"&gt;blackhole.io&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="what-is-blackhole-io"&gt;
&lt;h2&gt;What is blackhole.io?&lt;/h2&gt;
&lt;p&gt;blackhole.io is a completely open mail relay that forgets anything that
is sent to it, meaning there is no auth requirements and no storage of
email data within the service. Literally anyone can send anything to it
and have it never get delivered.&lt;/p&gt;
&lt;p&gt;You can even send commands out of order, meaning you can call the &lt;span class="caps"&gt;DATA&lt;/span&gt;
command without ever using &lt;span class="caps"&gt;HELO&lt;/span&gt;, &lt;span class="caps"&gt;MAIL&lt;/span&gt; &lt;span class="caps"&gt;FROM&lt;/span&gt; or &lt;span class="caps"&gt;RCPT&lt;/span&gt; &lt;span class="caps"&gt;TO …&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Tue, 26 Jun 2012 23:05:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2012-06-26:/2012/06/26/send-all-email-to-a-blackhole-never-gets-delivered-test-delivery-speed-and-much-more-using-blackhole-io/</guid><category>tutorials</category><category>blackhole</category><category>blackhole.io</category><category>email</category><category>mail</category></item><item><title>Mount Amazon S3 bucket locally on Debian 5 &amp; 6/Ubuntu 10.04</title><link>https://kura.gg/2012/03/03/mount-amazon-s3-bucket-locally/</link><description>
&lt;p&gt;I’ve recently been toying with my &lt;a class="reference external" href="https://rpi.syslog.tv/"&gt;Raspberry Pi mirror&lt;/a&gt; including
moving it out on to Amazon’s S3. I’ve written an article on &lt;a class="reference external" href="https://syslog.tv/2012/02/29/backup-a-linux-server-to-amazon-s3-on-debian-6ubuntu-10-04/"&gt;how to back
up to S3&lt;/a&gt;, but that isn’t enough when it comes to serving data
from S3.&lt;/p&gt;
&lt;p&gt;I needed the ability to &lt;span class="caps"&gt;RSYNC&lt;/span&gt; data from the official Raspberry Pi
servers on to mine and then in to S3 and for that I used &lt;a class="reference external" href="https://code.google.com/p/s3fs/"&gt;s3fs&lt;/a&gt; and
&lt;a class="reference external" href="https://fuse.sourceforge.net/"&gt;&lt;span class="caps"&gt;FUSE&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="id1"&gt;
&lt;h2&gt;&lt;span class="caps"&gt;FUSE&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;You can actually do this successfully without requiring &lt;span class="caps"&gt;FUSE&lt;/span&gt;, just by
installing the s3fs binary on to your system, but this only allows the
user who mounted to access the mounted bucket and also is not possible
via /etc/fstab.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;FUSE&lt;/span&gt; allows you to implement a filesystem within a userspace program,
thus allowing us to give other users access and auto-mount using /etc/fstab.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;Fuse&lt;/h3&gt;
&lt;p&gt;Installing &lt;span class="caps"&gt;FUSE&lt;/span&gt; is simple&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install fuse-utils
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="id3"&gt;
&lt;h3&gt;s3fs&lt;/h3&gt;
&lt;p&gt;We …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Sat, 03 Mar 2012 16:05:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2012-03-03:/2012/03/03/mount-amazon-s3-bucket-locally/</guid><category>tutorials</category><category>aws</category><category>fstab</category><category>fuse</category><category>mount</category><category>s3</category><category>s3fs</category></item><item><title>Visualised: 24 hours of SSH attacks against a single server</title><link>https://kura.gg/2012/03/02/visualised-24-hours-of-ssh-attacks-against-a-single-server/</link><description>&lt;p&gt;24 hours of &lt;span class="caps"&gt;SSH&lt;/span&gt; attacks against a single server, visualised on a world
map using Python.&lt;/p&gt;
&lt;p&gt;When a country stays lit up for more than 1 tick of the clock in the
left hand corner it means that multiple attacks are happening from
different &lt;span class="caps"&gt;IP&lt;/span&gt; addresses. An attacker is banned after;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;1 failed root login,&lt;/li&gt;
&lt;li&gt;3 failed user logins (including invalid users) and&lt;/li&gt;
&lt;li&gt;3 failed system logins.&lt;/li&gt;
&lt;/ul&gt;
&lt;div align="center" class="vimeo"&gt;&lt;iframe allowfullscreen="" frameborder="0" height="500" mozallowfullscreen="" src="https://player.vimeo.com/video/37818131" webkitallowfullscreen="" width="800"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;div class="section" id="direct-links"&gt;
&lt;h2&gt;Direct links&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://vimeo.com/37818131"&gt;Vimeo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=S_p0G2oLuDU"&gt;YouTube&lt;/a&gt; - older version of the video with yellow colouring instead of red.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Fri, 02 Mar 2012 18:36:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2012-03-02:/2012/03/02/visualised-24-hours-of-ssh-attacks-against-a-single-server/</guid><category>misc</category><category>bruteforce</category><category>ssh</category></item><item><title>Backup a Linux server to Amazon S3 on Debian 6/Ubuntu 10.04</title><link>https://kura.gg/2012/02/29/backup-a-linux-server-to-amazon-s3-on-debian-6ubuntu-10-04/</link><description>
&lt;p&gt;I have several servers powering syslog including it’s &lt;a class="reference external" href="https://rpi.syslog.tv/"&gt;Raspberry Pi&lt;/a&gt;
mirror, load balancer and email servers. All of my servers are hosted
using &lt;a class="reference external" href="https://www.linode.com/?r=8d58820f89940a1a68832c0cdd53109727cfa622"&gt;Linode&lt;/a&gt; in their London data centre and have Linode’s back-up
system doing both daily and weekly snapshots.&lt;/p&gt;
&lt;p&gt;For the app and database servers I do server-side backups storing each
website and it’s database in it’s own folder within /backup in case I
require a quick back-up to fix something, rather than the server has died.&lt;/p&gt;
&lt;p&gt;This is all well and good but I like having an off-site backup too and
for that I use &lt;a class="reference external" href="https://aws.amazon.com/s3/"&gt;S3&lt;/a&gt;…&lt;/p&gt;
&lt;div class="section" id="about-s3"&gt;
&lt;h2&gt;About S3&lt;/h2&gt;
&lt;p&gt;Amazon’s S3 is pretty cheap and very easy to use. Because only data is
going in you don’t pay a transfer fee and the cost of storage is very
affordable, you can see a &lt;a class="reference external" href="https://aws.amazon.com/s3/#pricing"&gt;pricing list here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To do the backup I use a …&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Wed, 29 Feb 2012 20:55:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2012-02-29:/2012/02/29/backup-a-linux-server-to-amazon-s3-on-debian-6ubuntu-10-04/</guid><category>tutorials</category><category>amazon</category><category>aws</category><category>backup</category><category>debian</category><category>s3</category><category>ubuntu</category></item><item><title>Automatic/Unattended updates on Debian 6 (Squeeze)</title><link>https://kura.gg/2012/01/28/automaticunattended-updates-on-debian-6-squeeze/</link><description>
&lt;p&gt;The unattended-upgrades package used on Debian is based on the one from
Ubuntu. It is generally pretty safe in my opinion but I only ever enable
it for security upgrades.&lt;/p&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt-get install unattended-upgrades apticron
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;unattended-upgrades&lt;/em&gt; handles the actual updates, &lt;em&gt;apticron&lt;/em&gt; is used for
emailing you of available updates - it is not required but I like it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="configuring-unattended-upgrades"&gt;
&lt;h2&gt;Configuring unattended-upgrades&lt;/h2&gt;
&lt;p&gt;Open up &lt;strong&gt;/etc/apt/apt.conf.d/50unattended-upgrades&lt;/strong&gt; and change it to
the content below.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
APT::Periodic::Enable "1";
APT::Periodic::Update-Package-Lists "1";
APT::Periodic::AutocleanInterval "7";
APT::Periodic::Unattended-Upgrade "1";
Unattended-Upgrade::Mail "**YOUR_EMAIL_HERE**";

// Automatically upgrade packages from these (origin, archive) pairs
Unattended-Upgrade::Allowed-Origins {
    "${distro_id} stable";
    "${distro_id} ${distro_codename}-security";
};

// Automatically reboot *WITHOUT CONFIRMATION* if a
 // the file /var/run/reboot-required is found after the upgrade
 Unattended-Upgrade::Automatic-Reboot "false";
&lt;/pre&gt;
&lt;p&gt;So lets explain the above. As you can see we enable periodic updates,
enable update package lists (triggers …&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Sat, 28 Jan 2012 17:41:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2012-01-28:/2012/01/28/automaticunattended-updates-on-debian-6-squeeze/</guid><category>tutorials</category><category>automatic update</category><category>debian</category><category>unattended-upgrades</category><category>update</category></item><item><title>Running your own PGP keyserver with SKS on Debian 6/Ubuntu 10.04</title><link>https://kura.gg/2011/12/17/running-your-own-pgp-keyserver-with-sks-on-debian-6ubuntu-10-04/</link><description>
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;To install we need to run the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install -y sks
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we build the key database:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo sks build
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And change the permissions for the sks user:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo chown -R debian-sks:debian-sks /var/lib/sks/DB
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next we need to make sks start from init, open up &lt;strong&gt;/etc/default/sks&lt;/strong&gt;
in your favourite editor and &lt;strong&gt;*initstart*&lt;/strong&gt; to look like below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;initstart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;yes
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can start the service with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /etc/init.d/sks start
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Your keyserver will now be up and running on port 11371.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="web-interface"&gt;
&lt;h2&gt;Web interface&lt;/h2&gt;
&lt;p&gt;We’ll need to create a web folder within sks with the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo mkdir -p /var/lib/sks/www/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Change it’s permissions so the sks user can access it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo chown -R debian-sks:debian-sks /var/lib/sks/www
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And finally we need create a single &lt;span class="caps"&gt;HTML&lt;/span&gt; file for the interface, I have
provided that …&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Sat, 17 Dec 2011 15:58:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2011-12-17:/2011/12/17/running-your-own-pgp-keyserver-with-sks-on-debian-6ubuntu-10-04/</guid><category>tutorials</category><category>debian</category><category>keyserver</category><category>pgp</category><category>sks</category><category>ubuntu</category></item><item><title>Host git repositories with git, gitosis and gitweb on Debian 6/Ubuntu 10.04</title><link>https://kura.gg/2011/12/17/host-git-repositories-with-git-gitosis-and-gitweb-on-debian-6ubuntu-10-04/</link><description>
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;First up we’ll need to install git and some Python tools to get Gitosis installed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install -y git-core gitweb python-setuptools
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next we have to clone gitosis from it’s git repository and install it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /tmp
git clone git://eagain.net/gitosis.git
&lt;span class="nb"&gt;cd&lt;/span&gt; gitosis
sudo python setup.py install
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="adding-your-git-user"&gt;
&lt;h2&gt;Adding your git user&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo adduser --system --shell /bin/sh --gecos &lt;span class="s1"&gt;'git version control'&lt;/span&gt; --group --disabled-password --home /home/git git
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above command creates a new system user with &lt;strong&gt;/bin/sh&lt;/strong&gt; as it’s
shell with &lt;strong&gt;no password&lt;/strong&gt; and a homedir of &lt;strong&gt;/home/git/&lt;/strong&gt; and also
creates a group with the same name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="initialising-gitosis"&gt;
&lt;h2&gt;Initialising gitosis&lt;/h2&gt;
&lt;p&gt;You’ll need an &lt;span class="caps"&gt;SSH&lt;/span&gt; key for this, if you have one simply copy the
contents of it to your new git server, if you do not have one then you
can generate one on your machine using&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh-keygen
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then …&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Sat, 17 Dec 2011 15:40:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2011-12-17:/2011/12/17/host-git-repositories-with-git-gitosis-and-gitweb-on-debian-6ubuntu-10-04/</guid><category>tutorials</category><category>debian</category><category>git</category><category>gitosis</category><category>gitweb</category><category>ubuntu</category></item><item><title>Rebooting on OOM</title><link>https://kura.gg/2011/10/25/rebooting-on-oom/</link><description>
&lt;p&gt;&lt;strong&gt;*I would generally not advise using this unless you have skill at
debugging why &lt;span class="caps"&gt;OOM&lt;/span&gt; has spawned and also debugging kernel panics after
they happen, from logs.*&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It is possible to configure your kernel to panic when &lt;span class="caps"&gt;OOM&lt;/span&gt; is spawned,
which in itself is not useful but, coupled with a kernel option for
auto-rebooting a system when the kernel panics it can be a very useful tool.&lt;/p&gt;
&lt;p&gt;Think before implementing this and use at your own risk, I take zero
responsibility for you using this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo sysctl vm.panic_on_oom&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
sudo sysctl kernel.panic&lt;span class="o"&gt;=&lt;/span&gt;X &lt;span class="c1"&gt;# X is the amount of seconds to wait before rebooting&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;*&lt;span class="caps"&gt;DO&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt; &lt;span class="caps"&gt;FORGET&lt;/span&gt; &lt;span class="caps"&gt;TO&lt;/span&gt; &lt;span class="caps"&gt;CHANGE&lt;/span&gt; X*&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This will inject the changes in to a system that is currently running
but will be forgotten on reboot so use the lines below to save permanently.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"vm.panic_on_oom=1"&lt;/span&gt; &amp;gt;&amp;gt; /etc/sysctl.conf …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Tue, 25 Oct 2011 10:26:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2011-10-25:/2011/10/25/rebooting-on-oom/</guid><category>tutorials</category><category>kernel panic</category><category>oom</category><category>reboot</category></item><item><title>Nagios3 + MK Livestatus + xinetd on Debian 6/Ubuntu</title><link>https://kura.gg/2011/10/13/nagios3-mk-livestatus-xinetd/</link><description>
&lt;div class="section" id="preparation"&gt;
&lt;h2&gt;Preparation&lt;/h2&gt;
&lt;p&gt;First we need to make sure we have all the stuff we need to compile mk
livestatus and run it&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install make build-essential xinetd ucspi-unix
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="mk-livestatus"&gt;
&lt;h2&gt;&lt;span class="caps"&gt;MK&lt;/span&gt; Livestatus&lt;/h2&gt;
&lt;p&gt;Grab the mk livestatus source from &lt;a class="reference external" href="https://mathias-kettner.de/check_mk_download.html"&gt;here&lt;/a&gt;, currently it’s version
1.1.10p3 but update the commands below to match your version.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget https://mathias-kettner.de/download/mk-livestatus-1.1.10p3.tar.gz
tar xvzf mk-livestatus-1.1.10p3.tar.gz
&lt;span class="nb"&gt;cd&lt;/span&gt; mk-livestatus-1.1.10p3
./configure
make
sudo make install
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="xinetd"&gt;
&lt;h2&gt;Xinetd&lt;/h2&gt;
&lt;p&gt;Now that it’s compiled we need to write a xinetd config for it, create a
new file called &lt;strong&gt;/etc/xinetd.d/livestatus&lt;/strong&gt; and put the following in it&lt;/p&gt;
&lt;pre class="literal-block"&gt;
service livestatus {
    type = UNLISTED
    port = 6557
    socket_type = stream
    protocol = tcp
    wait = no
    cps = 100 3
    instances = 500
    per_source = 250
    flags = NODELAY
    user = nagios
    server = /usr/bin/unixcat
    server_args = /var/lib/nagios3/rw/live
    only_from = 127.0.0 …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Thu, 13 Oct 2011 23:17:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2011-10-13:/2011/10/13/nagios3-mk-livestatus-xinetd/</guid><category>tutorials</category><category>mk livestatus</category><category>nagios</category><category>nagios 3</category><category>nagios broker</category><category>xinetd</category></item><item><title>nginx config for reverse proxying Wordpress &amp; WP Super Cache and keeping the load off Apache2</title><link>https://kura.gg/2011/09/30/nginx-config-for-reverse-proxying-wordpress-wp-super-cache-and-keeping-the-load-off-apache2/</link><description>
&lt;div class="section" id="the-point"&gt;
&lt;h2&gt;The point&lt;/h2&gt;
&lt;p&gt;The whole point of this is to get as much load off of Apache as possible
to keep the server running nice and smoothly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="configuration"&gt;
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;The configuration below will mean that nginx will serve basically everything;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;static files&lt;/li&gt;
&lt;li&gt;uploaded files and&lt;/li&gt;
&lt;li&gt;cached content&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;simply replace the &lt;strong&gt;&lt;span class="caps"&gt;VARIABLES&lt;/span&gt;&lt;/strong&gt; below and everything should be good to
go, if copy-pasting from below isn’t working properly you can download a
full copy from &lt;a class="reference external" href="/files/2011/09/server.txt"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;**DOMAIN_HERE**&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;access_log&lt;/span&gt; &lt;span class="s"&gt;/var/log/nginx/access.**DOMAIN_HERE**.log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kn"&gt;gzip&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;gzip_disable&lt;/span&gt; &lt;span class="s"&gt;msie6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# disable gzip for IE6&lt;/span&gt;
  &lt;span class="kn"&gt;gzip_static&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;gzip_comp_level&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# highest level of compression&lt;/span&gt;
  &lt;span class="kn"&gt;gzip_proxied&lt;/span&gt; &lt;span class="s"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;gzip_types&lt;/span&gt; &lt;span class="s"&gt;text/plain&lt;/span&gt; &lt;span class="s"&gt;text/css&lt;/span&gt; &lt;span class="s"&gt;application/x-javascript&lt;/span&gt; &lt;span class="s"&gt;text/xml&lt;/span&gt; &lt;span class="s"&gt;application/xml&lt;/span&gt; &lt;span class="s"&gt;application/xml+rss&lt;/span&gt; &lt;span class="s"&gt;text/javascript&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kn"&gt;proxy_redirect&lt;/span&gt; &lt;span class="no"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;Host&lt;/span&gt; &lt;span class="nv"&gt;$host&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;X-Real-IP&lt;/span&gt; &lt;span class="nv"&gt;$remote_addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;X-Forwarded-For&lt;/span&gt; &lt;span class="nv"&gt;$proxy_add_x …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Fri, 30 Sep 2011 23:21:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2011-09-30:/2011/09/30/nginx-config-for-reverse-proxying-wordpress-wp-super-cache-and-keeping-the-load-off-apache2/</guid><category>tutorials</category><category>apache2</category><category>nginx</category><category>wordpress</category><category>wp-super-cache</category></item><item><title>Load balancing HTTP/HTTPS with Pound on Debian 6/Ubuntu</title><link>https://kura.gg/2011/09/29/load-balancing-httphttps-with-pound-on-debian-6ubuntu/</link><description>
&lt;p&gt;Pound is a great little load balancer, it’s fast, opensource and
supports &lt;span class="caps"&gt;SSL&lt;/span&gt; termination, which is great!&lt;/p&gt;
&lt;div class="section" id="install"&gt;
&lt;h2&gt;Install&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install pound
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="configuration"&gt;
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;The default configuration should be pretty good for most purposes, but
feel free to tweak as you require.&lt;/p&gt;
&lt;div class="section" id="http"&gt;
&lt;h3&gt;&lt;span class="caps"&gt;HTTP&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;We’ll first look at load balancing &lt;span class="caps"&gt;HTTP&lt;/span&gt;, in case you don’t want or need
&lt;span class="caps"&gt;HTTPS&lt;/span&gt; load balancing.&lt;/p&gt;
&lt;p&gt;We’ll need delete all the content within &lt;em&gt;ListenHTTP&lt;/em&gt; block, once done
it should look like this&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ListenHTTP
End
&lt;/pre&gt;
&lt;p&gt;Now we add an address and port to listen on and finally a line to remove
an &lt;span class="caps"&gt;HTTP&lt;/span&gt; header&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ListenHTTP
    Address 0.0.0.0 # all interfaces
    Port 80
    HeadRemove "X-Forwarded-For"
End
&lt;/pre&gt;
&lt;p&gt;This is a basic configuration, for each backend we want to load balance
we’ll need to add a service within that listener.&lt;/p&gt;
&lt;p&gt;You’ll notice we’re removing incoming headers called &lt;em&gt;X-Forwarded-For&lt;/em&gt;,
this is to make …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Thu, 29 Sep 2011 23:15:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2011-09-29:/2011/09/29/load-balancing-httphttps-with-pound-on-debian-6ubuntu/</guid><category>tutorials</category><category>http</category><category>https</category><category>load</category><category>load balancing</category><category>pound</category><category>ssl</category><category>ssl offloading</category><category>ssl termination</category></item><item><title>Postfix spam protection with greylisting using Postgrey on Debian 6/Ubuntu</title><link>https://kura.gg/2011/09/24/postfix-spam-protection-with-greylisting-using-postgrey-on-debian-6ubuntu/</link><description>
&lt;p&gt;A simple yet effective method for protecting your mail server from spam
is to use greylisting. In simple terms, when an email is received the
server will temporarily reject it with a 450 response code claiming that
the server is busy, the sending server should then attempt to try to
deliver at a later point in time, if enough time has passed the
recipient server will then accept the incoming mail and whitelist the
send address for a period of time.&lt;/p&gt;
&lt;p&gt;This is effective because most spam servers are configured not to retry
the send whereas real mail servers generally will retry. This sadly does
not protect against spam coming from comprised mail servers or accounts
like on Hotmail.com.&lt;/p&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install postgrey
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="configuring-postgrey"&gt;
&lt;h2&gt;Configuring Postgrey&lt;/h2&gt;
&lt;p&gt;By default Postgrey runs on &lt;em&gt;127.0.0.1:60000&lt;/em&gt;, which is the local
loopback interface so it is not exposed to the …&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Sat, 24 Sep 2011 21:29:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2011-09-24:/2011/09/24/postfix-spam-protection-with-greylisting-using-postgrey-on-debian-6ubuntu/</guid><category>tutorials</category><category>debian</category><category>email</category><category>greylist</category><category>mail</category><category>postfix</category><category>postgrey</category><category>spam</category><category>ubuntu</category></item><item><title>Postfix spam protection with blacklists</title><link>https://kura.gg/2011/09/24/postfix-spam-protection-with-blacklists/</link><description>&lt;p&gt;This really should be quite a quick and simple post.&lt;/p&gt;
&lt;p&gt;I use several tools to protect my mail servers from spam, the most
effective of these I’ve found is using external lists in conjunction
with &lt;strong&gt;reject_rbl_client&lt;/strong&gt; and &lt;strong&gt;reject_rhsbl_client&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;+======================+======================================================================================================+
| Service              | description                                                                                          |
+======================+======================================================================================================+
| zen.spamhaus.org     | A single lookup for querying the &lt;span class="caps"&gt;SBL&lt;/span&gt;, &lt;span class="caps"&gt;XBL&lt;/span&gt; and &lt;span class="caps"&gt;PBL&lt;/span&gt; databases.                                         |
|                      |  - &lt;span class="caps"&gt;SBL&lt;/span&gt; - Verified sources of spam, including spammers and their support services                     |
|                      |  - &lt;span class="caps"&gt;XBL&lt;/span&gt; - Illegal third-party exploits (e.g. open proxies and Trojan Horses)                          |
|                      |  - &lt;span class="caps"&gt;PBL&lt;/span&gt; - Static, dial-up &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; &lt;span class="caps"&gt;DHCP&lt;/span&gt; &lt;span class="caps"&gt;IP&lt;/span&gt; address space that is not meant to be initiating &lt;span class="caps"&gt;SMTP&lt;/span&gt; connections |
+———————————+———————————————————————————————————————————————————+
| dnsbl.sorbs.net      | Unsolicited bulk/commercial email senders                                                            |
+———————————+———————————————————————————————————————————————————+
| spam.dnsbl.sorbs.net | Hosts that have allegedly sent spam to the admins of &lt;span class="caps"&gt;SORBS&lt;/span&gt; at any time                               |
+———————————+———————————————————————————————————————————————————+
| b1.spamcop.net       | &lt;span class="caps"&gt;IP&lt;/span&gt; addresses which have been used to transmit reported email to SpamCop users                        |
+———————————+———————————————————————————————————————————————————+
| rhsbl.ahbl.org       | Domains sending spam, domains owned by spammers, comment …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Sat, 24 Sep 2011 21:05:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2011-09-24:/2011/09/24/postfix-spam-protection-with-blacklists/</guid><category>tutorials</category><category>blackhole</category><category>blacklist</category><category>email</category><category>mail</category><category>postfix</category><category>spam</category></item><item><title>SpamAssassin + Razor + Pyzor on Debian 6/Ubuntu</title><link>https://kura.gg/2011/09/22/spamassassin-razor-pyzor/</link><description>
&lt;p&gt;This is part 4 of my series on configuring a mail server, please see
&lt;a class="reference external" href="/2011/09/15/postfix-dovecot-imapimaps-sasl-maildir/"&gt;part one&lt;/a&gt;, &lt;a class="reference external" href="/2011/09/16/postfix-spamassassin-clamav-procmail/"&gt;part two&lt;/a&gt; and &lt;a class="reference external" href="/2011/09/17/postfix-dk-dkim-spf/"&gt;part three&lt;/a&gt; if you’re not familiar with them.&lt;/p&gt;
&lt;p&gt;The content of this article was written to work with the previous three
articles but should work on any SpamAssassin set-up.&lt;/p&gt;
&lt;div class="section" id="razor"&gt;
&lt;h2&gt;Razor&lt;/h2&gt;
&lt;p&gt;First off we need to install Razor.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install razor
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we need to run three commands to register and configure Razor.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo razor-admin -home&lt;span class="o"&gt;=&lt;/span&gt;/etc/spamassassin/.razor -register
sudo razor-admin -home&lt;span class="o"&gt;=&lt;/span&gt;/etc/spamassassin/.razor -create
sudo razor-admin -home&lt;span class="o"&gt;=&lt;/span&gt;/etc/spamassassin/.razor -discover
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These 3 commands should be pretty self explanatory, they register Razor,
create it’s configuration and discover the Razor servers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pyzor"&gt;
&lt;h2&gt;Pyzor&lt;/h2&gt;
&lt;p&gt;Now we’ll install Pyzor.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install pyzor
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we also need to tell Pyzor to discover it’s servers.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pyzor --homedir /etc/mail/spamassassin discover
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="spamassassin"&gt;
&lt;h2&gt;SpamAssassin&lt;/h2&gt;
&lt;p&gt;Add the following lines to the end …&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Thu, 22 Sep 2011 19:17:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2011-09-22:/2011/09/22/spamassassin-razor-pyzor/</guid><category>tutorials</category><category>email</category><category>mail</category><category>postfix</category><category>pyzor</category><category>razor</category><category>spam</category><category>spamassassin</category></item><item><title>Debian/Ubuntu upgrade security packages only - a better way to do it</title><link>https://kura.gg/2011/09/21/debianubuntu-upgrade-security-packages-only-a-better-way-to-do-it/</link><description>&lt;p&gt;&lt;strong&gt;I have created a scripts that handle these tasks for you, available `here`_.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First thing we need to do is create an sources list specifically for security.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo grep &lt;span class="s2"&gt;"-security"&lt;/span&gt; /etc/apt/sources.list &lt;span class="p"&gt;|&lt;/span&gt; sudo grep -v &lt;span class="s2"&gt;"#"&lt;/span&gt; &amp;gt; /etc/apt/security.sources.list
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that this is done we can simply continue to use the command below to
trigger security-only upgrades&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get upgrade -o Dir::Etc::SourceList&lt;span class="o"&gt;=&lt;/span&gt;/etc/apt/security.sources.list
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="note"&gt;
&lt;h2&gt;Note&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;This will work until you upgrade your distro (e.g. 10.04 -&amp;gt; 12.04), at
which point you will need to re-run the first command to regenerate the
security.sources.list file.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Wed, 21 Sep 2011 13:21:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2011-09-21:/2011/09/21/debianubuntu-upgrade-security-packages-only-a-better-way-to-do-it/</guid><category>tutorials</category><category>apt</category><category>debian</category><category>security</category><category>ubuntu</category><category>upgrades</category></item><item><title>Postfix + DK (DomainKeys) + DKIM + SPF on Debian 6/Ubuntu</title><link>https://kura.gg/2011/09/17/postfix-dk-dkim-spf/</link><description>
&lt;p&gt;This is part 3 of my guide to getting a mail server configured with all
the sexy bits to improve deliverability, spam and virus protection.&lt;/p&gt;
&lt;p&gt;You can view &lt;a class="reference external" href="/2011/09/15/postfix-dovecot-imapimaps-sasl-maildir/"&gt;part 1 here&lt;/a&gt; and &lt;a class="reference external" href="/2011/09/16/postfix-spamassassin-clamav-procmail/"&gt;part 2 here&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="the-key-pair"&gt;
&lt;h2&gt;The key pair&lt;/h2&gt;
&lt;p&gt;We need to create a key pair to sign emails with:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. code-block:: bash
&lt;/pre&gt;
&lt;blockquote&gt;
openssl genrsa -out private.key 1024
openssl rsa -in private.key -out public.key -pubout -outform &lt;span class="caps"&gt;PEM&lt;/span&gt;
sudo mkdir /etc/dk/
sudo cp private.key /etc/dk/dk.key&lt;/blockquote&gt;
&lt;p&gt;Now we can move on to &lt;span class="caps"&gt;DK&lt;/span&gt; and &lt;span class="caps"&gt;DKIM&lt;/span&gt; signing, make sure you keep the public
key for later.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dkim"&gt;
&lt;h2&gt;&lt;span class="caps"&gt;DKIM&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;First we’ll need to install an application to sign our emails.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install dkim-filter
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once installed we need to configure it, open up
&lt;strong&gt;/etc/default/dkim-filter&lt;/strong&gt;, modify the file to look like below
replacing &amp;lt;&lt;span class="caps"&gt;DOMAIN&lt;/span&gt;&amp;gt; with the domain you want to sign email from.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;DAEMON_OPTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"-l -o …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Sat, 17 Sep 2011 18:18:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2011-09-17:/2011/09/17/postfix-dk-dkim-spf/</guid><category>tutorials</category><category>debian</category><category>dk</category><category>dkim</category><category>domainkeys</category><category>email</category><category>mail</category><category>postfix</category><category>spf</category><category>ubuntu</category></item><item><title>Postfix + SpamAssassin + ClamAV + Procmail on Debian 6/Ubuntu</title><link>https://kura.gg/2011/09/16/postfix-spamassassin-clamav-procmail/</link><description>
&lt;p&gt;This is part 2 of my series on mail servers on Debian 6/Ubuntu 10.04, it
should work on other versions of each though. &lt;a class="reference external" href="/2011/09/15/postfix-dovecot-imapimaps-sasl-maildir/"&gt;Part 1 is available here&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="spamassassin"&gt;
&lt;h2&gt;SpamAssassin&lt;/h2&gt;
&lt;p&gt;First off we’ll get SpamAssassin installed and configured.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install spamassassin
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We’ll be configuring SpamAssassin as a daemon that Postfix interfaces
with using &lt;strong&gt;spamc&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;SpamAssassin on Debian and Ubuntu runs as root which is &lt;span class="caps"&gt;NOT&lt;/span&gt; a good thing
so we’ll need to make some changes.&lt;/p&gt;
&lt;p&gt;We’ll add a group called &lt;strong&gt;spamd&lt;/strong&gt; with &lt;span class="caps"&gt;GID&lt;/span&gt;**5001**.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo groupadd -g &lt;span class="m"&gt;5001&lt;/span&gt; spamd
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next we add a user spamd with &lt;span class="caps"&gt;UID&lt;/span&gt; &lt;strong&gt;5001&lt;/strong&gt; and add it to the spamd
group, as well as set it’s home directory as &lt;strong&gt;/var/lib/spamassassin&lt;/strong&gt;
and make sure it has no shell access or &lt;span class="caps"&gt;SSH&lt;/span&gt; access.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo useradd -u &lt;span class="m"&gt;5001&lt;/span&gt; -g spamd -s /usr/sbin/nologin -d /var/lib/spamassassin spamd
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now …&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Fri, 16 Sep 2011 21:28:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2011-09-16:/2011/09/16/postfix-spamassassin-clamav-procmail/</guid><category>tutorials</category><category>clamav</category><category>clamsmtp</category><category>debian</category><category>email</category><category>mail</category><category>postfix</category><category>procmail</category><category>spamassassin</category><category>ubuntu</category></item><item><title>Postfix + Dovecot (IMAP/IMAPS) + SASL + Maildir on Debian 6/Ubuntu</title><link>https://kura.gg/2011/09/15/postfix-dovecot-imapimaps-sasl-maildir/</link><description>
&lt;p&gt;This guide is part 1 of what I plan will be a couple of guides that take
you through installing a base mail system, SpamAssassin, &lt;span class="caps"&gt;DKIM&lt;/span&gt; and much
more. Stay tuned.&lt;/p&gt;
&lt;p&gt;This guide was written for Debian 6 but should be the same or similar
for Debian 5 and Ubuntu 10.04 and above.&lt;/p&gt;
&lt;div class="section" id="the-installation"&gt;
&lt;h2&gt;The installation&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install dovecot-imapd postfix sasl2-bin libsasl2-2 libsasl2-modules
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Choose “Internet site” when prompted and enter the fully qualified name
of your server.&lt;/p&gt;
&lt;p&gt;Once all this is done installing we’ll need to make some changes, first
off will be Postfix.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="postfix"&gt;
&lt;h2&gt;Postfix&lt;/h2&gt;
&lt;p&gt;Open up &lt;strong&gt;/etc/postfix/main.cf&lt;/strong&gt; and add the following to the end of the file&lt;/p&gt;
&lt;pre class="literal-block"&gt;
home_mailbox = Maildir/
smtpd_sasl_auth_enable = yes
smtpd_sasl_security_options = noanonymous
smtpd_sasl_local_domain = $myhostname
broken_sasl_auth_clients = yes

smtpd_sender_restrictions = permit_sasl_authenticated,
    permit_mynetworks,

smtpd_recipient_restrictions = permit_mynetworks,
    permit …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Thu, 15 Sep 2011 23:04:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2011-09-15:/2011/09/15/postfix-dovecot-imapimaps-sasl-maildir/</guid><category>tutorials</category><category>debian</category><category>dovecot</category><category>email</category><category>imap</category><category>imaps</category><category>mail</category><category>maildir</category><category>postfix</category><category>sasl</category><category>ubuntu</category></item><item><title>Installing kernel headers for current kernel version with ease on Debian/Ubuntu</title><link>https://kura.gg/2011/09/15/installing-kernel-headers-for-current-kernel-version-with-ease-on-debianubuntu/</link><description>&lt;p&gt;This is a simple one but I found out that there are people out there
that don’t know about it, so here we go.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install linux-headers-&lt;span class="k"&gt;$(&lt;/span&gt;uname -r&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will install kernel headers for your current active kernel on Debian/Ubuntu.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Thu, 15 Sep 2011 13:30:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2011-09-15:/2011/09/15/installing-kernel-headers-for-current-kernel-version-with-ease-on-debianubuntu/</guid><category>tutorials</category><category>apt</category><category>apt-get</category><category>debian</category><category>headers</category><category>kernel</category><category>ubuntu</category></item><item><title>nginx log real IP from Pound</title><link>https://kura.gg/2011/08/10/nginx-log-real-ip-from-pound/</link><description>&lt;p&gt;Recently I started using Pound as a load balancer to a cluster of nginx
servers and found my access logs were filled with the &lt;span class="caps"&gt;IP&lt;/span&gt; address of the
load balancer. I did some digging and found the correct way to “fix” this.&lt;/p&gt;
&lt;p&gt;First thing you need to do is make sure you remove X-Forwarded-For from Pound&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ListenHTTP
    # ... snip ...
    # ... snip ...
    HeadRemove "X-Forwarded-For"
End
&lt;/pre&gt;
&lt;p&gt;Once this is done, reload Pound.&lt;/p&gt;
&lt;p&gt;Next you need nginx compiled with realip module -
&lt;a class="reference external" href="https://wiki.nginx.org/NginxHttpRealIpModule"&gt;https://wiki.nginx.org/NginxHttpRealIpModule&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;On Ubuntu/Debian servers this module comes by default, otherwise you may
have to compile it in yourself using the following option:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;--with-http_realip_module
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once this is all done modify your nginx vhosts and add the following 2 lines&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;set_real_ip_from&lt;/span&gt; &lt;span class="s"&gt;[IP]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;real_ip_header&lt;/span&gt; &lt;span class="s"&gt;X-Forwarded-For&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where [&lt;span class="caps"&gt;IP&lt;/span&gt;] is the &lt;span class="caps"&gt;IP&lt;/span&gt; address of your load balancer.&lt;/p&gt;
&lt;p&gt;To configure this to work with Apache you need the …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Wed, 10 Aug 2011 12:34:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2011-08-10:/2011/08/10/nginx-log-real-ip-from-pound/</guid><category>tutorials</category><category>apache</category><category>load balancer</category><category>nginx</category><category>pound</category><category>reaip</category><category>x-forwarded-for</category></item><item><title>Shared VMDKs on ESX vSphere</title><link>https://kura.gg/2011/07/09/shared-vmdks-on-esx-vsphere/</link><description>&lt;p&gt;I’d first like to point out that although the VMDKs are shared between
hosts using a shared &lt;span class="caps"&gt;SCSI&lt;/span&gt; &lt;span class="caps"&gt;BUS&lt;/span&gt; they are not synched, meaning that if you
write to the mounted point on any machine it will not display on other
machines with the same mount point until you remount the drive.
Annoying, but understandable.&lt;/p&gt;
&lt;p&gt;To business.&lt;/p&gt;
&lt;p&gt;First off all machines that you want to share this &lt;span class="caps"&gt;VMDK&lt;/span&gt; with will need
to be &lt;span class="caps"&gt;OFFLINE&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Next up we create the &lt;span class="caps"&gt;VMDK&lt;/span&gt;, I find it easiest to do this by adding
hardware to an already existing machine, I’m going to use one that I
want the &lt;span class="caps"&gt;VMDK&lt;/span&gt; shared with to make it even simpler.&lt;/p&gt;
&lt;img alt="Create a new disk" src="/images/shared-vmdks-on-esx-vsphere1.png"/&gt;
&lt;p&gt;You will need to enable clustering features as shown below, this means
you cannot use thin provisioning.&lt;/p&gt;
&lt;img alt="Choose disk size" src="/images/shared-vmdks-on-esx-vsphere2.png"/&gt;
&lt;p&gt;You will need to add the &lt;span class="caps"&gt;VMDK&lt;/span&gt; to a new &lt;span class="caps"&gt;SCSI&lt;/span&gt; &lt;span class="caps"&gt;BUS&lt;/span&gt;, this will usually begin
with 1: or …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Sat, 09 Jul 2011 02:07:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2011-07-09:/2011/07/09/shared-vmdks-on-esx-vsphere/</guid><category>tutorials</category><category>esx</category><category>iscsi</category><category>scsi</category><category>shared vmdk</category><category>vmdk</category><category>vmware</category></item><item><title>Logging Google Analytics cookies with nginx</title><link>https://kura.gg/2011/06/05/logging-google-analytics-cookies-with-nginx/</link><description>&lt;p&gt;I was recently tasked with adding Google tracking cookies to our nginx
logging for a couple of sites. It was so it could be pushed through a
log processor.&lt;/p&gt;
&lt;p&gt;It turned out too be a little trickier than it would have been with
Apache, but the process itself is still quite simple.&lt;/p&gt;
&lt;p&gt;Open up the server definition you wish to add it to and add a custom log
format like below&lt;/p&gt;
&lt;pre class="literal-block"&gt;
log_format g-a '$remote_addr - $remote_user [$time_local] ' '"$request" $status $body_bytes_sent ' '"$http_referer" "$http_user_agent" ' '"__utma=$cookie___utma;__utmb=$cookie___utmb;__utmc=$cookie___utmc;__utmv=$cookie___utmv;__utmz=$cookie_umtz"';
&lt;/pre&gt;
&lt;p&gt;This log format can then be added to your access log like below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;access_log&lt;/span&gt; &lt;span class="s"&gt;/var/log/nginx/access.example.com.log&lt;/span&gt; &lt;span class="s"&gt;g-a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Reload nginx&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /etc/init.d/nginx reload
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If all goes well, you should see Google Analytics appearing in your
access logs …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Sun, 05 Jun 2011 20:41:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2011-06-05:/2011/06/05/logging-google-analytics-cookies-with-nginx/</guid><category>tutorials</category><category>google analytics</category><category>logging</category><category>nginx</category></item><item><title>SSH Tunnelling</title><link>https://kura.gg/2011/02/14/ssh-tunnelling/</link><description>&lt;p&gt;Quite a simple one:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh -f USER@INTERMEDIATE_DEVICE -L LOCAL_PORT:DESTINATION_DEVICE:DESTINATION_PORT -N
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;-f&lt;/strong&gt; tells ssh to go to background
&lt;strong&gt;-L&lt;/strong&gt; binds a local port to a remote device and port
&lt;strong&gt;-N&lt;/strong&gt; tells ssh not to execute any commands&lt;/p&gt;
&lt;p&gt;So use this to tunnel from local port 8000 in to a remote machine on
port 22 you’d use&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh -f user@server.test.com -L &lt;span class="m"&gt;8000&lt;/span&gt;:server.destination.com:22 -N
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once the tunnel is open you can use the following to ssh or scp data around&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh localhost -p &lt;span class="m"&gt;8000&lt;/span&gt;
scp -P &lt;span class="m"&gt;8000&lt;/span&gt; /path/to/local/file user@localhost:~
scp -P &lt;span class="m"&gt;8000&lt;/span&gt; user@localhost:/path/to/remote/file .
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I use ssh tunnels all the time to remote access and use one of our Solr
servers that is blocked behind a firewall.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Mon, 14 Feb 2011 20:37:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2011-02-14:/2011/02/14/ssh-tunnelling/</guid><category>tutorials</category><category>ssh</category><category>tunnel</category></item><item><title>Debian/Ubuntu upgrade security packages only</title><link>https://kura.gg/2010/12/13/debianubuntu-upgrade-security-packages-only/</link><description>&lt;p&gt;&lt;strong&gt;The command below no longer works, for an updated version that does
work and should continue to work (until you upgrade to a new distro
version e.g. 10.04 -&amp;gt; 12.04) please see `here`_.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Really simple, should work for most cases, I’ve not found anything wrong
with it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo aptitude update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo aptitude install &lt;span class="s1"&gt;'?and(~U,~Asecurity)'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Mon, 13 Dec 2010 16:27:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2010-12-13:/2010/12/13/debianubuntu-upgrade-security-packages-only/</guid><category>tutorials</category><category>apt-get</category><category>aptitude</category><category>security</category><category>update</category><category>upgrade</category></item><item><title>Refresh Linux partition table online</title><link>https://kura.gg/2010/10/20/refresh-linux-partition-table-online/</link><description>
&lt;div class="section" id="if-the-device-is-not-mounted"&gt;
&lt;h2&gt;If the device is not mounted&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo blockdev --rereadpt DEVICE
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;E.g.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo blockdev --rereadpt /dev/sda
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="if-the-device-is-mounted"&gt;
&lt;h2&gt;If the device is mounted&lt;/h2&gt;
&lt;p&gt;Parted is awesome and does this job amazingly.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install parted
sudo partprobe
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Wed, 20 Oct 2010 17:17:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2010-10-20:/2010/10/20/refresh-linux-partition-table-online/</guid><category>tutorials</category><category>linux</category><category>online</category><category>partition</category></item><item><title>WordPress + nginx + Varnish + Apache 2</title><link>https://kura.gg/2010/09/26/nginx-varnish-apache2/</link><description>
&lt;p&gt;Lately I’ve been doing a lot of work with Varnish, this includes testing
it within a load balanced environment, putting it behind nginx, putting
it in front of Solr, the list goes on.&lt;/p&gt;
&lt;p&gt;This blog post will hopefully give you an insight in to a simple way of
combining nginx, Varnish and Apache to create a powerful Wordpress
environment that can really take a hammering.&lt;/p&gt;
&lt;p&gt;I’m going to assume you already have Apache and nginx working together,
if not I suggest you read my other articles on these subjects to learn
how to combine them.&lt;/p&gt;
&lt;div class="section" id="installing-varnish"&gt;
&lt;h2&gt;Installing Varnish&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install varnish
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="configuring-apache"&gt;
&lt;h2&gt;Configuring Apache&lt;/h2&gt;
&lt;p&gt;I suggest binding Apache to port 81, this is easy to change, open the
following file in your favourite editor.&lt;/p&gt;
&lt;blockquote&gt;
/etc/apache2/ports.conf&lt;/blockquote&gt;
&lt;p&gt;Change the Listen and NameVirtualHost lines to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;Listen&lt;/span&gt; &lt;span class="m"&gt;81&lt;/span&gt;
&lt;span class="nb"&gt;NameVirtualHost&lt;/span&gt; *:81
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will mean you need to go and change all …&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Sun, 26 Sep 2010 19:41:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2010-09-26:/2010/09/26/nginx-varnish-apache2/</guid><category>tutorials</category><category>apache</category><category>nginx</category><category>varnish</category><category>wordpress</category></item><item><title>Mounting a remote filesystem using sshfs</title><link>https://kura.gg/2010/09/26/mounting-a-remote-filesystem-using-sshfs/</link><description>&lt;p&gt;First we need to install sshfs.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install sshfs fuse-utils
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we make a mount point, I’m going to use a directory in my home
directory for this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkd﻿ir ~/remote-content
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And now we simply mount our remote directory to it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sshfs user@host:/path/to/location ~/remote-content
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It’s as simple as that.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Sun, 26 Sep 2010 01:55:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2010-09-26:/2010/09/26/mounting-a-remote-filesystem-using-sshfs/</guid><category>tutorials</category><category>ssh</category><category>sshfs</category></item><item><title>MySQL Master-Master-Slave-Slave Replication</title><link>https://kura.gg/2010/09/04/mysql-master-master-slave-slave-replication/</link><description>
&lt;div class="section" id="quick-introduction"&gt;
&lt;h2&gt;Quick introduction&lt;/h2&gt;
&lt;p&gt;My employers presented me with a challenge this week. The task was not
difficult in the end but to me it was an untried concept involving MySQL.&lt;/p&gt;
&lt;p&gt;I have never been a fan of MySQL and generally turn my nose at the
thought of using it, let alone replicating it etc.&lt;/p&gt;
&lt;p&gt;The task in question? Master -&amp;gt; Master -&amp;gt; Slave -&amp;gt; Slave replication.&lt;/p&gt;
&lt;p&gt;From this point forward I will expect you to have MySQL installed and
set-up as normal.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Master 1 will be known as Master 1 and Slave 2 with &lt;span class="caps"&gt;IP&lt;/span&gt; 10.1.1.1&lt;/li&gt;
&lt;li&gt;Master 2 will be known as Master 2 and Slave 1 with &lt;span class="caps"&gt;IP&lt;/span&gt; 10.1.1.2&lt;/li&gt;
&lt;li&gt;Slave 1 will be known as Slave 3 with &lt;span class="caps"&gt;IP&lt;/span&gt; 10.1.1.3&lt;/li&gt;
&lt;li&gt;and Slave 2 will be known as Slave 4 with &lt;span class="caps"&gt;IP&lt;/span&gt; 10.1.1.4&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="master-1"&gt;
&lt;h2&gt;Master 1&lt;/h2&gt;
&lt;p&gt;Modify your MySQL config file, usually named …&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Sat, 04 Sep 2010 18:14:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2010-09-04:/2010/09/04/mysql-master-master-slave-slave-replication/</guid><category>tutorials</category><category>mysql</category><category>replication</category></item><item><title>Find and replace across multiple files</title><link>https://kura.gg/2010/08/13/find-and-replace-across-multiple-files/</link><description>&lt;p&gt;I needed to quickly modify 500 hundred &lt;span class="caps"&gt;XML&lt;/span&gt; files, each was about &lt;span class="caps"&gt;10MB&lt;/span&gt; in
size, thankfully Linux makes that pretty fast and very easy.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find . -name &lt;span class="s2"&gt;"*.xml"&lt;/span&gt; -print &lt;span class="p"&gt;|&lt;/span&gt; xargs sed -i &lt;span class="s1"&gt;'s/FROM/TO/g'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A semi “real world” example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find . -name &lt;span class="s2"&gt;"*.xml"&lt;/span&gt; -print &lt;span class="p"&gt;|&lt;/span&gt; xargs sed -i &lt;span class="s1"&gt;'s/foo/bar/g'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Fri, 13 Aug 2010 19:19:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2010-08-13:/2010/08/13/find-and-replace-across-multiple-files/</guid><category>tutorials</category><category>find</category><category>sed</category><category>xargs</category></item><item><title>Adding swap while the server is online with Debian and VMWare ESX</title><link>https://kura.gg/2010/07/07/adding-swap-while-the-server-is-online-with-debian-and-vmware-esx/</link><description>
&lt;p&gt;Recently I had to install Oracle on a virtual machine but didn’t find
out until after I’d spun up of the machine that Oracle required at least
&lt;span class="caps"&gt;2GB&lt;/span&gt; of swap space, my machine did not have enough.&lt;/p&gt;
&lt;p&gt;Thankfully it’s quite simple to increase swap space, using VMWare &lt;span class="caps"&gt;ESX&lt;/span&gt;,
simple add a new drive to the machine as you normally would, I used &lt;span class="caps"&gt;5GB&lt;/span&gt;.&lt;/p&gt;
&lt;div class="section" id="detecting-the-new-scsi-drive-and-partitioning-it"&gt;
&lt;h2&gt;Detecting the new &lt;span class="caps"&gt;SCSI&lt;/span&gt; drive and partitioning it&lt;/h2&gt;
&lt;p&gt;This bit is simple, I’m going to assume you’re logged in as root.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"- - -"&lt;/span&gt; &amp;gt; /sys/class/scsi_host/**host0**/scan &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; fdisk -l
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If host0 doesn’t work, try changing to host1, host2 etc.&lt;/p&gt;
&lt;p&gt;Now we need to format the drive, for me it was /dev/sdb.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo cfdisk /dev/sdb
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create a new logical partition, set it’s type to &lt;strong&gt;82 Linux Swap&lt;/strong&gt; and
simply write the changes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="adding-swap"&gt;
&lt;h2&gt;Adding swap&lt;/h2&gt;
&lt;p&gt;Next we simply …&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Wed, 07 Jul 2010 18:56:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2010-07-07:/2010/07/07/adding-swap-while-the-server-is-online-with-debian-and-vmware-esx/</guid><category>tutorials</category><category>debian</category><category>swap</category><category>vmware</category></item><item><title>Trigger command on filesystem changes with inotify + incron</title><link>https://kura.gg/2010/07/03/trigger-command-on-filesystem-changes-with-inotify-incron/</link><description>
&lt;p&gt;During a seemingly normal work day a colleague pointed out a problem to
me and asked if I had any solution.&lt;/p&gt;
&lt;p&gt;The problem was that they were trying to use InfoBright
(&lt;a class="reference external" href="https://www.infobright.com/"&gt;https://www.infobright.com/&lt;/a&gt;) for some data crunching, export the data
to &lt;span class="caps"&gt;CSV&lt;/span&gt; and then import in to MySQL. My first idea was to output the data
from InfoBright as &lt;span class="caps"&gt;SQL&lt;/span&gt; and pipe it directly in to MySQL, this turned out
to not be possible as the version of &lt;span class="caps"&gt;IB&lt;/span&gt; they were using only supported
output as &lt;span class="caps"&gt;CSV&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;This in itself wasn’t a problem, the problem lay with the fact that &lt;span class="caps"&gt;IB&lt;/span&gt;
would only output the file with 0660 permissions, and although both &lt;span class="caps"&gt;IB&lt;/span&gt;
and MySQL ran as user mysql and group mysql, MySQL itself flat out
refused to import the &lt;span class="caps"&gt;CSV&lt;/span&gt; file unless it was world readable (0664),
which was slightly annoying.&lt;/p&gt;
&lt;p&gt;If the &lt;span class="caps"&gt;CSV&lt;/span&gt; didn’t …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Sat, 03 Jul 2010 15:26:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2010-07-03:/2010/07/03/trigger-command-on-filesystem-changes-with-inotify-incron/</guid><category>tutorials</category><category>incron</category><category>infobright</category><category>inotify</category><category>mysql</category></item><item><title>Using dpkg selections to backup and install packages</title><link>https://kura.gg/2010/07/02/using-dpkg-selections-to-backup-and-install-packages/</link><description>
&lt;p&gt;Sometimes you want to be able to install packages on another machine
without the hassle of a long apt-get install command or having to write
down every single package you’ve installed.&lt;/p&gt;
&lt;p&gt;Luckily Debian has the wonderful dpkg which has 2 methods for generating
a list of installed packages and another for importing a list.&lt;/p&gt;
&lt;div class="section" id="generating-a-list-of-installed-packages"&gt;
&lt;h2&gt;Generating a list of installed packages&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo dpkg --get-selections &amp;gt; selections
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will generate a file called &lt;em&gt;selections&lt;/em&gt; which will contain
something like&lt;/p&gt;
&lt;pre class="literal-block"&gt;
... snip ...
adduser install
apache2 install
apache2-mpm-prefork install
apache2-utils install
apache2.2-bin install
apache2.2-common install
apt install
... snip...
&lt;/pre&gt;
&lt;p&gt;This is just a simple, plain text file so can be copied between servers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="installing-packages-from-an-exported-list"&gt;
&lt;h2&gt;Installing packages from an exported list&lt;/h2&gt;
&lt;p&gt;This is almost just as easy, first we need to actually set the list of
selected packages&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo dpkg --set-selections &amp;lt; selections
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we need to actually do an update and install&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo …&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Fri, 02 Jul 2010 18:32:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2010-07-02:/2010/07/02/using-dpkg-selections-to-backup-and-install-packages/</guid><category>tutorials</category><category>apt</category><category>backup</category><category>dpkg</category><category>packages</category></item><item><title>New syslog.tv nginx wordpress site configuration explained</title><link>https://kura.gg/2010/04/18/new-syslog-tv-nginx-wordpress-site-configuration/</link><description>
&lt;div class="section" id="configuration-changes"&gt;
&lt;h2&gt;Configuration changes&lt;/h2&gt;
&lt;p&gt;I made some modifications to my nginx configuration this weekend to
improve performance and clear up some bugs.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;upstream&lt;/span&gt; &lt;span class="s"&gt;backend&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="n"&gt;127.0.0.1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;81&lt;/span&gt; &lt;span class="s"&gt;fail_timeout=120s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;syslog.tv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;access_log&lt;/span&gt; &lt;span class="s"&gt;/var/log/nginx/access.syslog.tv.log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;gzip&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;gzip_disable&lt;/span&gt; &lt;span class="s"&gt;msie6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;gzip_static&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;gzip_comp_level&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;gzip_proxied&lt;/span&gt; &lt;span class="s"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;gzip_types&lt;/span&gt; &lt;span class="s"&gt;text/plain&lt;/span&gt; &lt;span class="s"&gt;text/css&lt;/span&gt; &lt;span class="s"&gt;application/x-javascript&lt;/span&gt; &lt;span class="s"&gt;text/xml&lt;/span&gt;
    &lt;span class="s"&gt;application/xml&lt;/span&gt; &lt;span class="s"&gt;application/xml+rss&lt;/span&gt; &lt;span class="s"&gt;text/javascript&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="s"&gt;/var/www/syslog.tv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="kn"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$wordpress_logged_in&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$comment_author_email&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$comment_author&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="kn"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$http_cookie&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt;&lt;span class="sr"&gt;*&lt;/span&gt; &lt;span class="s"&gt;"wordpress_logged_in_[^=]*=([^%]+)%7C")&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
             &lt;span class="kn"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$wordpress_logged_in&lt;/span&gt; &lt;span class="s"&gt;wordpress_logged_in_&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="kn"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$http_cookie&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt;&lt;span class="sr"&gt;*&lt;/span&gt; &lt;span class="s"&gt;"comment_author_email_[^=]*=([^&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="kn"&gt;]+)(&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="kn"&gt;|$)")&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kn"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$comment_author_email&lt;/span&gt; &lt;span class="s"&gt;comment_author_email_&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="kn"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$http_cookie&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt;&lt;span class="sr"&gt;*&lt;/span&gt; &lt;span class="s"&gt;"comment_author_[^=]*=([^&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="kn"&gt;]+)(&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="kn"&gt;|$)")&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kn"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$comment_author&lt;/span&gt; &lt;span class="s"&gt;comment_author_&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="kn"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$my_cache_key&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$scheme://$host$uri$is_args$args$wordpress_logged_in$comment …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Sun, 18 Apr 2010 12:51:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2010-04-18:/2010/04/18/new-syslog-tv-nginx-wordpress-site-configuration/</guid><category>tutorials</category><category>apache</category><category>cache</category><category>nginx</category><category>proxy</category><category>proxy_cache</category><category>wordpress</category></item><item><title>Convert PEM &amp; Key to a single PKCS#12 file</title><link>https://kura.gg/2010/04/13/convert-pem-key-to-a-single-pkcs12-file/</link><description>&lt;p&gt;Sometimes keeping multiple copies of keys, certificates and root
certificates can be a real annoyance, thankfully it’s quite simple to
convert them in to a single &lt;span class="caps"&gt;PKCS&lt;/span&gt;#12 file with the following command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;openssl pkcs12 -export -out certificate.pkcs -in certificate.crt -inkey private.key -certfile rootcert.crt -name &lt;span class="s2"&gt;"PKCS#12 Certificate Bundle"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will create a file called &lt;strong&gt;certificate.pkcs&lt;/strong&gt; which will contain
the contents of the &lt;strong&gt;certificate.crt&lt;/strong&gt;, &lt;strong&gt;private.key&lt;/strong&gt; and your root
certificate &lt;strong&gt;rootcert.crt&lt;/strong&gt;, it will also have an internal reference to
it’s name &lt;strong&gt;&lt;span class="caps"&gt;PKCS&lt;/span&gt;#12 Certificate Bundle&lt;/strong&gt; to make it easier to inspect
the certificate to find what it should contain, usually you’d set this
to something more useful.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Tue, 13 Apr 2010 19:19:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2010-04-13:/2010/04/13/convert-pem-key-to-a-single-pkcs12-file/</guid><category>tutorials</category><category>crt</category><category>openssl</category><category>pem</category><category>pkcs12</category><category>ssl</category></item><item><title>Building nginx on Red Hat and Debian to RPM/DEB-style locations</title><link>https://kura.gg/2010/04/02/building-nginx-on-red-hat-and-debian-to-rpmdeb-style-locations/</link><description>
&lt;p&gt;The title of this post is a bit stupid, but I honestly couldn’t think of
any other way to write it…&lt;/p&gt;
&lt;p&gt;When compiling nginx by hand, by default make install will push the
binaries out to /usr/local/nginx and it doesn’t come with a start/stop
script, understandably because it doesn’t know which &lt;span class="caps"&gt;OS&lt;/span&gt; it is going to
be installed on etc etc.&lt;/p&gt;
&lt;p&gt;Recently I was tasked with building nginx to an old Red Hat Enterprise
Live 4 server with no yum installation, no nginx package in up2date and
not being able to find an &lt;span class="caps"&gt;RPM&lt;/span&gt; that’s link wasn’t dead.&lt;/p&gt;
&lt;p&gt;I’ve always felt that, being a Debian user, people think of me as only
being able to use apt-get and if I’m feeling especially adventurous dpkg
- to install applications. Some people know that I build .deb files in
my spare time, but …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Fri, 02 Apr 2010 16:54:00 +0100</pubDate><guid isPermaLink="false">tag:kura.gg,2010-04-02:/2010/04/02/building-nginx-on-red-hat-and-debian-to-rpmdeb-style-locations/</guid><category>tutorials</category><category>debian</category><category>fedora</category><category>install</category><category>nginx</category><category>redhat</category><category>ubuntu</category></item><item><title>Apache internal dummy connection</title><link>https://kura.gg/2010/03/27/apache-internal-dummy-connection/</link><description>&lt;p&gt;Recently I found that one of the servers I look after that runs a high
profile site was generating semi-high load at traffic peaks. You could
generally say that this would be understandable but the server was
shooting up to a load of around 10 for a few seconds and with that load
jump I was able to graph an increase of Apache processes on top of it.
Again though, this would generally be considered normal, but knowing how
well the server performs and having nginx sitting on top handling all
static content I knew something wasn’t quite right.&lt;/p&gt;
&lt;p&gt;Looking through the logs I found quite a lot of requests from a badly
written spider which was generating a lot of server load when it hit the
server, but after &lt;span class="caps"&gt;IP&lt;/span&gt; banning the culprit I also found several instances
of Apache waking it’s child processes.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
127.0.0 …&lt;/pre&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Sat, 27 Mar 2010 19:29:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2010-03-27:/2010/03/27/apache-internal-dummy-connection/</guid><category>tutorials</category><category>apache</category><category>load average</category></item><item><title>Configuring Nagios to monitor remote load, disk, swap etc using NRPE</title><link>https://kura.gg/2010/03/21/configuring-nagios-to-monitor-remote-load-disk-using-nrpe/</link><description>
&lt;p&gt;I’ll assume you already have Nagios installed and configured and have an
understanding of actually configuring and using Nagios.&lt;/p&gt;
&lt;div class="section" id="remote-server-the-server-to-be-monitored"&gt;
&lt;h2&gt;Remote server — the server to be monitored&lt;/h2&gt;
&lt;p&gt;First we’ll install the needed plugins and daemon on the &lt;strong&gt;remote&lt;/strong&gt; server.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install nagios-plugins nagios-nrpe-server
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once installed, open up &lt;strong&gt;/etc/nagios/nrpe_local.cfg&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;And place the following in it&lt;/p&gt;
&lt;pre class="literal-block"&gt;
allowed_hosts=NAGIOS.SERVER.IP,127.0.0.1

command[check_users]=/usr/lib/nagios/plugins/check_users -w 5 -c 10
command[check_load]=/usr/lib/nagios/plugins/check_load -w 15,10,5 -c 30,25,20
command[check_all_disks]=/usr/lib/nagios/plugins/check_disk -w 20 -c 10
command[check_zombie_procs]=/usr/lib/nagios/plugins/check_procs -w 5 -c 10 -s Z
command[check_total_procs]=/usr/lib/nagios/plugins/check_procs -w 150 -c 200
command[check_swap]=/usr/lib/nagios/plugins …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Sun, 21 Mar 2010 21:55:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2010-03-21:/2010/03/21/configuring-nagios-to-monitor-remote-load-disk-using-nrpe/</guid><category>tutorials</category><category>debian</category><category>monitoring</category><category>nagios</category><category>nrpe</category><category>ubuntu</category></item><item><title>Show IP in Apache logs from nginx reverse proxy</title><link>https://kura.gg/2010/03/20/show-ip-in-apache-logs-from-nginx-reverse-proxy/</link><description>&lt;p&gt;This is a very quick blog to show you how to show a users &lt;span class="caps"&gt;IP&lt;/span&gt; address in
your Apache access logs when the site in question is being reverse
proxied to Apache through nginx.&lt;/p&gt;
&lt;p&gt;You need the rpaf module for Apache, on Debian and Ubuntu this is simple
to install&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install libapache2-mod-rpaf
sudo a2enmod rpaf
sudo /etc/init.d/apache2 restart
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This set of commands will do the following;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Update apt package list&lt;/li&gt;
&lt;li&gt;Install libapache2-mod-rpaf&lt;/li&gt;
&lt;li&gt;Enable mod-rpaf&lt;/li&gt;
&lt;li&gt;Gracefully restart Apache (doesn’t kill connections)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once installed you simple need to be sure to pass the correct headers
through, so open up one of your nginx site configuration files and add
the following within the server definition.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;X-Forwarded-For&lt;/span&gt; &lt;span class="nv"&gt;$proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So you should have something that looks like this, but without the “… snip …”&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;# ...snip...&lt;/span&gt;
    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;# ...snip...&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;X-Forwarded-For&lt;/span&gt; &lt;span class="nv"&gt;$proxy_add …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Sat, 20 Mar 2010 19:24:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2010-03-20:/2010/03/20/show-ip-in-apache-logs-from-nginx-reverse-proxy/</guid><category>tutorials</category><category>apache</category><category>log</category><category>nginx</category><category>proxy</category></item><item><title>nginx - increase increase server_names_hash_bucket_size</title><link>https://kura.gg/2010/03/18/nginx-increase-increase-server_names_hash_bucket_size/</link><description>&lt;p&gt;Today I ran in to something I’d never seen before when configuring nginx.&lt;/p&gt;
&lt;p&gt;I ran the nginx config test, as I usually do before I restart it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nginx -t
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But, the response I got was interesting&lt;/p&gt;
&lt;pre class="literal-block"&gt;
2010/03/18 21:16:09 [emerg] 12299#0: could not build the server_names_hash, you should increase server_names_hash_bucket_size: 32
2010/03/18 21:16:09 [emerg] 12299#0: the configuration file /etc/nginx/nginx.conf test failed
&lt;/pre&gt;
&lt;p&gt;I found that one of the domain names I was using was over 32 characters
in length, nginx’s default max length.&lt;/p&gt;
&lt;p&gt;Thankfully the fix was simple.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;http&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;# ...snip...&lt;/span&gt;
    &lt;span class="kn"&gt;server_names_hash_bucket_size&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;# ...snip...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Thu, 18 Mar 2010 21:54:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2010-03-18:/2010/03/18/nginx-increase-increase-server_names_hash_bucket_size/</guid><category>tutorials</category><category>nginx</category></item><item><title>Finding files over a set size with find &amp; awk</title><link>https://kura.gg/2010/03/17/finding-files-over-a-set-size-with-find-and-awk/</link><description>&lt;p&gt;This is a really great simple way to find files on the filesystem that
are over 200k in size.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find /path/to/directory/ -type f -size +200k -exec ls -lh &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;'{ print $NF ": " $5 }'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can use the output of this to either store in a file, or pipe to wc
for a count of lines&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find /path/to/directory/ -type f -size +200k -exec ls -lh &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;'{ print $NF ": " $5 }'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; wc -l
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also use egrep before wc to look for specific filetypes&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find /path/to/directory/ -type f -size +200k -exec ls -lh &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;'{ print $NF ": " $5 }'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; egrep &lt;span class="s1"&gt;'(jpg|bmp|gif|tiff|jpeg)'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; wc -l
&lt;/pre&gt;&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Wed, 17 Mar 2010 11:19:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2010-03-17:/2010/03/17/finding-files-over-a-set-size-with-find-and-awk/</guid><category>tutorials</category><category>awk</category><category>egrep</category><category>find</category><category>linux</category><category>ls</category><category>wc</category></item><item><title>Convert DER certificate to PEM</title><link>https://kura.gg/2010/03/03/convert-der-certificate-to-pem/</link><description>&lt;p&gt;Some times as an administrator you will be given a certificate from a
third party that will be in the &lt;span class="caps"&gt;DER&lt;/span&gt; format, which cannot be loaded in to Apache.&lt;/p&gt;
&lt;p&gt;Converting it is a simple process:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;openssl x509 -in certificate.crt -inform DER -out certificate.pem -outform PEM
&lt;/pre&gt;&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Wed, 03 Mar 2010 17:26:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2010-03-03:/2010/03/03/convert-der-certificate-to-pem/</guid><category>tutorials</category><category>apache</category><category>certificate</category><category>crt</category><category>der</category><category>pem</category><category>ssl</category></item><item><title>less is more</title><link>https://kura.gg/2010/03/01/less-is-more/</link><description>
&lt;p&gt;To my surprise I have found that there are still people out there who
use &lt;em&gt;“more”&lt;/em&gt;, this has shocked me.&lt;/p&gt;
&lt;p&gt;So this is a very, very short blog post to tell those who visit that
&lt;strong&gt;less is more and more is less&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="section" id="what"&gt;
&lt;h2&gt;What?&lt;/h2&gt;
&lt;p&gt;less is a command that comes as standard in almost all Linux distros
now, and unlike more it actually has the ability to do backwards and
forwards scrolling with Page Up, Page Down, arrow keys and spacebar.
It’s a fantastic little command!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;less FILE
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Very simple to use and an all round great tool. The best thing about
less is it doesn’t need to read the whole file in one go, it reads in
chunks. Opening a &lt;span class="caps"&gt;100MB&lt;/span&gt; log file is simple with less!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="useful-options"&gt;
&lt;h2&gt;Useful options&lt;/h2&gt;
&lt;table class="docutils"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th class="head"&gt;&lt;strong&gt;-g&lt;/strong&gt;&lt;/th&gt;
&lt;th class="head"&gt;Highlights just the current match of any searched string,&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;-I&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Case-insensitive searches,&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;-M&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Show a more detailed prompt …&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Mon, 01 Mar 2010 21:30:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2010-03-01:/2010/03/01/less-is-more/</guid><category>tutorials</category><category>less</category><category>linux</category><category>unix</category></item><item><title>HOWTO: SSH config on Debian/Ubuntu</title><link>https://kura.gg/2010/02/18/howto-ssh-config-on-debian-ubuntu/</link><description>
&lt;p&gt;Today I &lt;em&gt;finally&lt;/em&gt; got round to setting up my local user ssh config on my
new work laptop and figured I’d do a quick write up on it and it’s uses.&lt;/p&gt;
&lt;p&gt;You can create a configuration file in your home directory that will
override the options set in your machine-wide config.&lt;/p&gt;
&lt;div class="section" id="your-configuration-files"&gt;
&lt;h2&gt;Your configuration files&lt;/h2&gt;
&lt;p&gt;Your local config can be found/created in:&lt;/p&gt;
&lt;blockquote&gt;
~/.ssh/config&lt;/blockquote&gt;
&lt;p&gt;And your machine-wide configuration is in:&lt;/p&gt;
&lt;blockquote&gt;
/etc/ssh/ssh_config&lt;/blockquote&gt;
&lt;p&gt;Rather than editing my ssh config across my whole machine I’m doing it
for my local user specifically.&lt;/p&gt;
&lt;p&gt;Reading the man page for ssh_config will give you a full list of
available options, below I will outline several that I use and find very useful.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="your-host-definitions"&gt;
&lt;h2&gt;Your host definitions&lt;/h2&gt;
&lt;p&gt;First things first, we need to define a host.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Host host.domain.com
&lt;/pre&gt;
&lt;p&gt;Each host you add to your config will need to have …&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Thu, 18 Feb 2010 21:03:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2010-02-18:/2010/02/18/howto-ssh-config-on-debian-ubuntu/</guid><category>tutorials</category><category>debian</category><category>howto</category><category>ssh</category><category>ssh_config</category><category>ubuntu</category></item><item><title>HOWTO: Guest Virtual Machine disk extend online with Debian/Ubuntu, LVM2 and VMWare ESX</title><link>https://kura.gg/2010/02/16/howto-guest-virtual-machine-disk-extend-online-with-debian-ubuntu-lvm2-and-vmware-esx/</link><description>
&lt;p&gt;Over the last two days I’ve had the interesting task of online some VMs
from clones and increasing their disk space to accommodate a mass of
user uploaded content. I’ve done this before but never actually with an
Logical Volume Management (&lt;span class="caps"&gt;LVM&lt;/span&gt;) disk.&lt;/p&gt;
&lt;p&gt;My first approach, like a fool, was to clone the &lt;span class="caps"&gt;VM&lt;/span&gt; from source and boot
it from a remotely mounted GParted &lt;span class="caps"&gt;ISO&lt;/span&gt;, this didn’t actually go as
expected and I was unable to add it to the &lt;span class="caps"&gt;LVM&lt;/span&gt;, I found a nice guide
online and consulted a colleague because I knew he’d done something
similar recently. After the first successful size increase I realised I
was able to do it without ever rebooting the machine itself, this is
accomplished by actually adding an extra disk to the &lt;span class="caps"&gt;VM&lt;/span&gt;, this disk can
then be partition with cfdisk and then added to the &lt;span class="caps"&gt;LVM&lt;/span&gt;, thus …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Tue, 16 Feb 2010 18:20:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2010-02-16:/2010/02/16/howto-guest-virtual-machine-disk-extend-online-with-debian-ubuntu-lvm2-and-vmware-esx/</guid><category>tutorials</category><category>cfdisk</category><category>debian</category><category>esx</category><category>howto</category><category>logical volume management</category><category>lvm</category><category>lvm2</category><category>partition</category><category>ubuntu</category><category>vmware</category></item><item><title>More nginx proxy_cache optimizations and nginx load balancing</title><link>https://kura.gg/2010/02/14/more-nginx-proxy_cache-optimizations-and-nginx-load-balancing/</link><description>
&lt;p&gt;This is yet another follow up to post to several previous posts about
using nginx as a reverse proxy with caching. It is actually a direct
addition to my post from a week or so ago which outlined how to actually
using nginx’s proxy caching feature which can be read here —
&lt;a class="reference external" href="https://syslog.tv/2010/02/07/nginx-proxy_cache-and-explained-benchmarked/"&gt;/2010/02/07/nginx-proxy_cache-and-explained-benchmarked/&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="even-more-changes"&gt;
&lt;h2&gt;Even more changes?&lt;/h2&gt;
&lt;p&gt;Yes, even more changes, these are basic changes that are there to
improve the caching capabilities and also implement load balancing.&lt;/p&gt;
&lt;div class="section" id="cache-changes"&gt;
&lt;h3&gt;Cache changes&lt;/h3&gt;
&lt;p&gt;The first set of changes are in the main nginx configuration file&lt;/p&gt;
&lt;blockquote&gt;
/etc/nginx/nginx.conf&lt;/blockquote&gt;
&lt;p&gt;These changes basically just change the proxy_cache key&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;proxy_cache_path&lt;/span&gt; &lt;span class="s"&gt;/var/www/nginx_cache&lt;/span&gt; &lt;span class="s"&gt;levels=1:2&lt;/span&gt; &lt;span class="s"&gt;keys_zone=cache:8m&lt;/span&gt; &lt;span class="s"&gt;max_size=1000m&lt;/span&gt; &lt;span class="s"&gt;inactive=600m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;proxy_temp_path&lt;/span&gt; &lt;span class="s"&gt;/tmp/nginx&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;proxy_cache_key&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$scheme://$host$request_uri"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I’ve decided to put the temporary caches file in to …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Sun, 14 Feb 2010 14:27:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2010-02-14:/2010/02/14/more-nginx-proxy_cache-optimizations-and-nginx-load-balancing/</guid><category>tutorials</category><category>apache</category><category>cache</category><category>debian</category><category>howto</category><category>load balancing</category><category>nginx</category><category>ubuntu</category><category>wordpress</category></item><item><title>code_swarm - Apache, Python and PostgreSQL commit visualization</title><link>https://kura.gg/2010/02/13/code_swarm-apache-python-and-postgresql-commit-visualization/</link><description>
&lt;p&gt;These videos are pretty old now and I had forgotten about them until a
colleague tweeted about a Twitter code_swarm visualization which made
me remember.&lt;/p&gt;
&lt;p&gt;So here they are, best viewed in full screen mode.&lt;/p&gt;
&lt;div class="section" id="apache"&gt;
&lt;h2&gt;Apache&lt;/h2&gt;
&lt;div align="center" class="vimeo"&gt;&lt;iframe allowfullscreen="" frameborder="0" height="500" mozallowfullscreen="" src="https://player.vimeo.com/video/1076588" webkitallowfullscreen="" width="800"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="section" id="python"&gt;
&lt;h2&gt;Python&lt;/h2&gt;
&lt;div align="center" class="vimeo"&gt;&lt;iframe allowfullscreen="" frameborder="0" height="500" mozallowfullscreen="" src="https://player.vimeo.com/video/1093745" webkitallowfullscreen="" width="800"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="section" id="postgresql"&gt;
&lt;h2&gt;PostgreSQL&lt;/h2&gt;
&lt;div align="center" class="vimeo"&gt;&lt;iframe allowfullscreen="" frameborder="0" height="500" mozallowfullscreen="" src="https://player.vimeo.com/video/1081680" webkitallowfullscreen="" width="800"&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Sat, 13 Feb 2010 23:01:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2010-02-13:/2010/02/13/code_swarm-apache-python-and-postgresql-commit-visualization/</guid><category>misc</category><category>apache</category><category>code_swarm</category><category>postgresql</category><category>python</category></item><item><title>HOWTO: DomainKeys with Postfix on Debian/Ubuntu</title><link>https://kura.gg/2010/02/12/howto-domainkeys-with-postfix-on-debian-ubuntu/</link><description>&lt;p&gt;&lt;strong&gt;I have written a much newer, clearer and better article on DomainKeys
signing email `here`_.&lt;/strong&gt;&lt;/p&gt;
&lt;div class="section" id="about"&gt;
&lt;h2&gt;About&lt;/h2&gt;
&lt;p&gt;This guide is a sister to another guide I wrote a while back about how
to use DomainKeys Identified Mail (&lt;span class="caps"&gt;DKIM&lt;/span&gt;) with Postfix on Debian, which
can be read here - &lt;a class="reference external" href="/2010/01/11/dkim-on-debian-with-postfix/"&gt;/2010/01/11/dkim-on-debian-with-postfix/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;DomainKeys is an older implementation than &lt;span class="caps"&gt;DKIM&lt;/span&gt;, &lt;span class="caps"&gt;DKIM&lt;/span&gt; is a merge of
DomainKeys and Identified Mail. Both DomainKeys and &lt;span class="caps"&gt;DKIM&lt;/span&gt; are used so
having both configured is a good idea.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="getting-started"&gt;
&lt;h2&gt;Getting started&lt;/h2&gt;
&lt;p&gt;Lets start off by installing the dk-filter&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install dk-filter
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once installed you can can create a public and private key set using the
commands below, if you’re already using &lt;span class="caps"&gt;DKIM&lt;/span&gt; you can skip this step and
just use your already existing key.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;openssl genrsa -out private.key &lt;span class="m"&gt;1024&lt;/span&gt;
openssl rsa -in private.key -out public.key -pubout -outform PEM
sudo mkdir /etc/mail
sudo cp …&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Fri, 12 Feb 2010 19:08:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2010-02-12:/2010/02/12/howto-domainkeys-with-postfix-on-debian-ubuntu/</guid><category>tutorials</category><category>debian</category><category>dkim</category><category>domainkeys</category><category>howto</category><category>mail</category><category>postfix</category><category>ubuntu</category></item><item><title>HOWTO: Using SPF to validate outgoing mail</title><link>https://kura.gg/2010/02/11/howto-using-spf-to-validate-outgoing-mail/</link><description>
&lt;p&gt;You can get a basic overview on what &lt;span class="caps"&gt;SPF&lt;/span&gt; is, what it’s for and it’s more
advanced usages here - &lt;a class="reference external" href="https://www.openspf.org/"&gt;https://www.openspf.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This article is to give only a basic insight in to how you can use an
&lt;span class="caps"&gt;SPF&lt;/span&gt; record to valid mail from your servers.&lt;/p&gt;
&lt;div class="section" id="the-dns"&gt;
&lt;h2&gt;The &lt;span class="caps"&gt;DNS&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class="caps"&gt;SPF&lt;/span&gt; records work from your &lt;span class="caps"&gt;DNS&lt;/span&gt;, it’s really simple. Technically there is
a &lt;span class="caps"&gt;DNS&lt;/span&gt; type defined for &lt;span class="caps"&gt;SPF&lt;/span&gt; records as of &lt;a class="reference external" href="https://tools.ietf.org/html/rfc4408"&gt;&lt;span class="caps"&gt;RFC&lt;/span&gt; 4408&lt;/a&gt;, but since not all
servers recognise this type it also works in the &lt;span class="caps"&gt;TXT&lt;/span&gt; type.&lt;/p&gt;
&lt;p&gt;A simple usage of &lt;span class="caps"&gt;SPF&lt;/span&gt; is&lt;/p&gt;
&lt;pre class="literal-block"&gt;
v=spf1 a mx -all
&lt;/pre&gt;
&lt;p&gt;Imagine this exists on this domain, &lt;strong&gt;syslog.tv&lt;/strong&gt;. This spf record would
mean that &lt;span class="caps"&gt;ALL&lt;/span&gt; &lt;span class="caps"&gt;AN&lt;/span&gt; and &lt;span class="caps"&gt;MX&lt;/span&gt; servers listed in the &lt;span class="caps"&gt;DNS&lt;/span&gt; records of syslog.tv
would be valid senders.&lt;/p&gt;
&lt;p&gt;The hypen (-) before &lt;em&gt;all&lt;/em&gt; means that if the mail appears to be coming
from a server that isn …&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Thu, 11 Feb 2010 18:25:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2010-02-11:/2010/02/11/howto-using-spf-to-validate-outgoing-mail/</guid><category>tutorials</category><category>howto</category><category>mail</category></item><item><title>HOWTO: IPTables on Debian/Ubuntu</title><link>https://kura.gg/2010/02/11/howto-iptables-on-debian-ubuntu/</link><description>
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;Simple, if it’s not installed already then run the following commands&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install iptables
sudo /etc/init.d/iptables start
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The safest and best way of configuring iptables, in my opinion, is to
have two files. The first is a temporary/test set that you will save to
first, the second is the actual rule set that will be loaded to iptables.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="configuration"&gt;
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;So, first we’ll create an empty temp rules file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo touch /etc/iptables.temp.rules
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add some simple rules to it:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
*filter
# Allows all loopback traffic and drop all traffic to 127/8 that doesn't use lo

-A INPUT -i lo -j ACCEPT
-A INPUT ! -i lo -d 127.0.0.0/8 -j REJECT

# Accepts all established inbound connections
-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

# Allows all outbound traffic
-A OUTPUT -j ACCEPT

#SSH
-A INPUT -p tcp -m …&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Thu, 11 Feb 2010 16:51:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2010-02-11:/2010/02/11/howto-iptables-on-debian-ubuntu/</guid><category>tutorials</category><category>debian</category><category>howto</category><category>iptables</category><category>networking</category><category>security</category><category>ubuntu</category></item><item><title>nginx, proxy_cache and reverse proxying explained &amp; benchmarked</title><link>https://kura.gg/2010/02/07/nginx-proxy_cache-and-explained-benchmarked/</link><description>
&lt;div class="section" id="the-beginning"&gt;
&lt;h2&gt;The beginning&lt;/h2&gt;
&lt;p&gt;Where to begin? nginx would be a good start I suppose. It’s far easier
and makes much for sense for you to actually read about nginx from it’s
own website - &lt;a class="reference external" href="https://nginx.org/en/"&gt;https://nginx.org/en/&lt;/a&gt; - but just to give a simple
explanation too; `nginx is king of static content &lt;span class="caps"&gt;HTTP&lt;/span&gt; servers.`&lt;/p&gt;
&lt;p&gt;Anyone that has dealt with Apache on medium to high traffic websites
will know that Apache is bit of a `wheezy, old geezer` when it comes
to content serving using it’s mpm-worker (threaded). Very often high
traffic will cause server load to go through the roof but for serving
dynamic content, there really is no better &lt;span class="caps"&gt;HTTP&lt;/span&gt; server than Apache, so
this leaves us in a bit of a predicament; a high powered website with
dynamic content and lots of static files like &lt;span class="caps"&gt;JS&lt;/span&gt;, &lt;span class="caps"&gt;CSS&lt;/span&gt; and imagery, what
do we do?!&lt;/p&gt;
&lt;p&gt;In this example `dynamic …&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Sun, 07 Feb 2010 10:27:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2010-02-07:/2010/02/07/nginx-proxy_cache-and-explained-benchmarked/</guid><category>tutorials</category><category>apache</category><category>cache</category><category>debian</category><category>howto</category><category>nginx</category><category>php</category><category>ubuntu</category><category>wordpress</category></item><item><title>Using nginx, Varnish and Apache</title><link>https://kura.gg/2010/02/06/using-nginx-varnish-and-apache/</link><description>
&lt;div class="section" id="the-problem"&gt;
&lt;h2&gt;The problem&lt;/h2&gt;
&lt;p&gt;So lets get to the problem first. I have several lightly to medium
loaded sites running on some virtual servers, they servers themselves
are highly configured to run beautifully on our host environments, very,
very &lt;span class="caps"&gt;RAM&lt;/span&gt; intensive but low disk I/O and low &lt;span class="caps"&gt;CPU&lt;/span&gt; usage.&lt;/p&gt;
&lt;p&gt;As mentioned, the sites are relatively low loaded, they’ll generally
hang around at between 3,000-5,000 unique hits a day and are run through
Apache using &lt;span class="caps"&gt;PHP&lt;/span&gt;, various &lt;span class="caps"&gt;PHP&lt;/span&gt; modules and MySQL, a simple generic &lt;span class="caps"&gt;LAMP&lt;/span&gt;
environment, yet customised to suit it’s surroundings and host.&lt;/p&gt;
&lt;p&gt;The sites themselves run fine on that setup, no issues at all on normal
days, but on set days of the week these sites can double in unique hits
or even more than double, with KeepAlive enabled and a KeepAliveTimeout
set low Apache has problems handling this kind of load (I should point
out …&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Sat, 06 Feb 2010 10:36:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2010-02-06:/2010/02/06/using-nginx-varnish-and-apache/</guid><category>tutorials</category><category>apache</category><category>cache</category><category>nginx</category><category>varnish</category></item><item><title>HOWTO: Debian - Apache 2 SSL on multiple virtual hosts</title><link>https://kura.gg/2010/01/15/howto-debian-apache2-ssl-multiple-vhosts/</link><description>&lt;p&gt;Figured I’d write this one up quickly as it proved to annoy the hell out
of me at 4:30am this morning getting it working on a live server.&lt;/p&gt;
&lt;p&gt;Apache 2 can serve &lt;span class="caps"&gt;SSL&lt;/span&gt; content to multiple vhosts on your setup,
provided they use different &lt;span class="caps"&gt;IP&lt;/span&gt; addresses, this post will give you a
quick run down on how to do it.&lt;/p&gt;
&lt;p&gt;First up we need to actually add the new &lt;span class="caps"&gt;IP&lt;/span&gt; to the machine in /etc/network/interfaces.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
auto eth0
iface eth0 inet static
    address 10.1.1.7
    netmask 255.255.255.0
    gateway 10.1.1.1

auto eth0:1
iface eth0:1 inet static
    address 10.1.1.8
    netmask 255.255.255.0
&lt;/pre&gt;
&lt;p&gt;Replace my IPs with your own.&lt;/p&gt;
&lt;p&gt;Restart networking.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /etc/init.d/networking restart
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next task is Apache 2 to configure it to listen on both IPs.&lt;/p&gt;
&lt;blockquote&gt;
/etc/apache2/ports.conf&lt;/blockquote&gt;
&lt;p&gt;My …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Fri, 15 Jan 2010 06:24:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2010-01-15:/2010/01/15/howto-debian-apache2-ssl-multiple-vhosts/</guid><category>tutorials</category><category>apache</category><category>debian</category><category>eth0</category><category>howto</category><category>mod_ssl</category><category>networking</category><category>ssl</category><category>vhost</category></item><item><title>HOWTO: Debian server security</title><link>https://kura.gg/2010/01/14/howto-debian-server-security/</link><description>
&lt;p&gt;Server security is something I’ve always tried to keep myself up-to-date
on. I have at least a dozen &lt;span class="caps"&gt;RSS&lt;/span&gt; feeds that I read daily to learn about
the latest flaws, holes releases etc. That being said I am by no means
an “expert”, I’ve learned what I’ve needed to learn over time. I like to
think that over the years I’ve gained enough knowledge to almost
completely secure servers with all the programs installed that I
generally use.&lt;/p&gt;
&lt;p&gt;The aim of this article is to introduce you to some of the programs I
use for security and some config changes that can be made to other
programs to make them more secure. It is aimed at web servers but other
changes work anywhere, like the &lt;span class="caps"&gt;SSH&lt;/span&gt; changes.&lt;/p&gt;
&lt;div class="section" id="ssh"&gt;
&lt;h2&gt;&lt;span class="caps"&gt;SSH&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;We’ll start with a very simple change that makes a very big difference,
a change to the …&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Thu, 14 Jan 2010 19:57:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2010-01-14:/2010/01/14/howto-debian-server-security/</guid><category>tutorials</category><category>apache</category><category>debian</category><category>denyhosts</category><category>howto</category><category>logwatch</category><category>php</category><category>security</category></item><item><title>HOWTO: Debian - Sudo(ers) explained</title><link>https://kura.gg/2010/01/13/howto-debian-sudoers-explained/</link><description>
&lt;p&gt;Ah sudo, one of my favourites, funnily enough I’ve noticed a lot of
Linux users use sudo (mainly because Ubuntu installs and configures your
first user by default,) but very few seem to know that much about it.
This can include not even knowing how to add a user to sudoers.&lt;/p&gt;
&lt;p&gt;This article will give you some useful information on what sudo actually
is, how to configure it and how to restrict it.&lt;/p&gt;
&lt;div class="section" id="what-is-sudo"&gt;
&lt;h2&gt;What is sudo?&lt;/h2&gt;
&lt;p&gt;So, quickly running &lt;strong&gt;man sudo&lt;/strong&gt; gives us some information what sudo
actually is and does.&lt;/p&gt;
&lt;blockquote&gt;
sudo allows a permitted user to execute a command as the superuser
or another user, as specified in the sudoers file. The real and
effective uid and gid are set to match those of the target user as
specified in the passwd file and the group vector is initialized
based on the group file (unless the -P option …&lt;/blockquote&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Wed, 13 Jan 2010 03:56:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2010-01-13:/2010/01/13/howto-debian-sudoers-explained/</guid><category>tutorials</category><category>debian</category><category>howto</category><category>sudo</category><category>sudoers</category></item><item><title>HOWTO: Debian, Apache 2 &amp; mod_ssl with self signed cert. or officially signed cert.</title><link>https://kura.gg/2010/01/12/howto-debian-apache-2-amp-mod_ssl/</link><description>
&lt;p&gt;This is gonna be quite a simple tutorial that should be the same
(excluding pathing and apt) across other Linux distros.&lt;/p&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;First off we’ll get Apache and mod_ssl install&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install apache2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class="caps"&gt;SSL&lt;/span&gt; should be enabled by default, if not run the following&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo a2enmod ssl
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ssl-certificate"&gt;
&lt;h2&gt;&lt;span class="caps"&gt;SSL&lt;/span&gt; certificate&lt;/h2&gt;
&lt;p&gt;There are several ways of doing this, the first you need to figure out
is if you want a self signed certificate or one signed by a provider
like GeoTrust, this type is not free. In this article I’ll cover both,
starting with self signed.&lt;/p&gt;
&lt;div class="section" id="self-signed"&gt;
&lt;h3&gt;Self signed&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudp mkdir /etc/apache2/ssl
sudo /usr/sbin/make-ssl-cert /usr/share/ssl-cert/ssleay.cnf /etc/apache2/ssl/apache.pem
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="provider-signed"&gt;
&lt;h3&gt;Provider signed&lt;/h3&gt;
&lt;p&gt;Please note, this type of certificate has to be paid for, prices at time
of writing range from £15/year to £2,000/year.&lt;/p&gt;
&lt;p&gt;There are actually some more …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Tue, 12 Jan 2010 22:57:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2010-01-12:/2010/01/12/howto-debian-apache-2-amp-mod_ssl/</guid><category>tutorials</category><category>apache</category><category>debian</category><category>mod_ssl</category><category>ssl</category></item><item><title>Apache 2, Nginx &amp; WordPress MU - Follow up</title><link>https://kura.gg/2010/01/12/apache-2-nginx-wordpress-mu-follow-up/</link><description>&lt;p&gt;This is a quick follow up to a previous post about getting this blog
&lt;a class="reference external" href="/2010/01/11/debian-apache-2-nginx-wordpress-mu/"&gt;running on nginx with a reverse proxy to Apache 2&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It seems the issue stems from 3 mods I had installed and enabled&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;mod-spamhaus&lt;/li&gt;
&lt;li&gt;mod-evasive and&lt;/li&gt;
&lt;li&gt;mod-security&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The 3, when running together are a fantastic way to strengthen any web
server from attack, be it &lt;span class="caps"&gt;DOS&lt;/span&gt;, injection, &lt;span class="caps"&gt;XLS&lt;/span&gt; etc. I’ve sworn by all 3
of them for years now and I thought I had them cracked for
security:performance ratio, when it comes to reverse proxying requests
from nginx to Apache 2 where WordPress is concerned, apparently I was
very wrong.&lt;/p&gt;
&lt;p&gt;The issue wasn’t so bad when the cache was full, but seeing as my cache
is only alive for an hour that leaves an open point for the cache to be
recreated when a user views the page. This in itself isn’t …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Tue, 12 Jan 2010 00:37:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2010-01-12:/2010/01/12/apache-2-nginx-wordpress-mu-follow-up/</guid><category>tutorials</category><category>apache</category><category>cache</category><category>debian</category><category>nginx</category><category>wordpress</category></item><item><title>HOWTO: DKIM with Postfix on Debian</title><link>https://kura.gg/2010/01/11/dkim-on-debian-with-postfix/</link><description>&lt;p&gt;&lt;em&gt;There is a much newer article on this subject `here`_ and covers
DomainKeys and &lt;span class="caps"&gt;DKIM&lt;/span&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Mail and mail servers have always been my forté if I’m to be honest, my
home mail server has been spam free for years now, nothing really gets
past due to my love of all things installable and configurable.&lt;/p&gt;
&lt;p&gt;Several months ago I started a new job and after a few weeks I was
tasked with getting &lt;span class="caps"&gt;DKIM&lt;/span&gt; signing to work on our mail platform, &lt;span class="caps"&gt;DKIM&lt;/span&gt; was
semi-new to me, I’d never bothered with anything but &lt;span class="caps"&gt;SPF&lt;/span&gt; before so I
figured I’d give it a shot.&lt;/p&gt;
&lt;p&gt;At work our servers are Debian based but are the evil that is Ubuntu,
strangely though I was able to find an Ubuntu specific article that
wasn’t absolute rubbish, which surprised me no end. I was able to get
dkim-milter working with Postfix and signing …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Mon, 11 Jan 2010 20:53:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2010-01-11:/2010/01/11/dkim-on-debian-with-postfix/</guid><category>tutorials</category><category>debian</category><category>dkim</category><category>howto</category><category>mail</category><category>postfix</category></item><item><title>Debian, Apache 2, Nginx, WordPress MU &amp; WP-Super-Cache</title><link>https://kura.gg/2010/01/11/debian-apache-2-nginx-wordpress-mu/</link><description>
&lt;p&gt;&lt;em&gt;This is a rather old article, for more up-to-date information please see;&lt;/em&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="/2010/02/07/nginx-proxy_cache-and-explained-benchmarked/"&gt;/2010/02/07/nginx-proxy_cache-and-explained-benchmarked/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/2010/02/14/more-nginx-proxy_cache-optimizations-and-nginx-load-balancing/"&gt;/2010/02/14/more-nginx-proxy_cache-optimizations-and-nginx-load-balancing/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I’ve started collecting a few blogs on my servers now and figured from
this one on I would consolidate it in to one workable, usable location.
Removing my need to update multiple plugins, themes and WordPress
itself, over and over.&lt;/p&gt;
&lt;p&gt;This time round I thought I’d do it properly, and properly in my book is
as complicated and “awesome” as it can possibly be, without growing legs
and running off to stomp a city.&lt;/p&gt;
&lt;div class="section" id="love"&gt;
&lt;h2&gt;Love&lt;/h2&gt;
&lt;p&gt;I’ve fallen in-love with nginx (&lt;a class="reference external" href="https://nginx.org/"&gt;https://nginx.org/&lt;/a&gt;) over the last 6
months or so, I’d been an avid user of LighTTPD for a very long time
before but started to look in to nginx mid year as a replacement. I
learned that at my new job they used …&lt;/p&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">kura</dc:creator><pubDate>Mon, 11 Jan 2010 19:58:00 +0000</pubDate><guid isPermaLink="false">tag:kura.gg,2010-01-11:/2010/01/11/debian-apache-2-nginx-wordpress-mu/</guid><category>tutorials</category><category>apache</category><category>cache</category><category>debian</category><category>nginx</category><category>wordpress</category></item></channel></rss>