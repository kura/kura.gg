<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>kura.gg - tutorials</title><link href="https://kura.gg/" rel="alternate"></link><link href="https://kura.gg/feeds/tutorials.atom.xml" rel="self"></link><id>https://kura.gg/</id><updated>2015-10-18T03:30:00+01:00</updated><entry><title>SSHFP DNS records</title><link href="https://kura.gg/2015/10/18/sshfp-dns-records/" rel="alternate"></link><published>2015-10-18T03:30:00+01:00</published><updated>2015-10-18T03:30:00+01:00</updated><author><name>kura</name></author><id>tag:kura.gg,2015-10-18:/2015/10/18/sshfp-dns-records/</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://tools.ietf.org/html/rfc4255"&gt;&lt;span class="caps"&gt;SSHFP&lt;/span&gt;&lt;/a&gt; records are a defense against
people blindly typing ‘yes’ when asked if they want to continue connecting to
an &lt;span class="caps"&gt;SSH&lt;/span&gt; host who’s authenticity is unknown.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ssh some.host.tld
The authenticity of host 'some.host.tld (123.456.789.10)' can't be established.
ED25519 key fingerprint is 69:76:51:39:a4:c6:de:15:7c:50:4b:4a:a7:98:40:5e.
Are you sure you want to continue connecting (yes/no)?
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This prompt is likely to be extremely familiar to you and, most people seem to
just type ‘yes’ to move on with their lives, which defeats the whole purpose of
this prompt.&lt;/p&gt;
&lt;p&gt;If you use &lt;span class="caps"&gt;DNSSEC&lt;/span&gt; you can bypass this prompt entirely by publishing your
server’s key fingerprints via &lt;span class="caps"&gt;DNS&lt;/span&gt; and having &lt;span class="caps"&gt;SSH&lt;/span&gt; authenticate them for you.&lt;/p&gt;
&lt;div class="section" id="generating-your-sshfp-record"&gt;
&lt;h2&gt;Generating your &lt;span class="caps"&gt;SSHFP&lt;/span&gt; record&lt;/h2&gt;
&lt;p&gt;You can get &lt;span class="caps"&gt;SSH&lt;/span&gt; to generate the &lt;span class="caps"&gt;DNS&lt;/span&gt; records for you, log in …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://tools.ietf.org/html/rfc4255"&gt;&lt;span class="caps"&gt;SSHFP&lt;/span&gt;&lt;/a&gt; records are a defense against
people blindly typing ‘yes’ when asked if they want to continue connecting to
an &lt;span class="caps"&gt;SSH&lt;/span&gt; host who’s authenticity is unknown.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ssh some.host.tld
The authenticity of host 'some.host.tld (123.456.789.10)' can't be established.
ED25519 key fingerprint is 69:76:51:39:a4:c6:de:15:7c:50:4b:4a:a7:98:40:5e.
Are you sure you want to continue connecting (yes/no)?
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This prompt is likely to be extremely familiar to you and, most people seem to
just type ‘yes’ to move on with their lives, which defeats the whole purpose of
this prompt.&lt;/p&gt;
&lt;p&gt;If you use &lt;span class="caps"&gt;DNSSEC&lt;/span&gt; you can bypass this prompt entirely by publishing your
server’s key fingerprints via &lt;span class="caps"&gt;DNS&lt;/span&gt; and having &lt;span class="caps"&gt;SSH&lt;/span&gt; authenticate them for you.&lt;/p&gt;
&lt;div class="section" id="generating-your-sshfp-record"&gt;
&lt;h2&gt;Generating your &lt;span class="caps"&gt;SSHFP&lt;/span&gt; record&lt;/h2&gt;
&lt;p&gt;You can get &lt;span class="caps"&gt;SSH&lt;/span&gt; to generate the &lt;span class="caps"&gt;DNS&lt;/span&gt; records for you, log in to the server in
question and run the command below to get similar content.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ssh-keygen -r some.host.tld
some.host.tld IN SSHFP 1 1 c53bfb3d5d053280b17db76909f707f3ac9cbb47
some.host.tld IN SSHFP 1 2 56310ad73fae7a3861f87c246f1fb7c0884706f9a65e94d75be4fb14ca973275
some.host.tld IN SSHFP 4 1 fe3a67a65b71631c8c16c173c09ad9885b72bd4e
some.host.tld IN SSHFP 4 2 7dd9225ef20b806e78fca60935c8b051565ab6077d7735e2c8d23fdfd26289d2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Each line in response contains the following information.&lt;/p&gt;
&lt;table class="docutils"&gt;

&lt;thead&gt;
&lt;tr&gt;&lt;th class="head"&gt;Hostname&lt;/th&gt;
&lt;th class="head"&gt;&lt;span class="caps"&gt;IN&lt;/span&gt; &lt;span class="caps"&gt;SSHFP&lt;/span&gt;&lt;/th&gt;
&lt;th class="head"&gt;Algorithm&lt;/th&gt;
&lt;th class="head"&gt;Fingerprint type&lt;/th&gt;
&lt;th class="head"&gt;Hash&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;some.host.tld&lt;/td&gt;
&lt;td&gt;&lt;span class="caps"&gt;IN&lt;/span&gt; &lt;span class="caps"&gt;SSHFP&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;c53bfb3d5d053280b17db76909f707f3ac9cbb47&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class="section" id="algorithm"&gt;
&lt;h3&gt;Algorithm&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;span class="caps"&gt;RSA&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;DSA&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;ECDSA&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;ED25519&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="fingerprint-type"&gt;
&lt;h3&gt;Fingerprint type&lt;/h3&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;span class="caps"&gt;SHA&lt;/span&gt;-1&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;SHA&lt;/span&gt;-2&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I would advise you do not use &lt;span class="caps"&gt;DSA&lt;/span&gt; or &lt;span class="caps"&gt;ECDSA&lt;/span&gt; algorithms or &lt;span class="caps"&gt;SHA&lt;/span&gt;-1 fingerprints.&lt;/p&gt;
&lt;p&gt;Add the relevant records to your &lt;span class="caps"&gt;DNS&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ssh-config"&gt;
&lt;h2&gt;~/.ssh/config&lt;/h2&gt;
&lt;p&gt;Add the following to your ~/.ssh/config file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Host *
    VerifyHostKeyDNS yes
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This means &lt;span class="caps"&gt;SSH&lt;/span&gt; will always try to validate host keys from &lt;span class="caps"&gt;DNS&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Now, when you try to &lt;span class="caps"&gt;SSH&lt;/span&gt; to a host it should validate against &lt;span class="caps"&gt;SSHFP&lt;/span&gt; records automatically.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ssh -v some.host.tld
...
debug1: found 2 secure fingerprints in DNS
debug1: matching host key fingerprint found in DNS
...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you’re not using &lt;span class="caps"&gt;DNSSEC&lt;/span&gt; then automatic validation will not happen, instead
you will be told that records match but the fingerprints are insecure.&lt;/p&gt;
&lt;/div&gt;
</content><category term="tutorials"></category><category term="dnssec"></category><category term="dns"></category><category term="sshfp"></category><category term="ssh"></category></entry><entry><title>DNSSEC with Rage4 and name.com</title><link href="https://kura.gg/2015/10/18/dnssec-with-rage4-and-name.com/" rel="alternate"></link><published>2015-10-18T03:10:00+01:00</published><updated>2015-10-18T03:10:00+01:00</updated><author><name>kura</name></author><id>tag:kura.gg,2015-10-18:/2015/10/18/dnssec-with-rage4-and-name.com/</id><summary type="html">&lt;p&gt;I currently use &lt;a class="reference external" href="https://www.name.com/"&gt;name.com&lt;/a&gt; as my registrar and I use
&lt;a class="reference external" href="https://rage4.com/"&gt;Rage4&lt;/a&gt; because Rage4 are awesome, they also support &lt;span class="caps"&gt;TLSA&lt;/span&gt;
and &lt;span class="caps"&gt;SSHFP&lt;/span&gt; records and of course, &lt;span class="caps"&gt;DNSSEC&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;I’m writing this up because I found getting &lt;span class="caps"&gt;DNSSEC&lt;/span&gt; from Rage4 to work with
name.com as my registrar was a pain and the name.com support were not very helpful,
linking me to a support article that I’d already read and did not help at all.&lt;/p&gt;
&lt;div class="section" id="rage4-1"&gt;
&lt;h2&gt;Rage4&lt;/h2&gt;
&lt;p&gt;I’m going to assume you’ve already got your records in Rage4, if not, the
interface is really easy so you’ll figure it out.&lt;/p&gt;
&lt;p&gt;Within the management section for your domain’s zone, there is a menu bar of
icons, the icon pictured below enabled &lt;span class="caps"&gt;DNSSEC&lt;/span&gt;.&lt;/p&gt;
&lt;img alt="Enabled DNSSEC" src="/images/rage4-dnssec-icon.png"/&gt;
&lt;p&gt;Clicking this will turn on &lt;span class="caps"&gt;DNSSEC&lt;/span&gt;. You will then have a new icon that will
allow you to display your &lt;span class="caps"&gt;DNSSEC&lt;/span&gt; information.&lt;/p&gt;
&lt;img alt="Display DNSSEC info" src="/images/rage4-dnssec-info-icon.png"/&gt;
&lt;p&gt;Clicking this icon …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;I currently use &lt;a class="reference external" href="https://www.name.com/"&gt;name.com&lt;/a&gt; as my registrar and I use
&lt;a class="reference external" href="https://rage4.com/"&gt;Rage4&lt;/a&gt; because Rage4 are awesome, they also support &lt;span class="caps"&gt;TLSA&lt;/span&gt;
and &lt;span class="caps"&gt;SSHFP&lt;/span&gt; records and of course, &lt;span class="caps"&gt;DNSSEC&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;I’m writing this up because I found getting &lt;span class="caps"&gt;DNSSEC&lt;/span&gt; from Rage4 to work with
name.com as my registrar was a pain and the name.com support were not very helpful,
linking me to a support article that I’d already read and did not help at all.&lt;/p&gt;
&lt;div class="section" id="rage4-1"&gt;
&lt;h2&gt;Rage4&lt;/h2&gt;
&lt;p&gt;I’m going to assume you’ve already got your records in Rage4, if not, the
interface is really easy so you’ll figure it out.&lt;/p&gt;
&lt;p&gt;Within the management section for your domain’s zone, there is a menu bar of
icons, the icon pictured below enabled &lt;span class="caps"&gt;DNSSEC&lt;/span&gt;.&lt;/p&gt;
&lt;img alt="Enabled DNSSEC" src="/images/rage4-dnssec-icon.png"/&gt;
&lt;p&gt;Clicking this will turn on &lt;span class="caps"&gt;DNSSEC&lt;/span&gt;. You will then have a new icon that will
allow you to display your &lt;span class="caps"&gt;DNSSEC&lt;/span&gt; information.&lt;/p&gt;
&lt;img alt="Display DNSSEC info" src="/images/rage4-dnssec-info-icon.png"/&gt;
&lt;p&gt;Clicking this icon will give you a window that is similar to the image below,
containing all of the &lt;span class="caps"&gt;DNSSEC&lt;/span&gt; info you need. You will also have several extra
fields but you’ll only need the ones shown below.&lt;/p&gt;
&lt;img alt="DNSSEC info" src="/images/rage4-dnssec-info.png"/&gt;
&lt;/div&gt;
&lt;div class="section" id="name-com-1"&gt;
&lt;h2&gt;name.com&lt;/h2&gt;
&lt;p&gt;With the information from Rage4, you now need to go to name.com and configure
&lt;span class="caps"&gt;DNSSEC&lt;/span&gt; on your registrar.
&lt;a class="reference external" href="https://www.name.com/support/articles/205439058-DNSSEC"&gt;This support page&lt;/a&gt;
will guide you through their interface.&lt;/p&gt;
&lt;p&gt;The form is slightly confusing since it has different naming conventions than
the information provided by Rage4.&lt;/p&gt;
&lt;p&gt;Below is an image of the form with pre-filled data taken from the previous
image from Rage4.&lt;/p&gt;
&lt;img alt="Pre-filled DNSSEC form" src="/images/name.com-dnssec-form.png"/&gt;
&lt;p&gt;You can fill this form in and submit it for both type 1 (&lt;span class="caps"&gt;RSASHA1&lt;/span&gt;) and type 2
(&lt;span class="caps"&gt;RSASHA256&lt;/span&gt;.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="testing"&gt;
&lt;h2&gt;Testing&lt;/h2&gt;
&lt;p&gt;It may take some time for your &lt;span class="caps"&gt;DNSSEC&lt;/span&gt; information to propagate but you can test
it using &lt;a class="reference external" href="https://dnssec-debugger.verisignlabs.com/"&gt;the debugger from Verisign&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="tutorials"></category><category term="dnssec"></category><category term="dns"></category><category term="rage4. name.com"></category></entry><entry><title>HPKP: HTTP Public Key Pinning with HAProxy</title><link href="https://kura.gg/2015/01/27/hpkp-http-public-key-pinning-with-haproxy/" rel="alternate"></link><published>2015-01-27T07:04:00+00:00</published><updated>2015-01-27T07:04:00+00:00</updated><author><name>kura</name></author><id>tag:kura.gg,2015-01-27:/2015/01/27/hpkp-http-public-key-pinning-with-haproxy/</id><summary type="html">
&lt;p&gt;Public Key Pinning is a security feature that tells a web browser to associate
a public cryptographic key with a server or servers. When a web browser visits
a website for the first time, it will read the &lt;span class="caps"&gt;HPKP&lt;/span&gt; header and store the hashes
for the certificates that are provided. Each time the browser then revisits
that website, the hash from the provided public key is compared against the
stored keys, if the hashes do not match, the web browser should display a warning.&lt;/p&gt;
&lt;p&gt;The &lt;span class="caps"&gt;HPKP&lt;/span&gt; header adds protection against man-in-the-middle (&lt;span class="caps"&gt;MITM&lt;/span&gt;) attacks but,
if incorrectly configured can make your website display a &lt;span class="caps"&gt;TLS&lt;/span&gt; error for a long
period of time.&lt;/p&gt;
&lt;p&gt;Here’s a look at what this website publishes as it’s &lt;span class="caps"&gt;HKPK&lt;/span&gt; header.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Public-Key-Pins: pin-sha256="cYf9T3Il8DaCnaMaM0LatIAru1vqmcu2JSwS7uvyEB0=";
                 pin-sha256="u2q8QZ8Hjp3o/efZjsch9NKjnZmrISJQjwoi/rmsKLU=";
                 max-age=15768000; includeSubDomains
&lt;/pre&gt;
&lt;p&gt;To explain it, the first &lt;cite&gt;pin-sha265&lt;/cite&gt; key is the hash of the public key that …&lt;/p&gt;</summary><content type="html">
&lt;p&gt;Public Key Pinning is a security feature that tells a web browser to associate
a public cryptographic key with a server or servers. When a web browser visits
a website for the first time, it will read the &lt;span class="caps"&gt;HPKP&lt;/span&gt; header and store the hashes
for the certificates that are provided. Each time the browser then revisits
that website, the hash from the provided public key is compared against the
stored keys, if the hashes do not match, the web browser should display a warning.&lt;/p&gt;
&lt;p&gt;The &lt;span class="caps"&gt;HPKP&lt;/span&gt; header adds protection against man-in-the-middle (&lt;span class="caps"&gt;MITM&lt;/span&gt;) attacks but,
if incorrectly configured can make your website display a &lt;span class="caps"&gt;TLS&lt;/span&gt; error for a long
period of time.&lt;/p&gt;
&lt;p&gt;Here’s a look at what this website publishes as it’s &lt;span class="caps"&gt;HKPK&lt;/span&gt; header.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Public-Key-Pins: pin-sha256="cYf9T3Il8DaCnaMaM0LatIAru1vqmcu2JSwS7uvyEB0=";
                 pin-sha256="u2q8QZ8Hjp3o/efZjsch9NKjnZmrISJQjwoi/rmsKLU=";
                 max-age=15768000; includeSubDomains
&lt;/pre&gt;
&lt;p&gt;To explain it, the first &lt;cite&gt;pin-sha265&lt;/cite&gt; key is the hash of the public key that
was used to generate the certificate this website uses, the second &lt;cite&gt;pin-sha256&lt;/cite&gt;
key is the hash of the public key that I have as a backup for when I either need
to generate a new certificate when the old one expires or if something happens
and I need to revoke the old key. &lt;cite&gt;max-age&lt;/cite&gt; tells the browser how long to store
the pin-sha256 details, for me that is 182 days and finally &lt;cite&gt;includeSubDomains&lt;/cite&gt;
tells the browser that these hashes are valid for this domain and all sub domains.&lt;/p&gt;
&lt;div class="section" id="extracting-the-public-key-information"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-1"&gt;Extracting the public key information&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;These commands will extract the public key information and encode it in base64.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;openssl rsa -in KEYFILE -outform der -pubout &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    openssl dgst -sha256 -binary &lt;span class="p"&gt;|&lt;/span&gt; base64
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above command will extract the public key from a private key generated with
&lt;cite&gt;openssl genrsa&lt;/cite&gt;, you can replace rsa with dsa for &lt;span class="caps"&gt;DSA&lt;/span&gt; keys.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;openssl req -in CSRFILE -pubkey -noout &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    openssl rsa -pubin -outform der &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    openssl dgst -sha256 -binary &lt;span class="p"&gt;|&lt;/span&gt; base64
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above command will extract the public key from a &lt;span class="caps"&gt;CSR&lt;/span&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;openssl x509 -in PEMFILE -pubkey -noout &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    openssl rsa -pubin -outform der &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
    openssl dgst -sha256 -binary &lt;span class="p"&gt;|&lt;/span&gt; base64
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And the above command here will extract the public key from an existing x509 certificate.&lt;/p&gt;
&lt;p&gt;All three of the above commands will generate something similar to below.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
writing RSA key
cYf9T3Il8DaCnaMaM0LatIAru1vqmcu2JSwS7uvyEB0=
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="backup-key-s"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-2"&gt;Backup key(s)&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The backup key is actually really simple, you make any number of backups and
store them for future use in case of problems or emergencies with the primary
key file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;openssl genrsa -out backup1.key &lt;span class="m"&gt;4096&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can then use the command in the previous section to get the base64 encoded
public key of this backup key.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-hpkp-header"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-3"&gt;The &lt;span class="caps"&gt;HPKP&lt;/span&gt; header&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
Public-Key-Pins: pin-sha256="PUBLIC_KEY";
                 max-age=EXPIRE_TIME [; includeSubdomains]
                 [; report-uri="REPORT_URI"]
&lt;/pre&gt;
&lt;p&gt;As you can see the header is relatively simple, a definition of each option is below.&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;pin-sha256&lt;/dt&gt;
&lt;dd&gt;The quoted string is the Base64 encoded fingerprint. You can specify this
option multiple times.&lt;/dd&gt;
&lt;dt&gt;max-age&lt;/dt&gt;
&lt;dd&gt;The time, in seconds, that the browser should remember that this site is
only to be accessed using one of the pinned keys.&lt;/dd&gt;
&lt;dt&gt;includeSubdomains &lt;em&gt;optional&lt;/em&gt;&lt;/dt&gt;
&lt;dd&gt;If this optional parameter is specified, this rule applies to all of
the website’s subdomains.&lt;/dd&gt;
&lt;dt&gt;report-uri &lt;em&gt;optional&lt;/em&gt;&lt;/dt&gt;
&lt;dd&gt;If this optional parameter is specified, pin validation failures are
reported to this &lt;span class="caps"&gt;URL&lt;/span&gt;. This won’t be covered here though.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="haproxy"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-4"&gt;HAProxy&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In HAproxy you simply using the &lt;cite&gt;rspadd&lt;/cite&gt; config option inside the &lt;cite&gt;frontend&lt;/cite&gt;
declaration.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
rspadd Public-Key-Pins:\ pin-sha256="KEY=";\ pin-sha256="BACKUP_KEY";\ max-age=15768000;\ includeSubDomains
&lt;/pre&gt;
&lt;/div&gt;
</content><category term="tutorials"></category><category term="haproxy"></category><category term="http"></category><category term="tls"></category><category term="ssl"></category><category term="hpkp"></category><category term="public key pinning"></category></entry><entry><title>Debian Wheezy encrypted Maildir using encfs</title><link href="https://kura.gg/2015/01/26/debian-wheezy-encrypted-maildir-using-encfs/" rel="alternate"></link><published>2015-01-26T21:25:00+00:00</published><updated>2015-01-26T21:25:00+00:00</updated><author><name>kura</name></author><id>tag:kura.gg,2015-01-26:/2015/01/26/debian-wheezy-encrypted-maildir-using-encfs/</id><summary type="html">
&lt;p&gt;This is really a follow up article to &lt;a class="reference external" href="/debian-wheezy-tls-mailserver-with-mysql-clamav-domainkeys-dkim-spf-solr-imap-search/"&gt;one I wrote earlier this year&lt;/a&gt;
but is really applicable to any similar set-up, with some modifications. The
only configuration similarity this requires is that mail for all users is
stored on the filesystem in the same place, rather than to separate locations
i.e. each user having ~/.Maildir.&lt;/p&gt;
&lt;div class="section" id="encfs"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-1"&gt;EncFS&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install encfs
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once installed, you’ll need to make a directory for encrypted and decrypted
mail to live.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo mkdir /var/mail/encrypted /var/mail/decrypted
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You’ll need to set up permissions so your mail user can access the fuse device
and the new directories.&lt;/p&gt;
&lt;p&gt;For me, this user and group are called &lt;em&gt;vmail&lt;/em&gt; but yours may be different.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo chgrp mail /var/mail/decrypted
sudo g+rw /var/mail/decrypted
sudo usermod -a -g fuse vmail
sudo chgrp fuse /dev/fuse
sudo chmod g+rw /dev/fuse
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
&lt;p&gt;This is really a follow up article to &lt;a class="reference external" href="/debian-wheezy-tls-mailserver-with-mysql-clamav-domainkeys-dkim-spf-solr-imap-search/"&gt;one I wrote earlier this year&lt;/a&gt;
but is really applicable to any similar set-up, with some modifications. The
only configuration similarity this requires is that mail for all users is
stored on the filesystem in the same place, rather than to separate locations
i.e. each user having ~/.Maildir.&lt;/p&gt;
&lt;div class="section" id="encfs"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-1"&gt;EncFS&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install encfs
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once installed, you’ll need to make a directory for encrypted and decrypted
mail to live.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo mkdir /var/mail/encrypted /var/mail/decrypted
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You’ll need to set up permissions so your mail user can access the fuse device
and the new directories.&lt;/p&gt;
&lt;p&gt;For me, this user and group are called &lt;em&gt;vmail&lt;/em&gt; but yours may be different.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo chgrp mail /var/mail/decrypted
sudo g+rw /var/mail/decrypted
sudo usermod -a -g fuse vmail
sudo chgrp fuse /dev/fuse
sudo chmod g+rw /dev/fuse
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next you need to build the encrypted volume.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo encfs /var/mail/encrypted /var/mail/decrypted --public
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When prompted for an option, choose &lt;strong&gt;p&lt;/strong&gt; for paranoid mode.&lt;/p&gt;
&lt;p&gt;Finally, &lt;strong&gt;don’t forget to choose a good, strong passphrase. Really this
should be a phrase, not a password.&lt;/strong&gt; It’ll be needed each time you unmount the
volume or reboot the machine.&lt;/p&gt;
&lt;p&gt;It is important to include the &lt;cite&gt;—public&lt;/cite&gt; argument, this forces Fuse to be more
Linux multi-user friendly, it’s kind of a bad option to use due to it being a
hammer option. You could always try to do this properly but for me I think it’s
fine in this case.&lt;/p&gt;
&lt;p&gt;If you unmount the volume for any reason, you can remount it using the same
command that was used to create the volume.&lt;/p&gt;
&lt;p&gt;Now you’ll just want to copy over your existing mail in to &lt;cite&gt;/var/mail/decrypted/&lt;/cite&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dovecot"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-2"&gt;Dovecot&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The final step to getting this to work is to tell Dovecot to use this mail location.&lt;/p&gt;
&lt;p&gt;With my setup there are two pleces to modify this, the first is
&lt;cite&gt;/etc/dovecot/conf.d/10-mail.conf&lt;/cite&gt;. It’s really hard to tell you what this
exact value should be, due to set-ups being different but if you followed my
previous article, it’ll look like below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mail_location = maildir:/var/mail/decrypted/vhosts/%d/%n/maildir
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The other file that is likely to need modification is
&lt;cite&gt;/etc/dovecot/conf.d/auth-sql.conf.ext&lt;/cite&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;userdb {
    driver = static
    args = uid=vmail gid=vmail home=/var/spool/mail/decrypted/vhosts/%d/%n/maildir
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That’s everything you technically need to do, just restart Dovecot.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /etc/init.d/dovecot restart
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="tomcat-solr"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-3"&gt;Tomcat/Solr&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you use Solr for &lt;span class="caps"&gt;IMAP&lt;/span&gt; &lt;span class="caps"&gt;SEARCH&lt;/span&gt;, you’ll just want to move that index inside of
the new directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /etc/init.d/tomcat6 stop
sudo mv /var/lib/solr /var/mail/decrypted/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You’ll need to tell Solr to get it’s data from this directory, this is done in
&lt;cite&gt;/etc/solr/conf/solrconfig.xml&lt;/cite&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;dataDir&amp;gt;&lt;/span&gt;/var/mail/decrypted/solr&lt;span class="nt"&gt;&amp;lt;/dataDir&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Start tomcat again.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /etc/init.d/tomcat6 start
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And finally, it’s always good when you mess with Solr’s indexes like this to
run optimize task.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;curl https://localhost:8080/solr/update?optimize&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="init-d"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-4"&gt;init.d&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Something to remember is that encfs will not mount on it’s own, that’s the
entire point of doing this. This means that Postfix, Dovecot, Solr etc will
not have any data to read on a server reboot.&lt;/p&gt;
&lt;p&gt;I just “fix” this by forcing the init scripts for those processes to look for
the mount point and fail if it’s not there.&lt;/p&gt;
&lt;p&gt;In each init script for Postfix, Dovecot, Tomcat6 and anything else that will
try to read data from /var/mail/decrypted you’ll want to find where
&lt;cite&gt;/lib/lsb/init-functions&lt;/cite&gt; is loaded and a check after it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; ! mount &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s2"&gt;"on /var/mail/decrypted"&lt;/span&gt; &amp;gt; /dev/null
&lt;span class="k"&gt;then&lt;/span&gt;
    log_daemon_msg &lt;span class="s2"&gt;"/var/mail/decrypted not mounted"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    log_end_msg &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It’ll look similar to below if you put it in the right place.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Define LSB log_* functions.&lt;/span&gt;
&lt;span class="c1"&gt;# Depend on lsb-base (&amp;gt;= 3.0-6) to ensure that this file is present.&lt;/span&gt;
. /lib/lsb/init-functions

&lt;span class="k"&gt;if&lt;/span&gt; ! mount &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="s2"&gt;"on /var/mail/decrypted"&lt;/span&gt; &amp;gt; /dev/null
&lt;span class="k"&gt;then&lt;/span&gt;
    log_daemon_msg &lt;span class="s2"&gt;"/var/mail/decrypted not mounted"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    log_end_msg &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="tutorials"></category><category term="debian"></category><category term="wheezy"></category><category term="postfix"></category><category term="dovecot"></category><category term="mail"></category><category term="encrypted"></category></entry><entry><title>Block yourself from emailing someone using Postfix</title><link href="https://kura.gg/2015/01/20/block-yourself-from-emailing-someone-using-postfix/" rel="alternate"></link><published>2015-01-20T23:38:00+00:00</published><updated>2015-01-20T23:38:00+00:00</updated><author><name>kura</name></author><id>tag:kura.gg,2015-01-20:/2015/01/20/block-yourself-from-emailing-someone-using-postfix/</id><summary type="html">&lt;p&gt;I think most of us have been in a position where we really shouldn’t continue
communicating with someone or contact that person when drunk… You know what I
mean, ex relationships etc (it happens.)&lt;/p&gt;
&lt;p&gt;With Postfix you can block yourself from emailing that person again, which is
quite useful.&lt;/p&gt;
&lt;p&gt;In &lt;cite&gt;/etc/postfix/main.cf&lt;/cite&gt; add make the start of your &lt;cite&gt;smtpd_recipient_restrictions&lt;/cite&gt;
look like below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;smtpd_recipient_restrictions =
    check_recipient_access hash:/etc/postfix/recipient_access,
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create a new file &lt;cite&gt;/etc/postfix/recipient_access&lt;/cite&gt; and add the email address you
wish to block, the word &lt;cite&gt;&lt;span class="caps"&gt;REJECT&lt;/span&gt;&lt;/cite&gt; in capitals and optionally; a  reason. Example below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;test@example.com REJECT Don't be silly... You're probably drunk.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For every address you wish to block yourself from emailing, simply add them on
a new line.&lt;/p&gt;
&lt;p&gt;You can see the email is blocked from being sent in &lt;cite&gt;/var/log/mail.log&lt;/cite&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOQUEUE: reject …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;I think most of us have been in a position where we really shouldn’t continue
communicating with someone or contact that person when drunk… You know what I
mean, ex relationships etc (it happens.)&lt;/p&gt;
&lt;p&gt;With Postfix you can block yourself from emailing that person again, which is
quite useful.&lt;/p&gt;
&lt;p&gt;In &lt;cite&gt;/etc/postfix/main.cf&lt;/cite&gt; add make the start of your &lt;cite&gt;smtpd_recipient_restrictions&lt;/cite&gt;
look like below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;smtpd_recipient_restrictions =
    check_recipient_access hash:/etc/postfix/recipient_access,
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create a new file &lt;cite&gt;/etc/postfix/recipient_access&lt;/cite&gt; and add the email address you
wish to block, the word &lt;cite&gt;&lt;span class="caps"&gt;REJECT&lt;/span&gt;&lt;/cite&gt; in capitals and optionally; a  reason. Example below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;test@example.com REJECT Don't be silly... You're probably drunk.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For every address you wish to block yourself from emailing, simply add them on
a new line.&lt;/p&gt;
&lt;p&gt;You can see the email is blocked from being sent in &lt;cite&gt;/var/log/mail.log&lt;/cite&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;NOQUEUE: reject: RCPT from 123.123.123.123: 554 5.7.1 &amp;lt;test@example.com&amp;gt;: Recipient address rejected: Don't be silly... You're probably drunk.; from=&amp;lt;me@domain.tld&amp;gt; to=&amp;lt;test@example.com&amp;gt; proto=ESMTP helo=&amp;lt;[123.123.123.123]&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Each time you change the file, you need to generate a new hashed version and
reload Postfix.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo postmap hash:/etc/postfix/recipient_access
sudo /etc/init.d/postfix reload
&lt;/pre&gt;&lt;/div&gt;
</content><category term="tutorials"></category><category term="postfix"></category><category term="smtp"></category></entry><entry><title>Debian Wheezy TLS mailserver with MySQL, ClamAV, DomainKeys, DKIM, SPF and Solr-powered IMAP SEARCH</title><link href="https://kura.gg/2015/01/03/debian-wheezy-tls-mailserver-with-mysql-clamav-domainkeys-dkim-spf-solr-imap-search/" rel="alternate"></link><published>2015-01-03T19:48:00+00:00</published><updated>2015-01-03T19:48:00+00:00</updated><author><name>kura</name></author><id>tag:kura.gg,2015-01-03:/2015/01/03/debian-wheezy-tls-mailserver-with-mysql-clamav-domainkeys-dkim-spf-solr-imap-search/</id><summary type="html">
&lt;p&gt;This mail platform does use a fair amount of memory, the memory usage is ClamAV
and Solr, the latter being used for &lt;span class="caps"&gt;IMAP&lt;/span&gt; &lt;span class="caps"&gt;SEARCH&lt;/span&gt;. I personally use 2 &lt;span class="caps"&gt;GB&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;I’ll warn you all now, this is a long article.&lt;/p&gt;
&lt;div class="section" id="ssl"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-1"&gt;&lt;span class="caps"&gt;SSL&lt;/span&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo openssl genrsa -out /etc/ssl/private/mail.key 4096
sudo openssl req -new -key /etc/ssl/private/mail.key -out /tmp/mail.csr
sudo openssl x509 -req -days 365 -in /tmp/mail.csr -signkey /etc/ssl/private/mail.key -out /etc/ssl/certs/mail.crt
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="mysql"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-2"&gt;MySQL&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install mysql-server
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You’ll be prompted several times for a password for MySQL during the installation,
just come up with something nice and secure.&lt;/p&gt;
&lt;p&gt;The first thing to set-up will be the MySQL database and schema.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysql -u root -p
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next up, create the database.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CREATE DATABASE mailserver CHARACTER SET utf8 COLLATE utf8_general_ci;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And grant some privileges, you …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
&lt;p&gt;This mail platform does use a fair amount of memory, the memory usage is ClamAV
and Solr, the latter being used for &lt;span class="caps"&gt;IMAP&lt;/span&gt; &lt;span class="caps"&gt;SEARCH&lt;/span&gt;. I personally use 2 &lt;span class="caps"&gt;GB&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;I’ll warn you all now, this is a long article.&lt;/p&gt;
&lt;div class="section" id="ssl"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-1"&gt;&lt;span class="caps"&gt;SSL&lt;/span&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo openssl genrsa -out /etc/ssl/private/mail.key 4096
sudo openssl req -new -key /etc/ssl/private/mail.key -out /tmp/mail.csr
sudo openssl x509 -req -days 365 -in /tmp/mail.csr -signkey /etc/ssl/private/mail.key -out /etc/ssl/certs/mail.crt
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="mysql"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-2"&gt;MySQL&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install mysql-server
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You’ll be prompted several times for a password for MySQL during the installation,
just come up with something nice and secure.&lt;/p&gt;
&lt;p&gt;The first thing to set-up will be the MySQL database and schema.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysql -u root -p
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next up, create the database.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CREATE DATABASE mailserver CHARACTER SET utf8 COLLATE utf8_general_ci;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And grant some privileges, you’ll need to set a password yourself.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;GRANT ALL PRIVILEGES ON mailserver.* TO 'mailuser'@'localhost' IDENTIFIED BY '&amp;lt;PASSWORD_HERE&amp;gt;';
FLUSH PRIVILEGES;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, set up the schema.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CREATE TABLE `virtual_domains` (
    `id` int(11) NOT NULL auto_increment,
    `name` varchar(50) NOT NULL,
    PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE `virtual_users` (
    `id` int(11) NOT NULL auto_increment,
    `domain_id` int(11) NOT NULL,
    `password` varchar(106) NOT NULL,
    `email` varchar(100) NOT NULL,
    PRIMARY KEY (`id`),
    UNIQUE KEY `email` (`email`),
    FOREIGN KEY (domain_id) REFERENCES virtual_domains(id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE `virtual_aliases` (
    `id` int(11) NOT NULL auto_increment,
    `domain_id` int(11) NOT NULL,
    `source` varchar(100) NOT NULL,
    `destination` varchar(100) NOT NULL,
    PRIMARY KEY (`id`),
    FOREIGN KEY (domain_id) REFERENCES virtual_domains(id) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, add a domain name, user and alias.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;INSERT INTO virtual_domains (name) VALUES ('example.com');
INSERT INTO virtual_users (domain_id, password, email) VALUES (1, ENCRYPT('&amp;lt;PASSWORD_HERE&amp;gt;', CONCAT('$6$', SUBSTRING(SHA(RAND()), -16))), 'user@example.com');
INSERT INTO virtual_aliases (domain_id, source, destination) VALUES (1, 'alias@exampe.com', 'user@example.com');
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Drop back to the Bash prompt using &lt;cite&gt;&lt;span class="caps"&gt;CTRL&lt;/span&gt;-D&lt;/cite&gt; or with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;EXIT
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="postfix"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-3"&gt;Postfix&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install postfix postfix-mysql postfix-policyd-spf-python
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When prompted for a Postfix configuration, just select &lt;cite&gt;Internet Site&lt;/cite&gt;. You’ll
also be prompted for a mail name, I’ll be using &lt;cite&gt;mail.example.com&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;Back up the original &lt;cite&gt;main.cf&lt;/cite&gt; and &lt;cite&gt;master.cf&lt;/cite&gt; for Postfix.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo mv /etc/postfix/main.cf{,.orig}
sudo mv /etc/postfix/master.cf{,.org}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create a new &lt;cite&gt;/etc/postfix/main.cf&lt;/cite&gt; with the content below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;smtpd_banner = $myhostname ESMTP
biff = no
append_dot_mydomain = no
readme_directory = no

smtpd_use_tls = yes
smtpd_tls_cert_file = /etc/ssl/certs/mail.crt
smtpd_tls_key_file = /etc/ssl/private/mail.key
smtpd_tls_auth_only = yes
smtpd_tls_security_level = encrypt
smtpd_tls_session_cache_database = btree:${data_directory}/smtpd_scache
smtpd_tls_session_cache_timeout = 3600s
smtpd_helo_required = yes
smtpd_tls_received_header = yes
smtpd_tls_security_level = may
smtpd_tls_mandatory_ciphers = high
smtpd_tls_mandatory_exclude_ciphers = aNULL, MD5, RC4
smtpd_tls_mandatory_protocols = TLSv1
smtpd_tls_loglevel = 1
smtpd_sasl_type = dovecot
smtpd_sasl_path = private/auth
smtpd_sasl_auth_enable = yes
smtpd_sasl_security_options = noanonymous
smtpd_sasl_local_domain = $myhostname

smtp_use_tls = yes
smtp_tls_cert_file = /etc/ssl/certs/mail.crt
smtp_tls_key_file = /etc/ssl/private/mail.key

tls_random_source = dev:/dev/urandom
broken_sasl_auth_clients = yes

smtpd_recipient_restrictions =
    permit_mynetworks,
    permit_sasl_authenticated,
    reject_unauth_destination,
    reject_unknown_sender_domain,
    check_policy_service unix:private/policy-spf

smtpd_sender_restrictions =
    permit_sasl_authenticated,
    permit_mynetworks

policy-spf_time_limit = 3600s
myhostname = mail.example.com
myorigin = /etc/mailname
mydestination = localhost
relayhost =
mynetworks = 127.0.0.0/8 [::ffff:127.0.0.0]/104 [::1]/128
mailbox_size_limit = 0
recipient_delimiter = +
inet_interfaces = all

virtual_transport = lmtp:unix:private/dovecot-lmtp
virtual_mailbox_domains = mysql:/etc/postfix/mysql-virtual-mailbox-domains.cf
virtual_mailbox_maps = mysql:/etc/postfix/mysql-virtual-mailbox-maps.cf
virtual_alias_maps = mysql:/etc/postfix/mysql-virtual-alias-maps.cf

smtpd_recipient_limit = 2000
smtpd_milters =
    unix:clamav/clamav-milter.ctl,
    unix:spamass/spamass.sock
milter_connect_macros = j {daemon_name} v {if_name} _
milter_default_action = tempfail
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create a new &lt;cite&gt;/etc/postfix/master.cf&lt;/cite&gt; and make it look like below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;smtp      inet  n       -       -       -       -       smtpd
    -o strict_rfc821_envelopes=yes
submission inet n       -       -       -       -       smtpd
    -o syslog_name=postfix/submission
    -o smtpd_tls_security_level=encrypt
    -o smtpd_sasl_auth_enable=yes
    -o content_filter=dksign:[127.0.0.1]:10027
    -o smtpd_client_restrictions=permit_sasl_authenticated,reject
    -o milter_macro_daemon_name=ORIGINATING
smtps     inet  n       -       -       -       -       smtpd
    -o syslog_name=postfix/smtps
    -o smtpd_tls_wrappermode=yes
    -o smtpd_sasl_auth_enable=yes
    -o content_filter=dksign:[127.0.0.1]:10027
    -o smtpd_client_restrictions=permit_sasl_authenticated,reject
    -o milter_macro_daemon_name=ORIGINATING
pickup    fifo  n       -       -       60      1       pickup
cleanup   unix  n       -       -       -       0       cleanup
qmgr      fifo  n       -       n       300     1       qmgr
tlsmgr    unix  -       -       -       1000?   1       tlsmgr
rewrite   unix  -       -       -       -       -       trivial-rewrite
bounce    unix  -       -       -       -       0       bounce
defer     unix  -       -       -       -       0       bounce
trace     unix  -       -       -       -       0       bounce
verify    unix  -       -       -       -       1       verify
flush     unix  n       -       -       1000?   0       flush
proxymap  unix  -       -       n       -       -       proxymap
proxywrite unix -       -       n       -       1       proxymap
smtp      unix  -       -       -       -       -       smtp
relay     unix  -       -       -       -       -       smtp
showq     unix  n       -       -       -       -       showq
error     unix  -       -       -       -       -       error
retry     unix  -       -       -       -       -       error
discard   unix  -       -       -       -       -       discard
local     unix  -       n       n       -       -       local
virtual   unix  -       n       n       -       -       virtual
lmtp      unix  -       -       -       -       -       lmtp
anvil     unix  -       -       -       -       1       anvil
scache    unix  -       -       -       -       1       scache
maildrop  unix  -       n       n       -       -       pipe
    flags=DRhu user=vmail argv=/usr/bin/maildrop -d ${recipient}
uucp      unix  -       n       n       -       -       pipe
    flags=Fqhu user=uucp argv=uux -r -n -z -a$sender - $nexthop!rmail ($recipient)
ifmail    unix  -       n       n       -       -       pipe
    flags=F user=ftn argv=/usr/lib/ifmail/ifmail -r $nexthop ($recipient)
bsmtp     unix  -       n       n       -       -       pipe
    flags=Fq. user=bsmtp argv=/usr/lib/bsmtp/bsmtp -t$nexthop -f$sender $recipient
scalemail-backend unix      -       n       n       -       2       pipe
    flags=R user=scalemail argv=/usr/lib/scalemail/bin/scalemail-store ${nexthop} ${user} ${extension}
mailman   unix  -       n       n       -       -       pipe
    flags=FR user=list argv=/usr/lib/mailman/bin/postfix-to-mailman.py
    ${nexthop} ${user}
policy-spf unix -       n       n       -       -       spawn
    user=nobody argv=/usr/bin/policyd-spf
dksign    unix  -       -       n       -       4       smtp
    -o smtp_send_xforward_command=yes
    -o smtp_discard_ehlo_keywords=8bitmime,starttls
127.0.0.1:10028 inet n  -        n      -       10      smtpd
    -o content_filter=
    -o receive_override_options=no_unknown_recipient_checks,no_header_body_checks
    -o smtpd_helo_restrictions=
    -o smtpd_client_restrictions=
    -o smtpd_sender_restrictions=
    -o smtpd_recipient_restrictions=permit_mynetworks,reject
    -o mynetworks=127.0.0.0/8
    -o smtpd_authorized_xforward_hosts=127.0.0.0/8
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next you’ll create the config files to query MySQL.&lt;/p&gt;
&lt;p&gt;Create &lt;cite&gt;/etc/postfix/mysql-virtual-mailbox-domains.cf&lt;/cite&gt; with the content below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user = mailuser
password = &amp;lt;MYSQL_PASSWORD&amp;gt;
hosts = 127.0.0.1
dbname = mailserver
query = SELECT 1 FROM virtual_domains WHERE name='%s'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create &lt;cite&gt;/etc/postfix/mysql-virtual-mailbox-maps.cf&lt;/cite&gt; with the content below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user = mailuser
password = &amp;lt;MYSQL_PASSWORD&amp;gt;
hosts = 127.0.0.1
dbname = mailserver
query = SELECT 1 FROM virtual_users WHERE email='%s'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create &lt;cite&gt;/etc/postfix/mysql-virtual-alias-maps.cf&lt;/cite&gt; with the content below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;user = mailuser
password = &amp;lt;MYSQL_PASSWORD&amp;gt;
hosts = 127.0.0.1
dbname = mailserver
query = SELECT destination FROM virtual_aliases WHERE source='%s'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Reload Postfix and test that the domain and users work.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /etc/init.d/postfix reload
postmap -q example.com mysql:/etc/postfix/mysql-virtual-mailbox-domains.cf
postmap -q user@example.com mysql:/etc/postfix/mysql-virtual-mailbox-maps.cf
postmap -q alias@example.com mysql:/etc/postfix/mysql-virtual-alias-maps.cf
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You should see output similar to below&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;1
1
user@example.com
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="dovecot"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-4"&gt;Dovecot&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install dovecot-core dovecot-imapd dovecot-lmtpd dovecot-mysql
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Backup the default Dovecot config files.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo cp /etc/dovecot/dovecot.conf{,.orig}
sudo cp /etc/dovecot/conf.d/10-mail.conf{,.orig}
sudo cp /etc/dovecot/conf.d/10-auth.conf{,.orig}
sudo cp /etc/dovecot/dovecot-sql.conf.ext{,.orig}
sudo cp /etc/dovecot/conf.d/10-master.conf{,.orig}
sudo cp /etc/dovecot/conf.d/10-ssl.conf {,.orig}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For each domain you want to serve mail for, you will need to create a
directory for it to be stored in.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo mkdir -p /var/mail/vhosts/example.com
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add a user and group for the mail and give permissions on the mail directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo groupadd -g 5000 vmail
sudo useradd -g vmail -u 5000 vmail -d /var/mail
sudo chown -R vmail:vmail /var/mail
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Modify the line in &lt;cite&gt;/etc/dovecot/dovecot.conf&lt;/cite&gt; so it looks like below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;!include_try /usr/share/dovecot/protocols.d/*.protocol
protocols = imap lmtp
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Modify &lt;cite&gt;/etc/dovecot/dovecot.conf&lt;/cite&gt; so it has the following lines.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mail_location = maildir:/var/mail/vhosts/%d/%n
mail_privileged_group = mail
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Edit &lt;cite&gt;/etc/dovecot/conf.d/10-auth.conf&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;You’ll need to uncomment the following line.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;disable_plaintext_auth = yes
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Set &lt;cite&gt;auth_mechanisms&lt;/cite&gt; to look like below&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;auth_mechanisms = plain login
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next up, make sure the include lines look like below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#!include auth-system.conf.ext
!include auth-sql.conf.ext
#!include auth-ldap.conf.ext
#!include auth-passwdfile.conf.ext
#!include auth-checkpassword.conf.ext
#!include auth-vpopmail.conf.ext
#!include auth-static.conf.ext
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create &lt;cite&gt;/etc/dovecot/conf.d/auth-sql.conf.ext&lt;/cite&gt; and add the content below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;passdb {
    driver = sql
    args = /etc/dovecot/dovecot-sql.conf.ext
}

userdb {
    driver = static
    args = uid=vmail gid=vmail home=/var/mail/vhosts/%d/%n
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Edit &lt;cite&gt;/etc/dovecot/dovecot-sql.conf.ext&lt;/cite&gt; and set the following values.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;driver = mysql
connect = host=127.0.0.1 dbname=mailserver user=mailuser password=&amp;lt;PASSWORD&amp;gt;
default_pass_scheme = SHA512-CRYPT
password_query = SELECT email as user, password FROM virtual_users WHERE email='%u'
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add the following content to &lt;cite&gt;/etc/dovecot/conf.d/10-master.conf&lt;/cite&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;service imap-login {
    inet_listener imaps {
        port = 993
        ssl = yes
    }
}

service lmtp {
    unix_listener /var/spool/postfix/private/dovecot-lmtp {
        mode = 0600
        user = postfix
        group = postfix
    }
}

service auth {
    unix_listener /var/spool/postfix/private/auth {
        mode = 0666
        user = postfix
        group = postfix
    }
    unix_listener auth-userdb {
        mode = 0600
        user = vmail
    }
    user = dovecot
}

service auth-worker {
    user = vmail
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Modify &lt;cite&gt;/etc/dovecot/conf.d/10-ssl.conf&lt;/cite&gt; to have the following lines.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssl_cert = &amp;lt;/etc/ssl/certs/mail.crt
ssl_key = &amp;lt;/etc/ssl/private/mail.key
ssl = required
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For fulltext searching, you’ll want to enable wheezy-backports and install
&lt;cite&gt;dovecot-solr&lt;/cite&gt; from there.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo echo "deb https://ftp.debian.org/debian wheezy-backports main contrib non-free" &amp;gt;&amp;gt; /etc/apt/sources.list
sudo apt-get update
sudo apt-get install dovecot-solr solr-tomcat
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There is a bug in &lt;cite&gt;dovecot-solr&lt;/cite&gt; where it doesn’t set up the Solr schema for,
you’ll have to do it by downloading &lt;cite&gt;orig.tar.gz&lt;/cite&gt; from &lt;a class="reference external" href="https://packages.debian.org/wheezy/dovecot-solr"&gt;the Debian website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Extract the archive and copy the included schema in to Solr.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo cp docs/solr-schema.xml /etc/solr/conf/schema.xml
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For security reasons, modify &lt;cite&gt;/etc/tomcat6/server.xml&lt;/cite&gt; to have the local address
in the Connectory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;Connector address="127.0.0.1" port="8080" protocol="HTTP/1.1"
           connectionTimeout="20000"
           URIEncoding="UTF-8"
           redirectPort="8443" /&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Modify &lt;cite&gt;/etc/dovecot/conf.d/20-imap.conf&lt;/cite&gt; to have the following line.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mail_plugins = $mail_plugins fts fts_solr
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next up, add the following lines to &lt;cite&gt;/etc/dovecot/conf.d/90-plugin.conf&lt;/cite&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;plugin {
    fts = solr
    fts_solr = break-imap-search url=https://localhost:8080/solr/
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create &lt;cite&gt;/etc/cron.daily/solr&lt;/cite&gt; with the following contents.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#!/bin/sh
curl https://localhost:8080/solr/update?optimize=true
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create &lt;cite&gt;/etc/cron.hourly/solr&lt;/cite&gt; with the following contents.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#!/bin/sh
curl https://localhost:8080/solr/update?commit=true
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Make both files executable.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo chmod +x /etc/cron.daily/solr /etc/cron.hourly/solr
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Solr uses soft commits when it indexes new mail, this only commits to memory so
a cron task is good for committing every hour and a daily optimize for keeping
things fast.&lt;/p&gt;
&lt;p&gt;That’s all for Dovecot and Solr, so restart them.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /etc/init.d/dovecot restart
sudo /etc/init.d/tomcat6 restart
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="clamav-and-spamassassin-milters"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-5"&gt;ClamAV and SpamAssassin milters&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install clamav-milter clamav-unofficial-sigs spamass-milter
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You’ll likely get an error when installing these, don’t worry.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo freshclam
sudo /etc/init.d/clamav-daemon start
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Uncomment the last line in &lt;cite&gt;/etc/default/clamav-milter&lt;/cite&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;SOCKET_RWGROUP=postfix
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now create somewhere for the clamav-milter socket to reside.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo mkdir /var/spool/postfix/clamav
sudo chown clamav /var/spool/postfix/clamav
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Edit &lt;cite&gt;/etc/clamav/clamav-milter.conf&lt;/cite&gt; to look like below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;MilterSocket /var/spool/postfix/clamav/clamav-milter.ctl
FixStaleSocket true
User clamav
AllowSupplementaryGroups true
ReadTimeout 120
Foreground false
PidFile /var/run/clamav/clamav-milter.pid
ClamdSocket unix:/var/run/clamav/clamd.ctl
OnClean Accept
OnInfected Reject
OnFail Defer
AddHeader Replace
LogSyslog false
LogFacility LOG_LOCAL6
LogVerbose false
LogInfected Off
LogClean Off
LogRotate true
MaxFileSize 100M
SupportMultipleRecipients true
RejectMsg Rejecting harmful e-mail: %v found.
TemporaryDirectory /tmp
LogFile /var/log/clamav/clamav-milter.log
LogTime true
LogFileUnlock false
LogFileMaxSize 0
MilterSocketGroup clamav
MilterSocketMode 666
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Edit &lt;cite&gt;/etc/default/spamass-milter&lt;/cite&gt; and add the following line.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;OPTIONS="-u spamass-milter -i 127.0.0.1 -m -r -1 -I"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Edit &lt;cite&gt;/etc/default/spamassassin&lt;/cite&gt; to have the following values.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ENABLED=1
CRON=1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Update SpamAssassin and start the service.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo sa-update
sudo /etc/init.d/spamassassin start
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="dkimproxy"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-6"&gt;DKIMProxy&lt;/a&gt;&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install dkimproxy
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create a private and public keypair.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo openssl genrsa -out /etc/dkimproxy/private.key 1024
sudo openssl rsa -in /etc/dkimproxy/private.key -out /etc/dkimproxy/public.key -pubout -outform PEM
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Modify &lt;cite&gt;/etc/dkimproxy/dkimproxy_in.conf&lt;/cite&gt; to look like below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;listen 127.0.0.1:10025
relay 27.0.0.1:10026
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Modify &lt;cite&gt;/etc/dkimproxy/dkimproxy_out.conf&lt;/cite&gt; to look like below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;listen 127.0.0.1:10027
relay 127.0.0.1:10028
domain example.com
keyfile /etc/dkimproxy/private.key
selector mail
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There seems to be a rather annoying bug where signatures are not modified
based on the config, I found the easiest way to cheat this is to just modify
the init.d file for dkimproxy.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DKIMPROXY_OUT_ARGS="${COMMON_ARGS} --pidfile=${PIDDKIMPROXY_OUT} --min_servers=${DKIMPROXY_OUT_MIN_SERVERS} --domain=example.com --method=simple --conf_file=${DKOUT_CONF} --keyfile=/etc/dkimproxy/private.key --selector=mail --signature=dkim(a=rsa-sha256) --signature=domainkeys(a=rsa-sha1)"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, restart dkimproxy.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/etc/init.d/dkimproxy restart
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="dns"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#toc-entry-7"&gt;&lt;span class="caps"&gt;DNS&lt;/span&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;All that needs to be done now is to create two three records.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;example.com. IN TXT "v=spf1 a mx -all"
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;_domainkey.example.com. IN TXT "o=-;"
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mail._domainkey.example.com. IN TXT "k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDGTLLBUsIH..."
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The contents of the latter record are the public key from &lt;cite&gt;/etc/dkimproxy/public.key&lt;/cite&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="tutorials"></category><category term="debian"></category><category term="wheezy"></category><category term="postfix"></category><category term="dovecot"></category><category term="clamav"></category><category term="domainkeys"></category><category term="dkim"></category><category term="spf"></category><category term="imap"></category></entry><entry><title>haproxy OCSP stapling</title><link href="https://kura.gg/2014/07/02/haproxy-ocsp-stapling/" rel="alternate"></link><published>2014-07-02T23:45:00+01:00</published><updated>2014-07-02T23:45:00+01:00</updated><author><name>kura</name></author><id>tag:kura.gg,2014-07-02:/2014/07/02/haproxy-ocsp-stapling/</id><summary type="html">
&lt;p&gt;With haproxy 1.5 finally being released we are lucky enough to get a basic
interface around &lt;span class="caps"&gt;OCSP&lt;/span&gt; stapling.&lt;/p&gt;
&lt;p&gt;Sadly this interface really is quite basic and it’s not the simplest thing to
figure out without some trial and error.&lt;/p&gt;
&lt;p&gt;According to the official documentation, you should be able to pipe your
&lt;span class="caps"&gt;OCSP&lt;/span&gt; response to haproxy via it’s stats socket. Sadly I could not get this to
work properly at all, so I decided to swap the piping for a file and reload solution.&lt;/p&gt;
&lt;p&gt;You’ll need to get a copy of your certification authorities root certificate
to proceed with this.&lt;/p&gt;
&lt;div class="section" id="looking-for-your-ocsp-uri"&gt;
&lt;h2&gt;Looking for your &lt;span class="caps"&gt;OCSP&lt;/span&gt; &lt;span class="caps"&gt;URI&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;If you don’t know the &lt;span class="caps"&gt;URI&lt;/span&gt; you need to do an &lt;span class="caps"&gt;OCSP&lt;/span&gt; lookup against, you can find
it in your certificate data.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;openssl x509 -in /path/to/your/certificate -text
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Inside the output, look for the following section.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Authority Information Access …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">
&lt;p&gt;With haproxy 1.5 finally being released we are lucky enough to get a basic
interface around &lt;span class="caps"&gt;OCSP&lt;/span&gt; stapling.&lt;/p&gt;
&lt;p&gt;Sadly this interface really is quite basic and it’s not the simplest thing to
figure out without some trial and error.&lt;/p&gt;
&lt;p&gt;According to the official documentation, you should be able to pipe your
&lt;span class="caps"&gt;OCSP&lt;/span&gt; response to haproxy via it’s stats socket. Sadly I could not get this to
work properly at all, so I decided to swap the piping for a file and reload solution.&lt;/p&gt;
&lt;p&gt;You’ll need to get a copy of your certification authorities root certificate
to proceed with this.&lt;/p&gt;
&lt;div class="section" id="looking-for-your-ocsp-uri"&gt;
&lt;h2&gt;Looking for your &lt;span class="caps"&gt;OCSP&lt;/span&gt; &lt;span class="caps"&gt;URI&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;If you don’t know the &lt;span class="caps"&gt;URI&lt;/span&gt; you need to do an &lt;span class="caps"&gt;OCSP&lt;/span&gt; lookup against, you can find
it in your certificate data.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;openssl x509 -in /path/to/your/certificate -text
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Inside the output, look for the following section.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Authority Information Access:
    CA Issuers - URI:https://secure.globalsign.com/cacert/gsdomainvalsha2g2r1.crt
    OCSP - URI:https://ocsp2.globalsign.com/gsdomainvalsha2g2
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="testing-ocsp-response"&gt;
&lt;h2&gt;Testing &lt;span class="caps"&gt;OCSP&lt;/span&gt; response&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;openssl ocsp -noverify -issuer /path/to/your/ca/root/certificate &lt;span class="se"&gt;\&lt;/span&gt;
             -cert /path/to/your/certificate -url &lt;span class="s2"&gt;"OCSP_URI"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You should see a response like the one below.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
/path/to/your/certificate: good
This Update: Jul  2 23:01:54 2014 GMT
&lt;/pre&gt;
&lt;p&gt;If you get any errors from this, you may need to try these additional arguments;&lt;/p&gt;
&lt;div class="section" id="disable-nonces"&gt;
&lt;h3&gt;Disable nonces&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
-no_nonce
&lt;/pre&gt;
&lt;p&gt;This will disable nonces, some servers are not able to handle nonces so you may
need to disable them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="send-a-host-header"&gt;
&lt;h3&gt;Send a “Host” header&lt;/h3&gt;
&lt;p&gt;If you get an &lt;span class="caps"&gt;HTTP&lt;/span&gt; status like a 403 or 404 then you may need to specify
a host header.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
-header Host OCSP_URI_DOMAIN
&lt;/pre&gt;
&lt;p&gt;For my certificate the &lt;span class="caps"&gt;OCSP&lt;/span&gt; &lt;span class="caps"&gt;URI&lt;/span&gt; is &lt;em&gt;https://ocsp2.globalsign.com/gsdomainvalsha2g2&lt;/em&gt;
so the Host header would be like below.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
-header Host ocsp2.globalsign.com
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="proving-ocsp-data-to-haproxy"&gt;
&lt;h2&gt;Proving &lt;span class="caps"&gt;OCSP&lt;/span&gt; data to haproxy&lt;/h2&gt;
&lt;p&gt;If the above testing was all &lt;span class="caps"&gt;OK&lt;/span&gt;, we can now actually use the data.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;openssl ocsp -noverify -issuer /path/to/your/ca/root/certificate &lt;span class="se"&gt;\&lt;/span&gt;
             -cert /path/to/your/certificate &lt;span class="se"&gt;\&lt;/span&gt;
             -url &lt;span class="s2"&gt;"OCSP_URI"&lt;/span&gt; -respout /path/to/your/certificate.ocsp
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;One thing to note is, if your certificate file is &lt;em&gt;/etc/ssl/certs/kura.gg.crt&lt;/em&gt;
then you must set -respout to &lt;em&gt;/etc/ssl/certs/kura.gg.crt.ocsp&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;You can now simply reload haproxy and check your &lt;span class="caps"&gt;OCSP&lt;/span&gt; staping is working.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="testing-ocsp-from-haproxy"&gt;
&lt;h2&gt;Testing &lt;span class="caps"&gt;OCSP&lt;/span&gt; from haproxy&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;openssl s_client -connect domain.tld:443 -tls1 -tlsextdebug -status
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Near the top of the response you’ll see your &lt;span class="caps"&gt;OCSP&lt;/span&gt; information.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
OCSP response:
======================================
OCSP Response Data:
    OCSP Response Status: successful (0x0)
    Response Type: Basic OCSP Response
    Version: 1 (0x0)
    Responder Id: DFDE6C7C4B6C4098FA6992156D2B082875FD6443
    Produced At: Jul  2 22:58:27 2014 GMT
    Responses:
    Certificate ID:
        Hash Algorithm: sha1
        Issuer Name Hash: D1F1B576F9EEC0C10F7AFC7C3124A9C3625D7C61
        Issuer Key Hash: EA4E7CD4802DE5158186268C826DC098A4CF970F
        Serial Number: 1121C92209F7127584AAFEB2B08ECDD30A9D
    Cert Status: good
    This Update: Jul  2 22:58:27 2014 GMT
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="updating-ocsp"&gt;
&lt;h2&gt;Updating &lt;span class="caps"&gt;OCSP&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;The simplest way of doing this is by using cron.daily or something similar
to update your certificate.ocsp file.&lt;/p&gt;
&lt;/div&gt;
</content><category term="tutorials"></category><category term="haproxy"></category><category term="ssl"></category><category term="ocsp"></category><category term="ocsp stapling"></category></entry><entry><title>haproxy stateful SSL session resumption</title><link href="https://kura.gg/2014/02/22/haproxy-stateful-ssl-session-resumption/" rel="alternate"></link><published>2014-02-22T05:10:00+00:00</published><updated>2014-02-22T05:10:00+00:00</updated><author><name>kura</name></author><id>tag:kura.gg,2014-02-22:/2014/02/22/haproxy-stateful-ssl-session-resumption/</id><content type="html">
&lt;p&gt;By default haproxy enables stateless &lt;span class="caps"&gt;SSL&lt;/span&gt; session resumption, but you can enable
stateful session resumption in accordance with
&lt;a class="reference external" href="https://www.ietf.org/rfc/rfc5077.txt"&gt;&lt;span class="caps"&gt;RFC&lt;/span&gt; 5077&lt;/a&gt;. This functionality, like
the &lt;span class="caps"&gt;SSL&lt;/span&gt; handling it relies on is only available from haproxy 1.5.&lt;/p&gt;
&lt;div class="section" id="configuration"&gt;
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;The option to enable stateful &lt;span class="caps"&gt;SSL&lt;/span&gt; session resumption is as below&lt;/p&gt;
&lt;pre class="literal-block"&gt;
no-tls-tickets
&lt;/pre&gt;
&lt;p&gt;You will need to add it in to your bind line, like below&lt;/p&gt;
&lt;pre class="literal-block"&gt;
bind 0.0.0.0:443 ssl ... no-tls-tickets
&lt;/pre&gt;
&lt;/div&gt;
</content><category term="tutorials"></category><category term="haproxy"></category><category term="ssl"></category></entry><entry><title>kura.gg’s A* SSL rating</title><link href="https://kura.gg/2014/02/02/kura.gg-a-star-ssl-rating/" rel="alternate"></link><published>2014-02-02T15:18:00+00:00</published><updated>2014-02-02T15:18:00+00:00</updated><author><name>kura</name></author><id>tag:kura.gg,2014-02-02:/2014/02/02/kura.gg-a-star-ssl-rating/</id><summary type="html">
&lt;p&gt;I am a firm believer in using &lt;span class="caps"&gt;SSL&lt;/span&gt; as much as possible, for me that is pretty
much everywhere and, thanks to the wonderful guys at
&lt;a class="reference external" href="https://www.globalsign.com/"&gt;GlobalSign&lt;/a&gt;, most of
my &lt;span class="caps"&gt;SSL&lt;/span&gt; certificates are free becauses my projects are all open source.&lt;/p&gt;
&lt;p&gt;I used a blog post by &lt;a class="reference external" href="https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/"&gt;Hynek Schlawack&lt;/a&gt;
as a base for my &lt;span class="caps"&gt;SSL&lt;/span&gt; setup, he is keeping this article up-to-date as much as
possible so it should be a great source for any security conscious people that
would like to know more and get good explanations about each part.&lt;/p&gt;
&lt;p&gt;Let’s take a brief look at how this website achieves it’s A* rating.&lt;/p&gt;
&lt;div class="section" id="key"&gt;
&lt;h2&gt;Key&lt;/h2&gt;
&lt;p&gt;I use a 4096 bit &lt;span class="caps"&gt;RSA&lt;/span&gt; key that is no a &lt;a class="reference external" href="https://wiki.debian.org/SSLkeys#Identifying_Weak_Keys"&gt;Debian weak key&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="protcols"&gt;
&lt;h2&gt;Protcols&lt;/h2&gt;
&lt;p&gt;I do not support SSLv2 or SSLv3 but I do support much stronger protocols;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;span class="caps"&gt;TLS&lt;/span&gt; 1.2,&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;TLS&lt;/span&gt; 1.1 and,&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;TLS&lt;/span&gt; 1.0.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="dhparam"&gt;
&lt;h2&gt;dhparam&lt;/h2&gt;
&lt;p&gt;It’s a …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
&lt;p&gt;I am a firm believer in using &lt;span class="caps"&gt;SSL&lt;/span&gt; as much as possible, for me that is pretty
much everywhere and, thanks to the wonderful guys at
&lt;a class="reference external" href="https://www.globalsign.com/"&gt;GlobalSign&lt;/a&gt;, most of
my &lt;span class="caps"&gt;SSL&lt;/span&gt; certificates are free becauses my projects are all open source.&lt;/p&gt;
&lt;p&gt;I used a blog post by &lt;a class="reference external" href="https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/"&gt;Hynek Schlawack&lt;/a&gt;
as a base for my &lt;span class="caps"&gt;SSL&lt;/span&gt; setup, he is keeping this article up-to-date as much as
possible so it should be a great source for any security conscious people that
would like to know more and get good explanations about each part.&lt;/p&gt;
&lt;p&gt;Let’s take a brief look at how this website achieves it’s A* rating.&lt;/p&gt;
&lt;div class="section" id="key"&gt;
&lt;h2&gt;Key&lt;/h2&gt;
&lt;p&gt;I use a 4096 bit &lt;span class="caps"&gt;RSA&lt;/span&gt; key that is no a &lt;a class="reference external" href="https://wiki.debian.org/SSLkeys#Identifying_Weak_Keys"&gt;Debian weak key&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="protcols"&gt;
&lt;h2&gt;Protcols&lt;/h2&gt;
&lt;p&gt;I do not support SSLv2 or SSLv3 but I do support much stronger protocols;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;span class="caps"&gt;TLS&lt;/span&gt; 1.2,&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;TLS&lt;/span&gt; 1.1 and,&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;TLS&lt;/span&gt; 1.0.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="dhparam"&gt;
&lt;h2&gt;dhparam&lt;/h2&gt;
&lt;p&gt;It’s a good idea to generate a set of &lt;span class="caps"&gt;DH&lt;/span&gt; parameters with a prime that is larger than the &lt;span class="caps"&gt;RSA&lt;/span&gt; key being used.
For me that’s 4096 so to generate this I use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;openssl dhparam &lt;span class="m"&gt;4096&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once generated it gets appended to our &lt;span class="caps"&gt;PEM&lt;/span&gt; chain.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;-----BEGIN CERTIFICATE-----
-----END CERTIFICATE-----
-----BEGIN RSA PRIVATE KEY-----
-----END RSA PRIVATE KEY-----
-----BEGIN CERTIFICATE----- # intermediate cert
-----END CERTIFICATE-----
-----BEGIN DH PARAMETERS-----
-----END DH PARAMETERS-----
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="cipher-suites-key-exchanges"&gt;
&lt;h2&gt;Cipher suites &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; key exchanges&lt;/h2&gt;
&lt;p&gt;I only support &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Elliptic_curve_Diffie%E2%80%93Hellman"&gt;Elliptic curve Diffie–Hellman&lt;/a&gt; and
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange"&gt;Diffie–Hellman&lt;/a&gt; for key exchange.&lt;/p&gt;
&lt;p&gt;The website prefers &lt;span class="caps"&gt;ECDH&lt;/span&gt;+&lt;span class="caps"&gt;AESGCM&lt;/span&gt; or &lt;span class="caps"&gt;DH&lt;/span&gt;+&lt;span class="caps"&gt;AESGCM&lt;/span&gt; which specifically uses &lt;span class="caps"&gt;AES&lt;/span&gt;-128,
if &lt;span class="caps"&gt;AESGCM&lt;/span&gt; isn’t supported by the browser (at time of writing, it’s only
support by Chrome 32) it will fall back to &lt;span class="caps"&gt;ECDH&lt;/span&gt;+&lt;span class="caps"&gt;AES256&lt;/span&gt; or &lt;span class="caps"&gt;DH&lt;/span&gt;+&lt;span class="caps"&gt;AES256&lt;/span&gt; or fall
further back to &lt;span class="caps"&gt;ECDH&lt;/span&gt;+&lt;span class="caps"&gt;AES128&lt;/span&gt; or &lt;span class="caps"&gt;DH&lt;/span&gt;+&lt;span class="caps"&gt;AES&lt;/span&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:HIGH:!aNULL:!eNULL:!EXPORT:!MD5:!DSS:!DES:!3DES:!RC4:!PSK
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For most browser versions this should provide extremely secure connectivity
and &lt;a class="reference external" href="https://community.qualys.com/blogs/securitylabs/2013/06/25/ssl-labs-deploying-forward-secrecy"&gt;Forward Secrecy&lt;/a&gt;.
Please consult the &lt;a class="reference internal" href="#notes"&gt;Notes&lt;/a&gt; section for more information.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="forcing-ssl-usage"&gt;
&lt;h2&gt;Forcing &lt;span class="caps"&gt;SSL&lt;/span&gt; usage&lt;/h2&gt;
&lt;p&gt;This one is really quite simple, if you attempt to browse this site using
the unsecure interface (&lt;span class="caps"&gt;HTTP&lt;/span&gt;) you will simply be redirected to a secure interface.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ssl-compression"&gt;
&lt;h2&gt;&lt;span class="caps"&gt;SSL&lt;/span&gt; compression&lt;/h2&gt;
&lt;p&gt;Thankfully, at time of writing, I am using OpenSSL 1.0.1e and nginx 1.5.8
meaning &lt;span class="caps"&gt;SSL&lt;/span&gt; compression is disabled, you will have to do some Googling to find
out what specific versions you will need to disable &lt;span class="caps"&gt;SSL&lt;/span&gt; compression.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hsts"&gt;
&lt;h2&gt;&lt;span class="caps"&gt;HSTS&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;Finally, I support &lt;a class="reference external" href="https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security"&gt;&lt;span class="caps"&gt;HSTS&lt;/span&gt;&lt;/a&gt;
telling my browser it should only access this website via a secure method, this
is done by simply providing an &lt;span class="caps"&gt;STS&lt;/span&gt; header as shown below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Strict-Transport-Security: max-age=15768000
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="notes"&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;This configuration does not allow for Windows &lt;span class="caps"&gt;XP&lt;/span&gt; operating system or &lt;span class="caps"&gt;IE6&lt;/span&gt;. It
supports &lt;span class="caps"&gt;IE7&lt;/span&gt; and above on Windows Vista or higher.&lt;/p&gt;
&lt;p&gt;Consult &lt;a class="reference external" href="https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/"&gt;Hynek’s article&lt;/a&gt; for support for Windows &lt;span class="caps"&gt;XP&lt;/span&gt; and &lt;span class="caps"&gt;IE6&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="testing"&gt;
&lt;h2&gt;Testing&lt;/h2&gt;
&lt;p&gt;You can use &lt;a class="reference external" href="https://www.ssllabs.com/ssltest/analyze.html"&gt;&lt;span class="caps"&gt;SSL&lt;/span&gt; Labs by Qualys&lt;/a&gt;
to determine your own website’s security and you can look at the
&lt;a class="reference external" href="https://www.ssllabs.com/ssltest/analyze.html?d=kura.gg"&gt;Qualys report&lt;/a&gt; for
this website as a comparison.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="more-information"&gt;
&lt;h2&gt;More information&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/"&gt;Hynek’s article&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://wiki.mozilla.org/Security/Server_Side_TLS"&gt;Mozilla Security/Server Side &lt;span class="caps"&gt;TLS&lt;/span&gt; article&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="tutorials"></category><category term="ssl"></category></entry><entry><title>Advertise multiple NPN protocols with haproxy</title><link href="https://kura.gg/2014/01/31/advertise-multiple-npn-protocols-with-haproxy/" rel="alternate"></link><published>2014-01-31T15:25:00+00:00</published><updated>2014-01-31T15:25:00+00:00</updated><author><name>kura</name></author><id>tag:kura.gg,2014-01-31:/2014/01/31/advertise-multiple-npn-protocols-with-haproxy/</id><content type="html">&lt;p&gt;I have previously written an article on &lt;a class="reference external" href="/2013/07/15/haproxy-nginx-and-spdy-with-ssl-termination-debian-7/"&gt;using &lt;span class="caps"&gt;SPDY&lt;/span&gt; with haproxy&lt;/a&gt;
but have been spending some time recently being annoyed that the &lt;a class="reference external" href="https://spdycheck.org/#kura.gg"&gt;&lt;span class="caps"&gt;SPDY&lt;/span&gt; check
tool&lt;/a&gt; said I didn’t advertise a fall back to
&lt;span class="caps"&gt;HTTP&lt;/span&gt; over &lt;span class="caps"&gt;SSL&lt;/span&gt; in the &lt;span class="caps"&gt;NPN&lt;/span&gt; protocol list.&lt;/p&gt;
&lt;p&gt;After some digging I discovered it was actually quite simple to advertise
multiple protocols using npn and haproxy.&lt;/p&gt;
&lt;p&gt;Previously my article called for using the following section of configuration
at the end of the bind line.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;npn spdy/2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To advertise &lt;span class="caps"&gt;HTTP&lt;/span&gt; protocols as well as &lt;span class="caps"&gt;SPDY&lt;/span&gt; you simply need to add them to the
npn list, using commas as a delimiter.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;npn spdy/2,http/1.1
&lt;/pre&gt;&lt;/div&gt;
</content><category term="tutorials"></category><category term="haproxy"></category><category term="npn"></category><category term="spdy"></category><category term="http/1.1"></category></entry><entry><title>haproxy stats</title><link href="https://kura.gg/2013/07/19/haproxy-stats/" rel="alternate"></link><published>2013-07-19T13:00:00+01:00</published><updated>2013-07-19T13:00:00+01:00</updated><author><name>kura</name></author><id>tag:kura.gg,2013-07-19:/2013/07/19/haproxy-stats/</id><content type="html">
&lt;p&gt;I recently wrote an article on &lt;a class="reference external" href="/2013/07/15/haproxy-nginx-and-spdy-with-ssl-termination-debian-7/"&gt;using haproxy, &lt;span class="caps"&gt;SSL&lt;/span&gt; and
&lt;span class="caps"&gt;SPDY&lt;/span&gt; with nginx backend servers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This article is a little extra on top of that to explain
how to enable statistics for haproxy so you can monitor
the backend statuses etc.&lt;/p&gt;
&lt;div class="section" id="example-stats-page"&gt;
&lt;h2&gt;Example stats page&lt;/h2&gt;
&lt;img alt="Moar stats!" src="/images/haproxy-stats.png"/&gt;
&lt;/div&gt;
&lt;div class="section" id="enabling-stats"&gt;
&lt;h2&gt;Enabling stats&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
listen stats :8000
    mode http
    stats enable
    stats hide-version
    stats realm haproxy\ stats
    stats uri /
    stats auth admin:admin
&lt;/pre&gt;
&lt;p&gt;Place the above content in the haproxy configuration
file (&lt;em&gt;/etc/haproxy/haproxy.cfg&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Be sure to replace &lt;em&gt;admin:admin&lt;/em&gt; with your a proper
username and password, username first, password
after the colon.&lt;/p&gt;
&lt;p&gt;Restart haproxy, and then browse to &lt;a class="reference external" href="https://yoursite.com:8000"&gt;https://yousite.com:8000&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="tutorials"></category><category term="haproxy"></category><category term="stats"></category></entry><entry><title>haproxy, nginx and SPDY with SSL termination (Debian 7)</title><link href="https://kura.gg/2013/07/15/haproxy-nginx-and-spdy-with-ssl-termination-debian-7/" rel="alternate"></link><published>2013-07-15T22:30:00+01:00</published><updated>2013-07-15T22:30:00+01:00</updated><author><name>kura</name></author><id>tag:kura.gg,2013-07-15:/2013/07/15/haproxy-nginx-and-spdy-with-ssl-termination-debian-7/</id><summary type="html">
&lt;p&gt;&lt;a class="reference external" href="/2013/07/10/nginx-spdy-and-ngx-pagespeed/"&gt;I wrote an article last week&lt;/a&gt; explaining that I had changed my blog
and built my own nginx packages with &lt;a class="reference external" href="https://www.chromium.org/spdy"&gt;&lt;span class="caps"&gt;SPDY&lt;/span&gt;&lt;/a&gt; built in.&lt;/p&gt;
&lt;p&gt;I decided I would take things a little further and poke around with
haproxy some more. The initial plan was to compile the latest dev
source of haproxy with &lt;span class="caps"&gt;SSL&lt;/span&gt; termination enabled.&lt;/p&gt;
&lt;p&gt;In doing so I realised I would lose &lt;span class="caps"&gt;SPDY&lt;/span&gt; support, which upset me a
little. After some digging I found that the 1.5-dev branch of
haproxy supports npn and thus can handle &lt;span class="caps"&gt;SPDY&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;I tweaked my builds a little more and managed to get haproxy
running as an &lt;span class="caps"&gt;SSL&lt;/span&gt; terminating load balancer, with &lt;span class="caps"&gt;SPDY&lt;/span&gt; connections
being sent off to my nginx servers with &lt;span class="caps"&gt;SPDY&lt;/span&gt; enabled and all other
non-&lt;span class="caps"&gt;SPDY&lt;/span&gt; connections were passed on to an nginx virtual host with
&lt;span class="caps"&gt;SPDY&lt;/span&gt; disabled.&lt;/p&gt;
&lt;div class="section" id="requirements"&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;I have released my haproxy build as a debian file below …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
&lt;p&gt;&lt;a class="reference external" href="/2013/07/10/nginx-spdy-and-ngx-pagespeed/"&gt;I wrote an article last week&lt;/a&gt; explaining that I had changed my blog
and built my own nginx packages with &lt;a class="reference external" href="https://www.chromium.org/spdy"&gt;&lt;span class="caps"&gt;SPDY&lt;/span&gt;&lt;/a&gt; built in.&lt;/p&gt;
&lt;p&gt;I decided I would take things a little further and poke around with
haproxy some more. The initial plan was to compile the latest dev
source of haproxy with &lt;span class="caps"&gt;SSL&lt;/span&gt; termination enabled.&lt;/p&gt;
&lt;p&gt;In doing so I realised I would lose &lt;span class="caps"&gt;SPDY&lt;/span&gt; support, which upset me a
little. After some digging I found that the 1.5-dev branch of
haproxy supports npn and thus can handle &lt;span class="caps"&gt;SPDY&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;I tweaked my builds a little more and managed to get haproxy
running as an &lt;span class="caps"&gt;SSL&lt;/span&gt; terminating load balancer, with &lt;span class="caps"&gt;SPDY&lt;/span&gt; connections
being sent off to my nginx servers with &lt;span class="caps"&gt;SPDY&lt;/span&gt; enabled and all other
non-&lt;span class="caps"&gt;SPDY&lt;/span&gt; connections were passed on to an nginx virtual host with
&lt;span class="caps"&gt;SPDY&lt;/span&gt; disabled.&lt;/p&gt;
&lt;div class="section" id="requirements"&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;p&gt;I have released my haproxy build as a debian file below, it is built
off of haproxy_1.5~dev19 and is compiled for amd64. It should work on
any installation of Debian 7 and requires openssl-1.0.1d or higher.&lt;/p&gt;
&lt;p&gt;On a standard Debian 7 install you should have openssl-1.0.1e-2, you
can find which version you have by running&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;dpkg -l openssl
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This should return something similar to&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ii  openssl        1.0.1e-2        amd64        Secure Socket Layer (SSL) binary and related cryptographic tools
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="installing-haproxy"&gt;
&lt;h2&gt;Installing haproxy&lt;/h2&gt;
&lt;p&gt;Download the deb file below, use either the &lt;span class="caps"&gt;GPG&lt;/span&gt; key or &lt;span class="caps"&gt;MD5&lt;/span&gt;/&lt;span class="caps"&gt;SHA1&lt;/span&gt; sums to verify it.&lt;/p&gt;
&lt;table class="docutils"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th class="head"&gt;&lt;span class="caps"&gt;FILE&lt;/span&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;span class="caps"&gt;GPG&lt;/span&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;span class="caps"&gt;MD5&lt;/span&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;span class="caps"&gt;SHA1&lt;/span&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="/files/haproxy_1.5~dev19_amd64.deb"&gt;haproxy_1.5~dev19_amd64.deb&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="/files/haproxy_1.5~dev19_amd64.deb.asc"&gt;owGMeXVU1G…&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="/files/haproxy_1.5~dev19_amd64.deb.md5"&gt;715317e082…&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="/files/haproxy_1.5~dev19_amd64.deb.sha1"&gt;e116e1c597…&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;If you already have haproxy installed, make sure to remove it first.&lt;/p&gt;
&lt;p&gt;You can install them by simply running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo dpkg -i haproxy_1.5~dev19_amd64.deb
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You may receive an error due to missing dependencies, to fix this run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install -f
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="configuring-haproxy"&gt;
&lt;h2&gt;Configuring haproxy&lt;/h2&gt;
&lt;p&gt;First we need to enabled haproxy by running the following command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo sed -i &lt;span class="s1"&gt;'s/ENABLED=0/ENABLED=1/'&lt;/span&gt; /etc/default/haproxy
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We then need to empty the contents of the haproxy configuration and
replace it with a nice blank file. The following command will copy
the original file to a new location and create a blank file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo mv /etc/haproxy/haproxy.cfg&lt;span class="o"&gt;{&lt;/span&gt;,.orig&lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo &amp;gt;/etc/haproxy/haproxy.cfg
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class="caps"&gt;SPDY&lt;/span&gt; only works over &lt;span class="caps"&gt;HTTPS&lt;/span&gt;, so bare that in mind. All you need to do is
enable &lt;span class="caps"&gt;SPDY&lt;/span&gt; in your server configuration as below.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
global
    maxconn 4096
    user haproxy
    group haproxy

defaults
    option dontlognull
    retries 3
    option redispatch
    maxconn 2000
    contimeout 5000
    clitimeout 50000
    srvtimeout 50000

frontend http
    mode http
    bind 0.0.0.0:80
    redirect sheme https if !{ ssl_fc }

frontend kura-gg
    mode tcp
    bind 0.0.0.0:443 ssl crt /etc/ssl/certs/kura.gg.pem npn spdy/2 # pem is certificate, intermediate and finally private key
    use_backend kura-app-spdy if { ssl_fc_npn -i spdy/2 }
    default_backend kura-app-http

backend kura-app-spdy
    mode tcp
    server kura-gg-app1 127.0.0.1:80 check

backend kura-app-http
    mode http
    server kura-gg-app1 127.0.0.1:81 check
&lt;/pre&gt;
&lt;p&gt;You don’t need to worry about the &lt;em&gt;global&lt;/em&gt; and &lt;em&gt;defaults&lt;/em&gt; sections, I will now
explain what the final four sections do.&lt;/p&gt;
&lt;div class="section" id="frontend-http"&gt;
&lt;h3&gt;frontend http&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
frontend http
    mode http
    bind 0.0.0.0:80
    redirect sheme https if !{ ssl_fc }
&lt;/pre&gt;
&lt;p&gt;This tells haproxy to listen on port 80 and redirect all traffic
to the &lt;span class="caps"&gt;HTTPS&lt;/span&gt; version of the site.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="frontend-kura-gg"&gt;
&lt;h3&gt;frontend kura-gg&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
frontend kura-gg
    mode tcp
    bind 0.0.0.0:443 ssl crt /etc/ssl/certs/kura.gg.pem npn spdy/2 # pem is certificate, intermediate and finally private key
    use_backend kura-app-spdy if { ssl_fc_npn -i spdy/2 }
    default_backend kura-app-http
&lt;/pre&gt;
&lt;p&gt;This section sets the proxy mode to tcp, which sends tcp
data over to the backend servers rather than http requests.&lt;/p&gt;
&lt;p&gt;We then bind to all interfaces on port 443, enabling &lt;span class="caps"&gt;SSL&lt;/span&gt; and
passing in a &lt;span class="caps"&gt;PEM&lt;/span&gt; version of the certificate in the following format&lt;/p&gt;
&lt;pre class="literal-block"&gt;
-----BEGIN CERTIFICATE-----
MAIN CERTIFICATE FOR KURA.IO
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
INTERMEDIATE CERTIFICATE
-----END CERTIFICATE-----
-----BEGIN RSA PRIVATE KEY-----
PRIVATE KEY
-----END RSA PRIVATE KEY-----
&lt;/pre&gt;
&lt;p&gt;Finally we do some magic. We tell haproxy to use
the &lt;span class="caps"&gt;SPDY&lt;/span&gt; backend if a &lt;span class="caps"&gt;SPDY&lt;/span&gt; header is present:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
use_backend kura-app-spdy if { ssl_fc_npn -i spdy/2 }
&lt;/pre&gt;
&lt;p&gt;If not then we fall back to the default &lt;span class="caps"&gt;HTTP&lt;/span&gt; backend:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
default_backend kura-app-http
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="backend-kura-app-spdy"&gt;
&lt;h3&gt;backend kura-app-spdy&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
backend kura-app-spdy
    mode tcp
    server kura-gg-app1 127.0.0.1:80 check
&lt;/pre&gt;
&lt;p&gt;This section simply defines the server we should talk to if
the client is using an &lt;span class="caps"&gt;SPDY&lt;/span&gt; enabled connection.&lt;/p&gt;
&lt;p&gt;Simply define multiple servers for additional servers.&lt;/p&gt;
&lt;p&gt;You can see I am point it at 127.0.0.1 on port 80.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="backend-kura-app-http"&gt;
&lt;h3&gt;backend kura-app-http&lt;/h3&gt;
&lt;pre class="literal-block"&gt;
backend kura-app-http
    mode http
    server kura-gg-app1 127.0.0.1:81 check
&lt;/pre&gt;
&lt;p&gt;And finally, here I am defining the http backends
to fall back on for non-&lt;span class="caps"&gt;SPDY&lt;/span&gt; connections.&lt;/p&gt;
&lt;p&gt;You can see this is almost identical to the &lt;span class="caps"&gt;SPDY&lt;/span&gt;
backend except it is running in &lt;span class="caps"&gt;HTTP&lt;/span&gt; mode.&lt;/p&gt;
&lt;p&gt;As with the &lt;span class="caps"&gt;SPDY&lt;/span&gt; backends, simply define multiple
servers as required. Here I am using 127.0.0.1 and
port 81.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="nginx"&gt;
&lt;h2&gt;nginx&lt;/h2&gt;
&lt;p&gt;To make this all tie together we simply need to
install an &lt;span class="caps"&gt;SPDY&lt;/span&gt;-enabled nginx.&lt;/p&gt;
&lt;p&gt;You can &lt;a class="reference external" href="/2013/07/10/nginx-spdy-and-ngx-pagespeed/"&gt;follow my guide on how to install my
packaged version of nginx with &lt;span class="caps"&gt;SPDY&lt;/span&gt; enabled&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Follow this guide up until the configuration of nginx.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="configuring-nginx"&gt;
&lt;h2&gt;Configuring nginx&lt;/h2&gt;
&lt;p&gt;Within nginx we need to enable two virtual hosts&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt; &lt;span class="s"&gt;spdy&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;kura.gg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;# make nginx 301 redirects work&lt;/span&gt;
    &lt;span class="kn"&gt;port_in_redirect&lt;/span&gt; &lt;span class="no"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server_name_in_redirect&lt;/span&gt; &lt;span class="no"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kn"&gt;root&lt;/span&gt;   &lt;span class="s"&gt;/var/www/kura.gg/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="kn"&gt;index&lt;/span&gt;  &lt;span class="s"&gt;index.html&lt;/span&gt; &lt;span class="s"&gt;index.htm&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;81&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;kura.gg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;# make nginx 301 redirects work&lt;/span&gt;
    &lt;span class="kn"&gt;port_in_redirect&lt;/span&gt; &lt;span class="no"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server_name_in_redirect&lt;/span&gt; &lt;span class="no"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kn"&gt;root&lt;/span&gt;   &lt;span class="s"&gt;/var/www/kura.gg/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="kn"&gt;index&lt;/span&gt;  &lt;span class="s"&gt;index.html&lt;/span&gt; &lt;span class="s"&gt;index.htm&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first virtual host is our &lt;span class="caps"&gt;SPDY&lt;/span&gt; enabled host
which is configured to run on port 80.&lt;/p&gt;
&lt;p&gt;The second is our standard &lt;span class="caps"&gt;HTTP&lt;/span&gt; host which is
running on port 81.&lt;/p&gt;
&lt;p&gt;We have two lines &lt;em&gt;port_in_redirect&lt;/em&gt; and &lt;em&gt;server_name_in_redirect&lt;/em&gt;
set to &lt;em&gt;off&lt;/em&gt; because otherwise nginx would try to redirect to
&lt;a class="reference external" href="https://kura.gg:81/"&gt;https://kura.gg:81/&lt;/a&gt; and cause issues with haproxy.&lt;/p&gt;
&lt;p&gt;It’s a simple as that, you can test this using the &lt;a class="reference external" href="https://addons.mozilla.org/en-us/firefox/addon/spdy-indicator/"&gt;Firefox&lt;/a&gt; and
&lt;a class="reference external" href="https://chrome.google.com/webstore/detail/spdy-indicator/mpbpobfflnpcgagjijhmgnchggcjblin"&gt;Chrome&lt;/a&gt; extensions that show you websites with &lt;span class="caps"&gt;SPDY&lt;/span&gt; enabled.&lt;/p&gt;
&lt;/div&gt;
</content><category term="tutorials"></category><category term="debian"></category><category term="ubuntu"></category><category term="haproxy"></category><category term="nginx"></category><category term="spdy"></category><category term="ssl"></category><category term="ssl termination"></category></entry><entry><title>nginx, SPDY and ngx_pagespeed (Debian/Ubuntu)</title><link href="https://kura.gg/2013/07/10/nginx-spdy-and-ngx-pagespeed/" rel="alternate"></link><published>2013-07-10T22:30:00+01:00</published><updated>2013-07-10T22:30:00+01:00</updated><author><name>kura</name></author><id>tag:kura.gg,2013-07-10:/2013/07/10/nginx-spdy-and-ngx-pagespeed/</id><summary type="html">
&lt;p&gt;I decided to rebuild syslog.tv as pure &lt;span class="caps"&gt;HTML&lt;/span&gt; using &lt;span class="caps"&gt;RST&lt;/span&gt; and
&lt;a class="reference external" href="https://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; and rebrand it as kura.gg.&lt;/p&gt;
&lt;p&gt;In doing so I decided I would go all out and use &lt;a class="reference external" href="https://www.chromium.org/spdy"&gt;&lt;span class="caps"&gt;SPDY&lt;/span&gt;&lt;/a&gt; and
&lt;a class="reference external" href="https://nginx.org/en/docs/http/ngx_http_spdy_module.html"&gt;ngx_pagespeed&lt;/a&gt; (&lt;a class="reference external" href="https://developers.google.com/speed/"&gt;mod_pagespeed&lt;/a&gt;) for fun to see exactly
what I could do.&lt;/p&gt;
&lt;p&gt;Sadly no version of nginx has been officially released with &lt;span class="caps"&gt;SPDY&lt;/span&gt;
or ngx_pagespeed enabled, you can compile nginx from source to
enable &lt;span class="caps"&gt;SPDY&lt;/span&gt; so I thought I would go ahead and do it, releasing
some Debian packages in the process.&lt;/p&gt;
&lt;p&gt;After compiling nginx from the source package available at the
&lt;a class="reference external" href="https://launchpad.net/~nginx"&gt;Ubuntu &lt;span class="caps"&gt;PPA&lt;/span&gt;&lt;/a&gt;, I decided I would go further and compile in ngx_pagespeed.&lt;/p&gt;
&lt;div class="section" id="installing"&gt;
&lt;h2&gt;Installing&lt;/h2&gt;
&lt;p&gt;I have released the 4 required debian packages below (please note
they are only available for amd64);&lt;/p&gt;
&lt;table class="docutils"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th class="head"&gt;&lt;span class="caps"&gt;FILE&lt;/span&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;span class="caps"&gt;GPG&lt;/span&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;span class="caps"&gt;MD5&lt;/span&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;span class="caps"&gt;SHA1&lt;/span&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="/files/nginx_1.4.1_all.deb"&gt;nginx_1.4.1_all.deb&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="/files/nginx_1.4.1_all.deb.asc"&gt;owGMl1NwLw…&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="/files/nginx_1.4.1_all.deb.md5"&gt;42f790a1f6…&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="/files/nginx_1.4.1_all.deb.sha1"&gt;f4495055e9…&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="/files/nginx-common_1.4.1_all.deb"&gt;nginx-common_1.4.1_all.deb&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="/files/nginx-common_1.4.1_all.deb.asc"&gt;owGMt1NwJU…&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="/files/nginx-common_1.4.1_all.deb.md5"&gt;ca4ec5688d…&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="/files/nginx-common_1.4.1_all.deb.sha1"&gt;633bfc2eaa …&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;</summary><content type="html">
&lt;p&gt;I decided to rebuild syslog.tv as pure &lt;span class="caps"&gt;HTML&lt;/span&gt; using &lt;span class="caps"&gt;RST&lt;/span&gt; and
&lt;a class="reference external" href="https://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; and rebrand it as kura.gg.&lt;/p&gt;
&lt;p&gt;In doing so I decided I would go all out and use &lt;a class="reference external" href="https://www.chromium.org/spdy"&gt;&lt;span class="caps"&gt;SPDY&lt;/span&gt;&lt;/a&gt; and
&lt;a class="reference external" href="https://nginx.org/en/docs/http/ngx_http_spdy_module.html"&gt;ngx_pagespeed&lt;/a&gt; (&lt;a class="reference external" href="https://developers.google.com/speed/"&gt;mod_pagespeed&lt;/a&gt;) for fun to see exactly
what I could do.&lt;/p&gt;
&lt;p&gt;Sadly no version of nginx has been officially released with &lt;span class="caps"&gt;SPDY&lt;/span&gt;
or ngx_pagespeed enabled, you can compile nginx from source to
enable &lt;span class="caps"&gt;SPDY&lt;/span&gt; so I thought I would go ahead and do it, releasing
some Debian packages in the process.&lt;/p&gt;
&lt;p&gt;After compiling nginx from the source package available at the
&lt;a class="reference external" href="https://launchpad.net/~nginx"&gt;Ubuntu &lt;span class="caps"&gt;PPA&lt;/span&gt;&lt;/a&gt;, I decided I would go further and compile in ngx_pagespeed.&lt;/p&gt;
&lt;div class="section" id="installing"&gt;
&lt;h2&gt;Installing&lt;/h2&gt;
&lt;p&gt;I have released the 4 required debian packages below (please note
they are only available for amd64);&lt;/p&gt;
&lt;table class="docutils"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th class="head"&gt;&lt;span class="caps"&gt;FILE&lt;/span&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;span class="caps"&gt;GPG&lt;/span&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;span class="caps"&gt;MD5&lt;/span&gt;&lt;/th&gt;
&lt;th class="head"&gt;&lt;span class="caps"&gt;SHA1&lt;/span&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="/files/nginx_1.4.1_all.deb"&gt;nginx_1.4.1_all.deb&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="/files/nginx_1.4.1_all.deb.asc"&gt;owGMl1NwLw…&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="/files/nginx_1.4.1_all.deb.md5"&gt;42f790a1f6…&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="/files/nginx_1.4.1_all.deb.sha1"&gt;f4495055e9…&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="/files/nginx-common_1.4.1_all.deb"&gt;nginx-common_1.4.1_all.deb&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="/files/nginx-common_1.4.1_all.deb.asc"&gt;owGMt1NwJU…&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="/files/nginx-common_1.4.1_all.deb.md5"&gt;ca4ec5688d…&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="/files/nginx-common_1.4.1_all.deb.sha1"&gt;633bfc2eaa…&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="/files/nginx-full_1.4.1_amd64.deb"&gt;nginx-full_1.4.1_amd64.deb&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="/files/nginx-full_1.4.1_amd64.deb.asc"&gt;owG09ndUk1…&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="/files/nginx-full_1.4.1_amd64.deb.md5"&gt;4776dc6c7f…&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="/files/nginx-full_1.4.1_amd64.deb.sha1"&gt;0e4e124acc…&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;a class="reference external" href="/files/nginx-doc_1.4.1_all.deb"&gt;nginx-doc_1.4.1_all.deb&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="/files/nginx-doc_1.4.1_all.deb.asc"&gt;owGMtlOQJQ…&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="/files/nginx-doc_1.4.1_all.deb.md5"&gt;ad8ae70215…&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a class="reference external" href="/files/nginx-doc_1.4.1_all.deb.sha1"&gt;690563e7cc…&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;You can install them by simply running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo dpkg -i nginx*.deb
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you already have nginx installed, make sure to remove it first.&lt;/p&gt;
&lt;p&gt;You may receive an error due to missing dependencies, to fix this run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install -f
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="configuring-spdy"&gt;
&lt;h2&gt;Configuring &lt;span class="caps"&gt;SPDY&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class="caps"&gt;SPDY&lt;/span&gt; only works over &lt;span class="caps"&gt;HTTPS&lt;/span&gt;, so bare that in mind. All you need to do is
enable &lt;span class="caps"&gt;SPDY&lt;/span&gt; in your server configuration as below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;443&lt;/span&gt; &lt;span class="s"&gt;ssl&lt;/span&gt; &lt;span class="s"&gt;spdy&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;kura.gg&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It’s a simple as that, you can test this using the &lt;a class="reference external" href="https://addons.mozilla.org/en-us/firefox/addon/spdy-indicator/"&gt;Firefox&lt;/a&gt; and
&lt;a class="reference external" href="https://chrome.google.com/webstore/detail/spdy-indicator/mpbpobfflnpcgagjijhmgnchggcjblin"&gt;Chrome&lt;/a&gt; extensions that show you websites with &lt;span class="caps"&gt;SPDY&lt;/span&gt; enabled.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="configuring-ngx-pagespeed"&gt;
&lt;h2&gt;Configuring ngx_pagespeed&lt;/h2&gt;
&lt;p&gt;To enable ngx_pagespeed you first need to create a directory
that it can write cache files to.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo mkdir /var/cache/ngx_pagespeed/
sudo chown www-data:www-data /var/cache/ngx_pagespeed/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once this is done you can enable ngx_pagespeed in your
server configuration as below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
    &lt;span class="kn"&gt;pagespeed&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;pagespeed&lt;/span&gt; &lt;span class="s"&gt;RewriteLevel&lt;/span&gt; &lt;span class="s"&gt;CoreFilters&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;pagespeed&lt;/span&gt; &lt;span class="s"&gt;FileCachePath&lt;/span&gt; &lt;span class="s"&gt;"/var/cache/ngx_pagespeed/"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;pagespeed&lt;/span&gt; &lt;span class="s"&gt;EnableFilters&lt;/span&gt; &lt;span class="s"&gt;combine_css,combine_javascript,remove_comments,collapse_whitespace&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The three filters that are enabled do the following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;combines &lt;span class="caps"&gt;CSS&lt;/span&gt; &amp;lt;style&amp;gt; elements in to one,&lt;/li&gt;
&lt;li&gt;combines multiple &amp;lt;script&amp;gt; elements in to one,&lt;/li&gt;
&lt;li&gt;removes all comments from &lt;span class="caps"&gt;HTML&lt;/span&gt; and,&lt;/li&gt;
&lt;li&gt;removes additional whitespace from &lt;span class="caps"&gt;HTML&lt;/span&gt; excluding &amp;lt;pre&amp;gt;, &amp;lt;script&amp;gt;, &amp;lt;style&amp;gt; and &amp;lt;textarea&amp;gt; elements.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can test this by simply viewing the source code of your
website and seeing all of the &lt;span class="caps"&gt;HTML&lt;/span&gt; compressed.&lt;/p&gt;
&lt;p&gt;You can find &lt;a class="reference external" href="https://developers.google.com/speed/pagespeed/module/config_filters"&gt;more information on filters here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="tutorials"></category><category term="debian"></category><category term="ubuntu"></category><category term="nginx"></category><category term="spdy"></category><category term="pagespeed"></category><category term="ngx_pagespeed"></category><category term="mod_pagespeed"></category></entry><entry><title>Bash portforwarding with autocompletion</title><link href="https://kura.gg/2013/03/12/bash-portforwarding-with-autocompletion/" rel="alternate"></link><published>2013-03-12T18:00:00+00:00</published><updated>2013-03-12T18:00:00+00:00</updated><author><name>kura</name></author><id>tag:kura.gg,2013-03-12:/2013/03/12/bash-portforwarding-with-autocompletion/</id><content type="html">
&lt;p&gt;I spend a &lt;span class="caps"&gt;LOT&lt;/span&gt; of time with tunnels open to multiple machines, connecting
directly to PostgreSQL, RabbitMQ and many other services all via &lt;span class="caps"&gt;SSH&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;I have written several helper functions and this is the final version
that I created in a small competition with &lt;a class="reference external" href="https://twitter.com/codeinthehole"&gt;@codeinthehole.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Gist removed. Sorry.&lt;/p&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;Simply add the contents to &lt;em&gt;~/.bashrc&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="usage"&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;Usage is pretty simply, just called portforward from the command line,
pressing &amp;lt;&lt;span class="caps"&gt;TAB&lt;/span&gt;&amp;gt; as you type in a server name from your ~/.ssh/config file
and the same with the port.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;portforward sy&amp;lt;TAB&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Will become:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;portforward syslog.tv
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And finally&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;portforward syslog.tv &lt;span class="m"&gt;15672&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="tutorials"></category><category term="autocompletion"></category><category term="bash"></category><category term="port forwarding"></category></entry><entry><title>Unbanning an IP, multiple IPs or a block of IPs from DenyHost</title><link href="https://kura.gg/2012/11/13/unbanning-an-ip-a-block-of-ips-or-a-block-of-ips-from-denyhost/" rel="alternate"></link><published>2012-11-13T17:45:00+00:00</published><updated>2012-11-13T17:45:00+00:00</updated><author><name>kura</name></author><id>tag:kura.gg,2012-11-13:/2012/11/13/unbanning-an-ip-a-block-of-ips-or-a-block-of-ips-from-denyhost/</id><summary type="html">&lt;p&gt;I wrote this little Python program a while ago and now people are
starting to email me about it, asking for it to be part of the DenyHosts
Debian packages so I figured I’d write a quick article on it.&lt;/p&gt;
&lt;p&gt;If you’re like my developers, you’ll find yourself getting banned from
servers all the time and have to come speak to someone like me (your sys
engineer/admin), or maybe you are an admin and are sick of people
banning themselves and want and easy way to unban them.&lt;/p&gt;
&lt;p&gt;So give this a try:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/kura/denyhosts-unban"&gt;https://github.com/kura/denyhosts-unban&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;From the GitHub page you can download either the tarballs, zipballs or a
Debian .deb package. Install it using the instructions in the &lt;span class="caps"&gt;README&lt;/span&gt; and
you’re good to go.&lt;/p&gt;
&lt;div class="section" id="unban"&gt;
&lt;h2&gt;Unban&lt;/h2&gt;
&lt;p&gt;Unbanning is simple, you can either unban a single &lt;span class="caps"&gt;IP&lt;/span&gt; using:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo denyhosts-unban &lt;span class="m"&gt;10&lt;/span&gt;.0.0.1 …&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;I wrote this little Python program a while ago and now people are
starting to email me about it, asking for it to be part of the DenyHosts
Debian packages so I figured I’d write a quick article on it.&lt;/p&gt;
&lt;p&gt;If you’re like my developers, you’ll find yourself getting banned from
servers all the time and have to come speak to someone like me (your sys
engineer/admin), or maybe you are an admin and are sick of people
banning themselves and want and easy way to unban them.&lt;/p&gt;
&lt;p&gt;So give this a try:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/kura/denyhosts-unban"&gt;https://github.com/kura/denyhosts-unban&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;From the GitHub page you can download either the tarballs, zipballs or a
Debian .deb package. Install it using the instructions in the &lt;span class="caps"&gt;README&lt;/span&gt; and
you’re good to go.&lt;/p&gt;
&lt;div class="section" id="unban"&gt;
&lt;h2&gt;Unban&lt;/h2&gt;
&lt;p&gt;Unbanning is simple, you can either unban a single &lt;span class="caps"&gt;IP&lt;/span&gt; using:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo denyhosts-unban &lt;span class="m"&gt;10&lt;/span&gt;.0.0.1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or multiples using:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo denyhosts-unban &lt;span class="m"&gt;10&lt;/span&gt;.0.0.1 &lt;span class="m"&gt;10&lt;/span&gt;.0.0.2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or, you can use a bashism to unban an entire range:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo denyhosts-unban &lt;span class="m"&gt;10&lt;/span&gt;.0.0.&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;..255&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="tutorials"></category><category term="denyhosts"></category><category term="unban"></category></entry><entry><title>Java 6 on Ubuntu 12.04 (including Tomcat 6)</title><link href="https://kura.gg/2012/11/08/java-6-on-ubuntu-12-04-including-tomcat-6/" rel="alternate"></link><published>2012-11-08T11:47:00+00:00</published><updated>2012-11-08T11:47:00+00:00</updated><author><name>kura</name></author><id>tag:kura.gg,2012-11-08:/2012/11/08/java-6-on-ubuntu-12-04-including-tomcat-6/</id><summary type="html">
&lt;p&gt;If like me you run in to issue when using OpenJDK, my issues come from
it’s memory problems when you’re allocating and using large amounts of
memory - mostly for Solr where we’re concerned but obviously I’d switch
for other high memory usage instances too.&lt;/p&gt;
&lt;p&gt;So without further ado, lets get the installation going.&lt;/p&gt;
&lt;p&gt;You’ll need Debian’s “add-apt-repository”, on servers this doesn’t
usually come by default so we’ll need to install it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install python-software-properties
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next we need to add Java’s &lt;span class="caps"&gt;PPA&lt;/span&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo add-apt-repository ppa:sun-java-community-team/sun-java6
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once this is done we’ll need to update our apt caches and install Java 6.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install sun-java6-jdk
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that this is installed we should get the Java version, remember it
for future.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;java -version
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You’ll get something like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;java version &lt;span class="s2"&gt;"1.6.0_20"&lt;/span&gt; OpenJDK Runtime Environment &lt;span class="o"&gt;(&lt;/span&gt;IcedTea6 &lt;span class="m"&gt;1 …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">
&lt;p&gt;If like me you run in to issue when using OpenJDK, my issues come from
it’s memory problems when you’re allocating and using large amounts of
memory - mostly for Solr where we’re concerned but obviously I’d switch
for other high memory usage instances too.&lt;/p&gt;
&lt;p&gt;So without further ado, lets get the installation going.&lt;/p&gt;
&lt;p&gt;You’ll need Debian’s “add-apt-repository”, on servers this doesn’t
usually come by default so we’ll need to install it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install python-software-properties
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next we need to add Java’s &lt;span class="caps"&gt;PPA&lt;/span&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo add-apt-repository ppa:sun-java-community-team/sun-java6
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once this is done we’ll need to update our apt caches and install Java 6.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install sun-java6-jdk
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that this is installed we should get the Java version, remember it
for future.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;java -version
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You’ll get something like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;java version &lt;span class="s2"&gt;"1.6.0_20"&lt;/span&gt; OpenJDK Runtime Environment &lt;span class="o"&gt;(&lt;/span&gt;IcedTea6 &lt;span class="m"&gt;1&lt;/span&gt;.9.9&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;6b20-1.9.9-0ubuntu1~10.04.2&lt;span class="o"&gt;)&lt;/span&gt;
OpenJDK &lt;span class="m"&gt;64&lt;/span&gt;-Bit Server VM &lt;span class="o"&gt;(&lt;/span&gt;build &lt;span class="m"&gt;19&lt;/span&gt;.0-b09, mixed mode&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next we update our alternatives to switch OpenJDK with Sun’s Java.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo update-java-alternatives -s java-6-sun
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And finally we’ll confirm the change is made by comparing the new Java
version against the one from before&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;java -version
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You should see something similar to this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;java version &lt;span class="s2"&gt;"1.6.0_21"&lt;/span&gt;
Java&lt;span class="o"&gt;(&lt;/span&gt;TM&lt;span class="o"&gt;)&lt;/span&gt; SE Runtime Environment &lt;span class="o"&gt;(&lt;/span&gt;build &lt;span class="m"&gt;1&lt;/span&gt;.6.0_21-b06&lt;span class="o"&gt;)&lt;/span&gt;
Java HotSpot&lt;span class="o"&gt;(&lt;/span&gt;TM&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="m"&gt;64&lt;/span&gt;-Bit Server VM &lt;span class="o"&gt;(&lt;/span&gt;build &lt;span class="m"&gt;17&lt;/span&gt;.0-b16, mixed mode&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="tomcat-6"&gt;
&lt;h2&gt;Tomcat 6&lt;/h2&gt;
&lt;p&gt;To make Tomcat use this version of Java we’ll need to change JAVA_HOME.&lt;/p&gt;
&lt;p&gt;Open up &lt;strong&gt;/etc/default/tomcat6&lt;/strong&gt; for editing, you’ll need to open this
using sudo or as root.&lt;/p&gt;
&lt;p&gt;Scroll down, you’ll see JAVA_HOME is set, it may be commented out so
edit it to look like the line below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;JAVA_HOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/usr/lib/jvm/java-6-sun
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And restart Tomcat.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /etc/init.d/tomcat6 restart
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="tutorials"></category></entry><entry><title>How to generate an /etc/shadow compatible password</title><link href="https://kura.gg/2012/10/11/how-to-generate-an-etcshadow-compatible-password/" rel="alternate"></link><published>2012-10-11T09:56:00+01:00</published><updated>2012-10-11T09:56:00+01:00</updated><author><name>kura</name></author><id>tag:kura.gg,2012-10-11:/2012/10/11/how-to-generate-an-etcshadow-compatible-password/</id><content type="html">&lt;p&gt;You’ll need mkpasswd, on Debian 6 and Ubuntu 12.04 you can install this using:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install whois
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is pretty weird that it comes with the whois package though…&lt;/p&gt;
&lt;p&gt;And then run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkpasswd -m sha-512
&lt;/pre&gt;&lt;/div&gt;
</content><category term="tutorials"></category><category term="/etc/shadow"></category><category term="mkpasswd"></category><category term="password"></category><category term="sha-512"></category><category term="sha512"></category></entry><entry><title>Send all email to a blackhole (never gets delivered), test delivery speed and much more using blackhole.io</title><link href="https://kura.gg/2012/06/26/send-all-email-to-a-blackhole-never-gets-delivered-test-delivery-speed-and-much-more-using-blackhole-io/" rel="alternate"></link><published>2012-06-26T23:05:00+01:00</published><updated>2012-06-26T23:05:00+01:00</updated><author><name>kura</name></author><id>tag:kura.gg,2012-06-26:/2012/06/26/send-all-email-to-a-blackhole-never-gets-delivered-test-delivery-speed-and-much-more-using-blackhole-io/</id><summary type="html">
&lt;p&gt;I have built and released an open-source email server in the past for
testing send rates and speeds, this project was called SimpleMTA and is
available &lt;a class="reference external" href="https://syslog.tv/simplemta/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Recently I have rebuilt this project for an internal project at work
using the &lt;a class="reference external" href="https://www.tornadoweb.org/"&gt;Tornado framework&lt;/a&gt;. Sadly this project as a whole cannot be
released but a version of this code will be released in the near future.&lt;/p&gt;
&lt;p&gt;Until that is released I have launched a new service called
&lt;a class="reference external" href="https://blackhole.io"&gt;blackhole.io&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="what-is-blackhole-io"&gt;
&lt;h2&gt;What is blackhole.io?&lt;/h2&gt;
&lt;p&gt;blackhole.io is a completely open mail relay that forgets anything that
is sent to it, meaning there is no auth requirements and no storage of
email data within the service. Literally anyone can send anything to it
and have it never get delivered.&lt;/p&gt;
&lt;p&gt;You can even send commands out of order, meaning you can call the &lt;span class="caps"&gt;DATA&lt;/span&gt;
command without ever using &lt;span class="caps"&gt;HELO&lt;/span&gt;, &lt;span class="caps"&gt;MAIL&lt;/span&gt; &lt;span class="caps"&gt;FROM&lt;/span&gt; or &lt;span class="caps"&gt;RCPT&lt;/span&gt; &lt;span class="caps"&gt;TO …&lt;/span&gt;&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
&lt;p&gt;I have built and released an open-source email server in the past for
testing send rates and speeds, this project was called SimpleMTA and is
available &lt;a class="reference external" href="https://syslog.tv/simplemta/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Recently I have rebuilt this project for an internal project at work
using the &lt;a class="reference external" href="https://www.tornadoweb.org/"&gt;Tornado framework&lt;/a&gt;. Sadly this project as a whole cannot be
released but a version of this code will be released in the near future.&lt;/p&gt;
&lt;p&gt;Until that is released I have launched a new service called
&lt;a class="reference external" href="https://blackhole.io"&gt;blackhole.io&lt;/a&gt;&lt;/p&gt;
&lt;div class="section" id="what-is-blackhole-io"&gt;
&lt;h2&gt;What is blackhole.io?&lt;/h2&gt;
&lt;p&gt;blackhole.io is a completely open mail relay that forgets anything that
is sent to it, meaning there is no auth requirements and no storage of
email data within the service. Literally anyone can send anything to it
and have it never get delivered.&lt;/p&gt;
&lt;p&gt;You can even send commands out of order, meaning you can call the &lt;span class="caps"&gt;DATA&lt;/span&gt;
command without ever using &lt;span class="caps"&gt;HELO&lt;/span&gt;, &lt;span class="caps"&gt;MAIL&lt;/span&gt; &lt;span class="caps"&gt;FROM&lt;/span&gt; or &lt;span class="caps"&gt;RCPT&lt;/span&gt; &lt;span class="caps"&gt;TO&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-can-i-use-it-for"&gt;
&lt;h2&gt;What can I use it for?&lt;/h2&gt;
&lt;p&gt;Honestly, anything. I have spoken to a few people and have come up with
a few use cases but I’m sure there will be more:&lt;/p&gt;
&lt;div class="section" id="you-want-to-work-on-production-data-but-do-not-want-to-accidentally-send-an-email-to-real-users"&gt;
&lt;h3&gt;1. You want to work on production data but do not want to accidentally send an email to real users&lt;/h3&gt;
&lt;p&gt;This is bit of a nasty situation to be in but, it happens every so
often. Sure, you can spend time anonymising all of your user data (and
that is the best thing to do), but sometimes you don’t have time or you
cannot be 100% sure that you have got it all.&lt;/p&gt;
&lt;p&gt;If you application is written in such a way that changing it’s &lt;span class="caps"&gt;SMTP&lt;/span&gt;
settings will work across the whole application then you can simply
point the &lt;span class="caps"&gt;SMTP&lt;/span&gt; host to “blackhole.io” and ensure that any outgoing
emails will go to the blackhole and thus, never reach real people.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="testing-the-speed-of-your-email-sends"&gt;
&lt;h3&gt;2. Testing the speed of your email sends&lt;/h3&gt;
&lt;p&gt;Maybe you’re writing your own mail platform and want to see how fast you
can really send email. blackhole.io is a very fast server and, because
it does no real validation and has no data storage it has an extremely
low &lt;span class="caps"&gt;CPU&lt;/span&gt; and memory footprint. You can fire a vast amount of mail at it
and it should not feel it in the slightest.&lt;/p&gt;
&lt;p&gt;I have managed to send over 150,000 emails within an 10 minute period
and it didn’t feel any stress.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="integration-tests"&gt;
&lt;h3&gt;3. Integration tests&lt;/h3&gt;
&lt;p&gt;This one was pointed out by a colleague of mine - you have a system,
you’ve done your basic testing and unit testing but you want to test
integration. blackhole.io allows you to do this, you can send all of
your test email data at the service to test your &lt;span class="caps"&gt;SMTP&lt;/span&gt; outbound connections.&lt;/p&gt;
&lt;p&gt;In a future release of blackhole.io you will be able to create a free
account and set-up logging of mail, allowing you to log the from address
and subject line and possibly some custom header data, but this feature
is not available currently.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="outro"&gt;
&lt;h2&gt;Outro&lt;/h2&gt;
&lt;p&gt;I hope some people will find this service useful, let me know if you use
it and what you think of it.&lt;/p&gt;
&lt;/div&gt;
</content><category term="tutorials"></category><category term="blackhole"></category><category term="blackhole.io"></category><category term="email"></category><category term="mail"></category></entry><entry><title>Mount Amazon S3 bucket locally on Debian 5 &amp; 6/Ubuntu 10.04</title><link href="https://kura.gg/2012/03/03/mount-amazon-s3-bucket-locally/" rel="alternate"></link><published>2012-03-03T16:05:00+00:00</published><updated>2012-03-03T16:05:00+00:00</updated><author><name>kura</name></author><id>tag:kura.gg,2012-03-03:/2012/03/03/mount-amazon-s3-bucket-locally/</id><summary type="html">
&lt;p&gt;I’ve recently been toying with my &lt;a class="reference external" href="https://rpi.syslog.tv/"&gt;Raspberry Pi mirror&lt;/a&gt; including
moving it out on to Amazon’s S3. I’ve written an article on &lt;a class="reference external" href="https://syslog.tv/2012/02/29/backup-a-linux-server-to-amazon-s3-on-debian-6ubuntu-10-04/"&gt;how to back
up to S3&lt;/a&gt;, but that isn’t enough when it comes to serving data
from S3.&lt;/p&gt;
&lt;p&gt;I needed the ability to &lt;span class="caps"&gt;RSYNC&lt;/span&gt; data from the official Raspberry Pi
servers on to mine and then in to S3 and for that I used &lt;a class="reference external" href="https://code.google.com/p/s3fs/"&gt;s3fs&lt;/a&gt; and
&lt;a class="reference external" href="https://fuse.sourceforge.net/"&gt;&lt;span class="caps"&gt;FUSE&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="fuse-1"&gt;
&lt;h2&gt;&lt;span class="caps"&gt;FUSE&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;You can actually do this successfully without requiring &lt;span class="caps"&gt;FUSE&lt;/span&gt;, just by
installing the s3fs binary on to your system, but this only allows the
user who mounted to access the mounted bucket and also is not possible
via /etc/fstab.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;FUSE&lt;/span&gt; allows you to implement a filesystem within a userspace program,
thus allowing us to give other users access and auto-mount using /etc/fstab.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;div class="section" id="fuse-2"&gt;
&lt;h3&gt;Fuse&lt;/h3&gt;
&lt;p&gt;Installing &lt;span class="caps"&gt;FUSE&lt;/span&gt; is simple&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install fuse-utils
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="s3fs-1"&gt;
&lt;h3&gt;s3fs&lt;/h3&gt;
&lt;p&gt;We …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">
&lt;p&gt;I’ve recently been toying with my &lt;a class="reference external" href="https://rpi.syslog.tv/"&gt;Raspberry Pi mirror&lt;/a&gt; including
moving it out on to Amazon’s S3. I’ve written an article on &lt;a class="reference external" href="https://syslog.tv/2012/02/29/backup-a-linux-server-to-amazon-s3-on-debian-6ubuntu-10-04/"&gt;how to back
up to S3&lt;/a&gt;, but that isn’t enough when it comes to serving data
from S3.&lt;/p&gt;
&lt;p&gt;I needed the ability to &lt;span class="caps"&gt;RSYNC&lt;/span&gt; data from the official Raspberry Pi
servers on to mine and then in to S3 and for that I used &lt;a class="reference external" href="https://code.google.com/p/s3fs/"&gt;s3fs&lt;/a&gt; and
&lt;a class="reference external" href="https://fuse.sourceforge.net/"&gt;&lt;span class="caps"&gt;FUSE&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="fuse-1"&gt;
&lt;h2&gt;&lt;span class="caps"&gt;FUSE&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;You can actually do this successfully without requiring &lt;span class="caps"&gt;FUSE&lt;/span&gt;, just by
installing the s3fs binary on to your system, but this only allows the
user who mounted to access the mounted bucket and also is not possible
via /etc/fstab.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;FUSE&lt;/span&gt; allows you to implement a filesystem within a userspace program,
thus allowing us to give other users access and auto-mount using /etc/fstab.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;div class="section" id="fuse-2"&gt;
&lt;h3&gt;Fuse&lt;/h3&gt;
&lt;p&gt;Installing &lt;span class="caps"&gt;FUSE&lt;/span&gt; is simple&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install fuse-utils
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="s3fs-1"&gt;
&lt;h3&gt;s3fs&lt;/h3&gt;
&lt;p&gt;We’ll need to get build-essential, pkg-config, libfuse-dev,
libcurl4-openssl-dev and libxml2-dev to be able to compile s3fs&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install build-essential pkg-config libfuse-dev libcurl4-openssl-dev libxml2-dev
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="debian-5-ubuntu-10-04"&gt;
&lt;h4&gt;Debian 5 &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Ubuntu 10.04&lt;/h4&gt;
&lt;p&gt;If installing either Debian 5 or Ubuntu 10.04, you’ll need to install a
newer version of fuse than is packaged, I found this info on the &lt;a class="reference external" href="https://code.google.com/p/s3fs/issues/detail?id=143#c2"&gt;s3fs
issue tracker&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First we need to remove the install fuse-utils and libfuse-dev that we
install above.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get purge fuse-utils libfuse-dev
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You’ll need to export a variable with your arch, i.e&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PLATFORM&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;amd64
wget https://ftp.us.debian.org/debian/pool/main/f/fuse/libfuse2_2.8.4-1.1_&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PLATFORM&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.deb
wget https://ftp.us.debian.org/debian/pool/main/f/fuse/libfuse-dev_2.8.4-1.1_&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PLATFORM&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.deb
wget https://ftp.us.debian.org/debian/pool/main/f/fuse/fuse-utils_2.8.4-1.1_&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PLATFORM&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.deb
sudo dpkg -i libfuse2_2.8.4-1.1_&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PLATFORM&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.deb libfuse-dev_2.8.4-1.1_&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PLATFORM&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.deb fuse-utils_2.8.4-1.1_&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PLATFORM&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;.deb
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Fix missing dependencies&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get -f install
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now run the command below and confirm the output&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pkg-config --modversion fuse
&lt;span class="m"&gt;2&lt;/span&gt;.8.4
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;s3fs has to be done manually, first off go download the latest revision
archive from &lt;a class="reference external" href="https://code.google.com/p/s3fs/downloads/list"&gt;Google code&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Once download, gunzip and untar it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tar xvzf s3fs-x.xx.tar.gz
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Change directory in to your newly extracted archive, and configure.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./configure --exec-prefix&lt;span class="o"&gt;=&lt;/span&gt;/usr/ --prefix&lt;span class="o"&gt;=&lt;/span&gt;/ --includedir&lt;span class="o"&gt;=&lt;/span&gt;/usr/include/ --mandir&lt;span class="o"&gt;=&lt;/span&gt;/usr/share/man/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This configure command will install the s3fs binary in to /usr/bin and
man pages in to /usr/share/man/ which is Debian and Ubuntu correct locations.&lt;/p&gt;
&lt;p&gt;Then you’ll need to compile and install.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make
sudo make install
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;You’ll noticed I only run make install as sudo/root, because the other
commands do not require it and you should never compile as root.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="configure-s3fs"&gt;
&lt;h2&gt;Configure s3fs&lt;/h2&gt;
&lt;p&gt;The only configuration you need to do for s3fs is store your S3
credential which you can get &lt;a class="reference external" href="https://aws-portal.amazon.com/gp/aws/securityCredentials"&gt;the Amazon website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Create a file called &lt;strong&gt;/etc/passwd-s3fs&lt;/strong&gt; - &lt;strong&gt;&lt;span class="caps"&gt;MAKE&lt;/span&gt; &lt;span class="caps"&gt;SURE&lt;/span&gt; &lt;span class="caps"&gt;YOU&lt;/span&gt; &lt;span class="caps"&gt;DON&lt;/span&gt;’T &lt;span class="caps"&gt;BREAK&lt;/span&gt; /etc/passwd&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In it you need to put your access key &lt;span class="caps"&gt;ID&lt;/span&gt; and secret access key,
separated with a colon.&lt;/p&gt;
&lt;blockquote&gt;
ACCESS_KEY_ID:SECRET_ACCESS_KEY&lt;/blockquote&gt;
&lt;p&gt;And for security reasons, change the file permissions&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo chmod &lt;span class="m"&gt;0600&lt;/span&gt; /etc/passwd-s3fs
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="mounting"&gt;
&lt;h2&gt;Mounting&lt;/h2&gt;
&lt;div class="section" id="manual"&gt;
&lt;h3&gt;Manual&lt;/h3&gt;
&lt;p&gt;Once all the above is done you can mount a bucket using the s3fs binary,
I’m going to mount directly to /mnt&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo s3fs your-bucket-name /mnt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will mount it and make it usable for your user.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fstab"&gt;
&lt;h3&gt;fstab&lt;/h3&gt;
&lt;p&gt;Mounting via fstab requires the above &lt;span class="caps"&gt;FUSE&lt;/span&gt; step to be completed.&lt;/p&gt;
&lt;p&gt;Your &lt;strong&gt;/etc/fstab&lt;/strong&gt; entry should look like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;s3fs#your-bucket-name /mnt fuse allow_other,_netdev,nosuid,nodev,url&lt;span class="o"&gt;=&lt;/span&gt;https://s3.amazonaws.com &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A brief description of the mount arguments;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;allow_other&lt;/strong&gt; - allow all users to access the mount point,&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;_netdev&lt;/strong&gt; - The filesystem resides on a device that requires
network access,&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;nosuid&lt;/strong&gt; - Do not allow set-user-identifier or set-group-identifier
bits to take effect,&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;nodev&lt;/strong&gt; - Do not interpret character or block special devices on
the file system and&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;url&lt;/strong&gt; - Use &lt;span class="caps"&gt;HTTPS&lt;/span&gt; instead of &lt;span class="caps"&gt;HTTP&lt;/span&gt; when configure as above&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="tutorials"></category><category term="aws"></category><category term="fstab"></category><category term="fuse"></category><category term="mount"></category><category term="s3"></category><category term="s3fs"></category></entry><entry><title>Backup a Linux server to Amazon S3 on Debian 6/Ubuntu 10.04</title><link href="https://kura.gg/2012/02/29/backup-a-linux-server-to-amazon-s3-on-debian-6ubuntu-10-04/" rel="alternate"></link><published>2012-02-29T20:55:00+00:00</published><updated>2012-02-29T20:55:00+00:00</updated><author><name>kura</name></author><id>tag:kura.gg,2012-02-29:/2012/02/29/backup-a-linux-server-to-amazon-s3-on-debian-6ubuntu-10-04/</id><summary type="html">
&lt;p&gt;I have several servers powering syslog including it’s &lt;a class="reference external" href="https://rpi.syslog.tv/"&gt;Raspberry Pi&lt;/a&gt;
mirror, load balancer and email servers. All of my servers are hosted
using &lt;a class="reference external" href="https://www.linode.com/?r=8d58820f89940a1a68832c0cdd53109727cfa622"&gt;Linode&lt;/a&gt; in their London data centre and have Linode’s back-up
system doing both daily and weekly snapshots.&lt;/p&gt;
&lt;p&gt;For the app and database servers I do server-side backups storing each
website and it’s database in it’s own folder within /backup in case I
require a quick back-up to fix something, rather than the server has died.&lt;/p&gt;
&lt;p&gt;This is all well and good but I like having an off-site backup too and
for that I use &lt;a class="reference external" href="https://aws.amazon.com/s3/"&gt;S3&lt;/a&gt;…&lt;/p&gt;
&lt;div class="section" id="about-s3"&gt;
&lt;h2&gt;About S3&lt;/h2&gt;
&lt;p&gt;Amazon’s S3 is pretty cheap and very easy to use. Because only data is
going in you don’t pay a transfer fee and the cost of storage is very
affordable, you can see a &lt;a class="reference external" href="https://aws.amazon.com/s3/#pricing"&gt;pricing list here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To do the backup I use a …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
&lt;p&gt;I have several servers powering syslog including it’s &lt;a class="reference external" href="https://rpi.syslog.tv/"&gt;Raspberry Pi&lt;/a&gt;
mirror, load balancer and email servers. All of my servers are hosted
using &lt;a class="reference external" href="https://www.linode.com/?r=8d58820f89940a1a68832c0cdd53109727cfa622"&gt;Linode&lt;/a&gt; in their London data centre and have Linode’s back-up
system doing both daily and weekly snapshots.&lt;/p&gt;
&lt;p&gt;For the app and database servers I do server-side backups storing each
website and it’s database in it’s own folder within /backup in case I
require a quick back-up to fix something, rather than the server has died.&lt;/p&gt;
&lt;p&gt;This is all well and good but I like having an off-site backup too and
for that I use &lt;a class="reference external" href="https://aws.amazon.com/s3/"&gt;S3&lt;/a&gt;…&lt;/p&gt;
&lt;div class="section" id="about-s3"&gt;
&lt;h2&gt;About S3&lt;/h2&gt;
&lt;p&gt;Amazon’s S3 is pretty cheap and very easy to use. Because only data is
going in you don’t pay a transfer fee and the cost of storage is very
affordable, you can see a &lt;a class="reference external" href="https://aws.amazon.com/s3/#pricing"&gt;pricing list here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To do the backup I use a daily cron job which then uploads the data to
S3 using &lt;a class="reference external" href="https://s3tools.org/s3cmd"&gt;s3cmd&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;Download the S3 tools package list in to apt&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo wget -O- -q https://s3tools.org/repo/deb-all/stable/s3tools.key &lt;span class="p"&gt;|&lt;/span&gt; sudo apt-key add -
sudo wget https://s3tools.org/repo/deb-all/stable/s3tools.list -O /etc/apt/sources.list.d/s3tools.list
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Update your package list and install s3cmd&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get install s3cmd
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="configuration"&gt;
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;You’ll need to configure the tool to work with your &lt;span class="caps"&gt;AWS&lt;/span&gt; account, so run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo s3cmd --configure
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When prompted, fill in your access and secret key which you can find
&lt;a class="reference external" href="https://aws-portal.amazon.com/gp/aws/securityCredentials"&gt;on the Amazone website&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When asked to provide an encryption password, I choose yes but you can
say no.&lt;/p&gt;
&lt;p&gt;When asking if you want to use &lt;span class="caps"&gt;HTTPS&lt;/span&gt;, I choose yes but again, you can
say no, it really depends on how secure you want the data transfer.&lt;/p&gt;
&lt;p&gt;I would suggest using an encryption password and enabling &lt;span class="caps"&gt;HTTPS&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="using-s3cmd"&gt;
&lt;h2&gt;Using s3cmd&lt;/h2&gt;
&lt;p&gt;Now that s3cmd is installed and configured you can use it.&lt;/p&gt;
&lt;p&gt;You can create a bucket using the s3cmd command below, but as far as I
know you can’t select a location so I create my buckets manually
&lt;a class="reference external" href="https://console.aws.amazon.com/s3/home"&gt;on the web interface&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;s3cmd mb s3://your-bucket-name
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once done you can see a list of available buckets with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;s3cmd ls
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As shown below&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;s3cmd ls

&lt;span class="m"&gt;2012&lt;/span&gt;-02-29 &lt;span class="m"&gt;20&lt;/span&gt;:28 s3://kura-linode-test
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that this is done we can put some data in there, create a test file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"this is a test"&lt;/span&gt; &amp;gt; test.file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And put it in S3&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;s3cmd put test.file s3://your-bucket-name/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can see it using&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;s3cmd ls s3://your-bucket-name
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Download it with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;s3cmd get s3://your-bucket-name/test.file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And delete it with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;s3cmd del s3://your-bucket-name/test.file
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once satisfied with this you can create a shell script to automate some
backups for you, I’ll provide a simple one below that uploads my home directory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="example"&gt;
&lt;h2&gt;Example&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/sh&lt;/span&gt;
s3cmd sync --recursive --skip-existing /home/kura
s3://kura-linode-test/
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="tutorials"></category><category term="amazon"></category><category term="aws"></category><category term="backup"></category><category term="debian"></category><category term="s3"></category><category term="ubuntu"></category></entry><entry><title>Automatic/Unattended updates on Debian 6 (Squeeze)</title><link href="https://kura.gg/2012/01/28/automaticunattended-updates-on-debian-6-squeeze/" rel="alternate"></link><published>2012-01-28T17:41:00+00:00</published><updated>2012-01-28T17:41:00+00:00</updated><author><name>kura</name></author><id>tag:kura.gg,2012-01-28:/2012/01/28/automaticunattended-updates-on-debian-6-squeeze/</id><summary type="html">
&lt;p&gt;The unattended-upgrades package used on Debian is based on the one from
Ubuntu. It is generally pretty safe in my opinion but I only ever enable
it for security upgrades.&lt;/p&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt-get install unattended-upgrades apticron
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;unattended-upgrades&lt;/em&gt; handles the actual updates, &lt;em&gt;apticron&lt;/em&gt; is used for
emailing you of available updates - it is not required but I like it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="configuring-unattended-upgrades"&gt;
&lt;h2&gt;Configuring unattended-upgrades&lt;/h2&gt;
&lt;p&gt;Open up &lt;strong&gt;/etc/apt/apt.conf.d/50unattended-upgrades&lt;/strong&gt; and change it to
the content below.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
APT::Periodic::Enable "1";
APT::Periodic::Update-Package-Lists "1";
APT::Periodic::AutocleanInterval "7";
APT::Periodic::Unattended-Upgrade "1";
Unattended-Upgrade::Mail "**YOUR_EMAIL_HERE**";

// Automatically upgrade packages from these (origin, archive) pairs
Unattended-Upgrade::Allowed-Origins {
    "${distro_id} stable";
    "${distro_id} ${distro_codename}-security";
};

// Automatically reboot *WITHOUT CONFIRMATION* if a
 // the file /var/run/reboot-required is found after the upgrade
 Unattended-Upgrade::Automatic-Reboot "false";
&lt;/pre&gt;
&lt;p&gt;So lets explain the above. As you can see we enable periodic updates,
enable update package lists (triggers …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
&lt;p&gt;The unattended-upgrades package used on Debian is based on the one from
Ubuntu. It is generally pretty safe in my opinion but I only ever enable
it for security upgrades.&lt;/p&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt-get install unattended-upgrades apticron
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;unattended-upgrades&lt;/em&gt; handles the actual updates, &lt;em&gt;apticron&lt;/em&gt; is used for
emailing you of available updates - it is not required but I like it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="configuring-unattended-upgrades"&gt;
&lt;h2&gt;Configuring unattended-upgrades&lt;/h2&gt;
&lt;p&gt;Open up &lt;strong&gt;/etc/apt/apt.conf.d/50unattended-upgrades&lt;/strong&gt; and change it to
the content below.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
APT::Periodic::Enable "1";
APT::Periodic::Update-Package-Lists "1";
APT::Periodic::AutocleanInterval "7";
APT::Periodic::Unattended-Upgrade "1";
Unattended-Upgrade::Mail "**YOUR_EMAIL_HERE**";

// Automatically upgrade packages from these (origin, archive) pairs
Unattended-Upgrade::Allowed-Origins {
    "${distro_id} stable";
    "${distro_id} ${distro_codename}-security";
};

// Automatically reboot *WITHOUT CONFIRMATION* if a
 // the file /var/run/reboot-required is found after the upgrade
 Unattended-Upgrade::Automatic-Reboot "false";
&lt;/pre&gt;
&lt;p&gt;So lets explain the above. As you can see we enable periodic updates,
enable update package lists (triggers an apt-get update), enable
autoclean to clean out the local package repository every 7 days, enable
the actual unattended update and finally you can set your email address
so that you will get an email when an update has happened.
Next up we configure the origins to update from, as you can see we’ve
only enabled security and as a very final step we make sure we’ve
disabled automatic reboots - you probably don’t want your server
randomly rebooting to update the running kernel, this means you will
have to reboot when convenient after a kernel update.&lt;/p&gt;
&lt;p&gt;Your unattended update will happen every day, triggered by
&lt;strong&gt;cron.daily&lt;/strong&gt;. Next time your cron.daily has triggered, look inside
&lt;strong&gt;/var/log/unattended-upgrades/unattended-upgrades.log&lt;/strong&gt;, you should see
something like this&lt;/p&gt;
&lt;pre class="literal-block"&gt;
2012-01-28 06:54:04,730 INFO Initial blacklisted packages:
2012-01-28 06:54:04,730 INFO Starting unattended upgrades script
2012-01-28 06:54:04,731 INFO Allowed origins are: ["('Debian','squeeze-security')"]
2012-01-28 06:54:05,952 INFO No packages found that can be upgraded unattended
&lt;/pre&gt;
&lt;p&gt;If you installed apticron in the above step and want to configure it and
use it then continue reading, if not then congratulations everything is done.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="configuring-apticron"&gt;
&lt;h2&gt;Configuring apticron&lt;/h2&gt;
&lt;p&gt;Open up &lt;strong&gt;/etc/apticron/apticron.conf&lt;/strong&gt;, all you need to change is the
&lt;strong&gt;&lt;span class="caps"&gt;EMAIL&lt;/span&gt;&lt;/strong&gt; option.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
EMAIL="**YOUR_EMAIL_HERE**"
&lt;/pre&gt;
&lt;p&gt;Now each day you will receive an email when &lt;strong&gt;cron.daily&lt;/strong&gt; runs with all
available package updates.&lt;/p&gt;
&lt;/div&gt;
</content><category term="tutorials"></category><category term="automatic update"></category><category term="debian"></category><category term="unattended-upgrades"></category><category term="update"></category></entry><entry><title>Running your own PGP keyserver with SKS on Debian 6/Ubuntu 10.04</title><link href="https://kura.gg/2011/12/17/running-your-own-pgp-keyserver-with-sks-on-debian-6ubuntu-10-04/" rel="alternate"></link><published>2011-12-17T15:58:00+00:00</published><updated>2011-12-17T15:58:00+00:00</updated><author><name>kura</name></author><id>tag:kura.gg,2011-12-17:/2011/12/17/running-your-own-pgp-keyserver-with-sks-on-debian-6ubuntu-10-04/</id><summary type="html">
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;To install we need to run the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install -y sks
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we build the key database:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo sks build
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And change the permissions for the sks user:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo chown -R debian-sks:debian-sks /var/lib/sks/DB
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next we need to make sks start from init, open up &lt;strong&gt;/etc/default/sks&lt;/strong&gt;
in your favourite editor and &lt;strong&gt;*initstart*&lt;/strong&gt; to look like below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;initstart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;yes
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can start the service with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /etc/init.d/sks start
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Your keyserver will now be up and running on port 11371.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="web-interface"&gt;
&lt;h2&gt;Web interface&lt;/h2&gt;
&lt;p&gt;We’ll need to create a web folder within sks with the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo mkdir -p /var/lib/sks/www/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Change it’s permissions so the sks user can access it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo chown -R debian-sks:debian-sks /var/lib/sks/www
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And finally we need create a single &lt;span class="caps"&gt;HTML&lt;/span&gt; file for the interface, I have
provided that …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;To install we need to run the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install -y sks
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we build the key database:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo sks build
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And change the permissions for the sks user:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo chown -R debian-sks:debian-sks /var/lib/sks/DB
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next we need to make sks start from init, open up &lt;strong&gt;/etc/default/sks&lt;/strong&gt;
in your favourite editor and &lt;strong&gt;*initstart*&lt;/strong&gt; to look like below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;initstart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;yes
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can start the service with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /etc/init.d/sks start
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Your keyserver will now be up and running on port 11371.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="web-interface"&gt;
&lt;h2&gt;Web interface&lt;/h2&gt;
&lt;p&gt;We’ll need to create a web folder within sks with the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo mkdir -p /var/lib/sks/www/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Change it’s permissions so the sks user can access it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo chown -R debian-sks:debian-sks /var/lib/sks/www
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And finally we need create a single &lt;span class="caps"&gt;HTML&lt;/span&gt; file for the interface, I have
provided that too.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo wget /files/sks-index.html -O /var/lib/sks/www/index.html
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now your &lt;span class="caps"&gt;PGP&lt;/span&gt; server should be accessible from a web browser at
&lt;a class="reference external" href="https://YOUR_SERVER:11371/"&gt;https://YOUR_SERVER:11371/&lt;/a&gt; and it should look like mine
&lt;a class="reference external" href="https://syslog.tv/"&gt;:11371/&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="tutorials"></category><category term="debian"></category><category term="keyserver"></category><category term="pgp"></category><category term="sks"></category><category term="ubuntu"></category></entry><entry><title>Host git repositories with git, gitosis and gitweb on Debian 6/Ubuntu 10.04</title><link href="https://kura.gg/2011/12/17/host-git-repositories-with-git-gitosis-and-gitweb-on-debian-6ubuntu-10-04/" rel="alternate"></link><published>2011-12-17T15:40:00+00:00</published><updated>2011-12-17T15:40:00+00:00</updated><author><name>kura</name></author><id>tag:kura.gg,2011-12-17:/2011/12/17/host-git-repositories-with-git-gitosis-and-gitweb-on-debian-6ubuntu-10-04/</id><summary type="html">
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;First up we’ll need to install git and some Python tools to get Gitosis installed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install -y git-core gitweb python-setuptools
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next we have to clone gitosis from it’s git repository and install it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /tmp
git clone git://eagain.net/gitosis.git
&lt;span class="nb"&gt;cd&lt;/span&gt; gitosis
sudo python setup.py install
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="adding-your-git-user"&gt;
&lt;h2&gt;Adding your git user&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo adduser --system --shell /bin/sh --gecos &lt;span class="s1"&gt;'git version control'&lt;/span&gt; --group --disabled-password --home /home/git git
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above command creates a new system user with &lt;strong&gt;/bin/sh&lt;/strong&gt; as it’s
shell with &lt;strong&gt;no password&lt;/strong&gt; and a homedir of &lt;strong&gt;/home/git/&lt;/strong&gt; and also
creates a group with the same name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="initialising-gitosis"&gt;
&lt;h2&gt;Initialising gitosis&lt;/h2&gt;
&lt;p&gt;You’ll need an &lt;span class="caps"&gt;SSH&lt;/span&gt; key for this, if you have one simply copy the
contents of it to your new git server, if you do not have one then you
can generate one on your machine using&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh-keygen
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;First up we’ll need to install git and some Python tools to get Gitosis installed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install -y git-core gitweb python-setuptools
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next we have to clone gitosis from it’s git repository and install it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /tmp
git clone git://eagain.net/gitosis.git
&lt;span class="nb"&gt;cd&lt;/span&gt; gitosis
sudo python setup.py install
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="adding-your-git-user"&gt;
&lt;h2&gt;Adding your git user&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo adduser --system --shell /bin/sh --gecos &lt;span class="s1"&gt;'git version control'&lt;/span&gt; --group --disabled-password --home /home/git git
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above command creates a new system user with &lt;strong&gt;/bin/sh&lt;/strong&gt; as it’s
shell with &lt;strong&gt;no password&lt;/strong&gt; and a homedir of &lt;strong&gt;/home/git/&lt;/strong&gt; and also
creates a group with the same name.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="initialising-gitosis"&gt;
&lt;h2&gt;Initialising gitosis&lt;/h2&gt;
&lt;p&gt;You’ll need an &lt;span class="caps"&gt;SSH&lt;/span&gt; key for this, if you have one simply copy the
contents of it to your new git server, if you do not have one then you
can generate one on your machine using&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh-keygen
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then copy the contents to your server.&lt;/p&gt;
&lt;p&gt;My file was copied to &lt;strong&gt;/tmp/kura.pub&lt;/strong&gt; so to initialise I used&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo -H -u git gitosis-init &amp;lt; /tmp/kura.pub
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;*This command &lt;span class="caps"&gt;MUST&lt;/span&gt; be run as sudo.*&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You need to do the same but replacing &lt;strong&gt;kura.pub&lt;/strong&gt; with your own key, it
has to end in .pub&lt;/p&gt;
&lt;div class="section" id="a-note-on-key-format"&gt;
&lt;h3&gt;A note on key format&lt;/h3&gt;
&lt;p&gt;One of my users (&lt;a class="reference external" href="https://syslog.tv/2011/12/17/host-git-repositories-with-git-gitosis-and-gitweb-on-debian-6ubuntu-10-04/#comment-374"&gt;@gump&lt;/a&gt;) had an issue where Gitosis would complain
about his username having invalid characters&lt;/p&gt;
&lt;pre class="literal-block"&gt;
gitosis.init.InsecureSSHKeyUsername: Username contains not allowed
characters
&lt;/pre&gt;
&lt;p&gt;This is because Gitosis expects your key to have a username and host at
the end of the base64 string like below&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ssh-rsa AAAAB3NzaC1yc2EA ... NOHgpPwEBzpnw== kura@odin
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="configuring-and-controlling-gitosis"&gt;
&lt;h2&gt;Configuring and controlling gitosis&lt;/h2&gt;
&lt;p&gt;Now that git and gitosis are working on your server, from your local
machine you now need to clone your gitosis admin and do all your changes
locally, pushing them back to the git server where gitosis will
automatically pick them up.&lt;/p&gt;
&lt;p&gt;So you need to run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone git@YOUR_SERVER:gitosis-admin.git
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If everything worked correctly you should have a copy on your local
machine now, if you run &lt;strong&gt;ls&lt;/strong&gt; you’ll see 1 file and a directory.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;gitosis.conf&lt;/li&gt;
&lt;li&gt;keydir&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Unsurprisingly gitosis.conf is where gitosis is configured and keydir
contains public keys for your users. Each user needs their own public
key and it must end in &lt;em&gt;.pub&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;So open up &lt;strong&gt;gitosis.conf&lt;/strong&gt; in your favourite editor and add the following&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[gitosis]&lt;/span&gt;
&lt;span class="na"&gt;gitweb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;yes&lt;/span&gt;

&lt;span class="k"&gt;[group admins]&lt;/span&gt;
&lt;span class="na"&gt;writable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;gitosis-admin test1&lt;/span&gt;
&lt;span class="na"&gt;members&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;kura&lt;/span&gt;

&lt;span class="k"&gt;[repo gitosis-admin]&lt;/span&gt;
&lt;span class="na"&gt;description&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;Gitosis admin repository&lt;/span&gt;
&lt;span class="na"&gt;gitweb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;yes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So lets separate that in to parts.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Part 1&lt;/strong&gt; - we simply tell gitosis to enable gitweb support.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Part 2&lt;/strong&gt; - we configure a group called &lt;strong&gt;*admins*&lt;/strong&gt;, the admins group
has write permissions to 2 repositories; &lt;strong&gt;*gitosis-admin*&lt;/strong&gt; and
&lt;strong&gt;*test*&lt;/strong&gt;. The test repository will automatically become available once
we push this configuration back to gitosis later. We also define a user
called &lt;strong&gt;kura&lt;/strong&gt; which you should replace with your own username, &lt;strong&gt;each
user must have a public key in the keydir with the same name as the user
with .pub suffix. E.g. the kura user has a key called kura.pub&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Part 3&lt;/strong&gt; - We create a repository section which is only really used
for gitweb to tell it to display that repository publicly via a browser.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you do not want your repositories to be public then I advice you
skip the parts with gitweb = yes above and also uninstall gitweb and
skip the gitweb section below. Or you could lock your gitweb via
&lt;span class="caps"&gt;HTAUTH&lt;/span&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Now the changes have been made you need to commit them to git.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git add *
git commit -m &lt;span class="s2"&gt;"Initial configuration"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And push them back to the server&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git push origin master
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that is done you can test your access to the test repository created earlier.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone git@YOUR_SERVER:test.git
&lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Hello world"&lt;/span&gt; &amp;gt; hello
git add hello
git commit -m &lt;span class="s2"&gt;"Test"&lt;/span&gt;
git push origin master
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If the above works then congratulations, everything is good.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="adding-users-and-repositories"&gt;
&lt;h2&gt;Adding users and repositories&lt;/h2&gt;
&lt;div class="section" id="users"&gt;
&lt;h3&gt;Users&lt;/h3&gt;
&lt;p&gt;To add a user to gitosis you need to add them to a group and put a
public key with username.pub as the naming format in to keydir.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="repositories"&gt;
&lt;h3&gt;Repositories&lt;/h3&gt;
&lt;p&gt;You simply need to name it in a writable section of a group and it’ll
instantly be accessible. If you want to make it public in gitweb then
you’ll need to a [repo] section as shown above.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="configure-gitweb"&gt;
&lt;h2&gt;Configure gitweb&lt;/h2&gt;
&lt;p&gt;Open up &lt;strong&gt;/etc/gitweb.conf&lt;/strong&gt; in your favourite editor and change
&lt;strong&gt;*$projectroot*&lt;/strong&gt; to&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;$projectroot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"/home/git/repositories/"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You will also need to add the Apache user to the git group&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo usermod -G www-data,git www-data
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;By default Debian and Ubuntu will symlink in an Apache2 config to
&lt;strong&gt;/etc/apache2/conf.d/gitweb&lt;/strong&gt; which is accessible from a browser on
&lt;a class="reference external" href="https://YOUR_SERVER/gitweb"&gt;https://YOUR_SERVER/gitweb&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="tutorials"></category><category term="debian"></category><category term="git"></category><category term="gitosis"></category><category term="gitweb"></category><category term="ubuntu"></category></entry><entry><title>Rebooting on OOM</title><link href="https://kura.gg/2011/10/25/rebooting-on-oom/" rel="alternate"></link><published>2011-10-25T10:26:00+01:00</published><updated>2011-10-25T10:26:00+01:00</updated><author><name>kura</name></author><id>tag:kura.gg,2011-10-25:/2011/10/25/rebooting-on-oom/</id><summary type="html">
&lt;p&gt;&lt;strong&gt;*I would generally not advise using this unless you have skill at
debugging why &lt;span class="caps"&gt;OOM&lt;/span&gt; has spawned and also debugging kernel panics after
they happen, from logs.*&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It is possible to configure your kernel to panic when &lt;span class="caps"&gt;OOM&lt;/span&gt; is spawned,
which in itself is not useful but, coupled with a kernel option for
auto-rebooting a system when the kernel panics it can be a very useful tool.&lt;/p&gt;
&lt;p&gt;Think before implementing this and use at your own risk, I take zero
responsibility for you using this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo sysctl vm.panic_on_oom&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
sudo sysctl kernel.panic&lt;span class="o"&gt;=&lt;/span&gt;X &lt;span class="c1"&gt;# X is the amount of seconds to wait before rebooting&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;*&lt;span class="caps"&gt;DO&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt; &lt;span class="caps"&gt;FORGET&lt;/span&gt; &lt;span class="caps"&gt;TO&lt;/span&gt; &lt;span class="caps"&gt;CHANGE&lt;/span&gt; X*&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This will inject the changes in to a system that is currently running
but will be forgotten on reboot so use the lines below to save permanently.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"vm.panic_on_oom=1"&lt;/span&gt; &amp;gt;&amp;gt; /etc/sysctl.conf …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">
&lt;p&gt;&lt;strong&gt;*I would generally not advise using this unless you have skill at
debugging why &lt;span class="caps"&gt;OOM&lt;/span&gt; has spawned and also debugging kernel panics after
they happen, from logs.*&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It is possible to configure your kernel to panic when &lt;span class="caps"&gt;OOM&lt;/span&gt; is spawned,
which in itself is not useful but, coupled with a kernel option for
auto-rebooting a system when the kernel panics it can be a very useful tool.&lt;/p&gt;
&lt;p&gt;Think before implementing this and use at your own risk, I take zero
responsibility for you using this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo sysctl vm.panic_on_oom&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
sudo sysctl kernel.panic&lt;span class="o"&gt;=&lt;/span&gt;X &lt;span class="c1"&gt;# X is the amount of seconds to wait before rebooting&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;*&lt;span class="caps"&gt;DO&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt; &lt;span class="caps"&gt;FORGET&lt;/span&gt; &lt;span class="caps"&gt;TO&lt;/span&gt; &lt;span class="caps"&gt;CHANGE&lt;/span&gt; X*&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This will inject the changes in to a system that is currently running
but will be forgotten on reboot so use the lines below to save permanently.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"vm.panic_on_oom=1"&lt;/span&gt; &amp;gt;&amp;gt; /etc/sysctl.conf
sudo &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"kernel.panic=X"&lt;/span&gt; &amp;gt;&amp;gt; /etc/sysctl.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;*X is the amount of seconds to wait before rebooting. &lt;span class="caps"&gt;DO&lt;/span&gt; &lt;span class="caps"&gt;NOT&lt;/span&gt; &lt;span class="caps"&gt;FORGET&lt;/span&gt; &lt;span class="caps"&gt;TO&lt;/span&gt;
&lt;span class="caps"&gt;CHANGE&lt;/span&gt; X*&lt;/strong&gt;&lt;/p&gt;
&lt;div class="section" id="testing"&gt;
&lt;h2&gt;Testing&lt;/h2&gt;
&lt;p&gt;You can test the changes with a simple C program. &lt;strong&gt;Please note if you
run this you do so at your own risk&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#define MB 10485760&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MB&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;memset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MB&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Allocating %d MB&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="compilation"&gt;
&lt;h2&gt;Compilation&lt;/h2&gt;
&lt;p&gt;You can download the &lt;a class="reference external" href="/files/oom.c"&gt;source here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To compile run the command below&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gcc -O2 oom.c -o oom
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or download a &lt;a class="reference external" href="/files/oom"&gt;pre-compiled version here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="usage"&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;And simply run it using&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./oom
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After a short period of time allocating and using &lt;span class="caps"&gt;10MB&lt;/span&gt; chunks of memory
your system should run out and restart.&lt;/p&gt;
&lt;/div&gt;
</content><category term="tutorials"></category><category term="kernel panic"></category><category term="oom"></category><category term="reboot"></category></entry><entry><title>Nagios3 + MK Livestatus + xinetd on Debian 6/Ubuntu</title><link href="https://kura.gg/2011/10/13/nagios3-mk-livestatus-xinetd/" rel="alternate"></link><published>2011-10-13T23:17:00+01:00</published><updated>2011-10-13T23:17:00+01:00</updated><author><name>kura</name></author><id>tag:kura.gg,2011-10-13:/2011/10/13/nagios3-mk-livestatus-xinetd/</id><summary type="html">
&lt;div class="section" id="preparation"&gt;
&lt;h2&gt;Preparation&lt;/h2&gt;
&lt;p&gt;First we need to make sure we have all the stuff we need to compile mk
livestatus and run it&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install make build-essential xinetd ucspi-unix
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="mk-livestatus"&gt;
&lt;h2&gt;&lt;span class="caps"&gt;MK&lt;/span&gt; Livestatus&lt;/h2&gt;
&lt;p&gt;Grab the mk livestatus source from &lt;a class="reference external" href="https://mathias-kettner.de/check_mk_download.html"&gt;here&lt;/a&gt;, currently it’s version
1.1.10p3 but update the commands below to match your version.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget https://mathias-kettner.de/download/mk-livestatus-1.1.10p3.tar.gz
tar xvzf mk-livestatus-1.1.10p3.tar.gz
&lt;span class="nb"&gt;cd&lt;/span&gt; mk-livestatus-1.1.10p3
./configure
make
sudo make install
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="xinetd"&gt;
&lt;h2&gt;Xinetd&lt;/h2&gt;
&lt;p&gt;Now that it’s compiled we need to write a xinetd config for it, create a
new file called &lt;strong&gt;/etc/xinetd.d/livestatus&lt;/strong&gt; and put the following in it&lt;/p&gt;
&lt;pre class="literal-block"&gt;
service livestatus {
    type = UNLISTED
    port = 6557
    socket_type = stream
    protocol = tcp
    wait = no
    cps = 100 3
    instances = 500
    per_source = 250
    flags = NODELAY
    user = nagios
    server = /usr/bin/unixcat
    server_args = /var/lib/nagios3/rw/live
    only_from = 127.0.0 …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">
&lt;div class="section" id="preparation"&gt;
&lt;h2&gt;Preparation&lt;/h2&gt;
&lt;p&gt;First we need to make sure we have all the stuff we need to compile mk
livestatus and run it&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install make build-essential xinetd ucspi-unix
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="mk-livestatus"&gt;
&lt;h2&gt;&lt;span class="caps"&gt;MK&lt;/span&gt; Livestatus&lt;/h2&gt;
&lt;p&gt;Grab the mk livestatus source from &lt;a class="reference external" href="https://mathias-kettner.de/check_mk_download.html"&gt;here&lt;/a&gt;, currently it’s version
1.1.10p3 but update the commands below to match your version.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget https://mathias-kettner.de/download/mk-livestatus-1.1.10p3.tar.gz
tar xvzf mk-livestatus-1.1.10p3.tar.gz
&lt;span class="nb"&gt;cd&lt;/span&gt; mk-livestatus-1.1.10p3
./configure
make
sudo make install
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="xinetd"&gt;
&lt;h2&gt;Xinetd&lt;/h2&gt;
&lt;p&gt;Now that it’s compiled we need to write a xinetd config for it, create a
new file called &lt;strong&gt;/etc/xinetd.d/livestatus&lt;/strong&gt; and put the following in it&lt;/p&gt;
&lt;pre class="literal-block"&gt;
service livestatus {
    type = UNLISTED
    port = 6557
    socket_type = stream
    protocol = tcp
    wait = no
    cps = 100 3
    instances = 500
    per_source = 250
    flags = NODELAY
    user = nagios
    server = /usr/bin/unixcat
    server_args = /var/lib/nagios3/rw/live
    only_from = 127.0.0.1 # modify this to only allow specific hosts to connect, currenly localhost only
    disable = no
}
&lt;/pre&gt;
&lt;p&gt;Now we restart xinetd using&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /etc/init.d/xinetd restart
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="nagios3"&gt;
&lt;h2&gt;Nagios3&lt;/h2&gt;
&lt;p&gt;Now we need to open up &lt;strong&gt;/etc/nagios3/nagios.cfg&lt;/strong&gt; and add the following line&lt;/p&gt;
&lt;pre class="literal-block"&gt;
event_broker_options=-1 broker_module=/usr/local/lib/mk-livestatus/livestatus.o /var/lib/nagios3/rw/live
&lt;/pre&gt;
&lt;p&gt;Now we need to restart Nagios&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /etc/init.d/nagios3 restart
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you take a look in &lt;strong&gt;/var/log/nagios3/nagios.log&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo tail -n &lt;span class="m"&gt;100&lt;/span&gt; /var/log/nagios3/nagios.log
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;you should see something like below&lt;/p&gt;
&lt;pre class="literal-block"&gt;
[1318547328] livestatus: Livestatus 1.1.10p3 by Mathias Kettner. Socket: '/var/lib/nagios3/rw/live'
[1318547328] livestatus: Please visit us at https://mathias-kettner.de/
[1318547328] livestatus: Hint: please try out OMD - the Open Monitoring Distribution
[1318547328] livestatus: Please visit OMD at https://omdistro.org
[1318547328] Event broker module '/usr/local/lib/mk-livestatus/livestatus.o' initialized successfully.
&lt;/pre&gt;
&lt;p&gt;Also, we can ls the newly created socket&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ls -lah /var/lib/nagios3/rw/live

srw-rw---- &lt;span class="m"&gt;1&lt;/span&gt; nagios www-data &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="m"&gt;2011&lt;/span&gt;-10-14 &lt;span class="m"&gt;00&lt;/span&gt;:08 /var/lib/nagios3/rw/live
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can test is by creating a test file called host_query with the
following content&lt;/p&gt;
&lt;pre class="literal-block"&gt;
GET hosts
&lt;/pre&gt;
&lt;p&gt;And run the following command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo unixcat &amp;lt; host_query /var/lib/nagios3/rw/live
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If all worked you should see output.&lt;/p&gt;
&lt;/div&gt;
</content><category term="tutorials"></category><category term="mk livestatus"></category><category term="nagios"></category><category term="nagios 3"></category><category term="nagios broker"></category><category term="xinetd"></category></entry><entry><title>nginx config for reverse proxying Wordpress &amp; WP Super Cache and keeping the load off Apache2</title><link href="https://kura.gg/2011/09/30/nginx-config-for-reverse-proxying-wordpress-wp-super-cache-and-keeping-the-load-off-apache2/" rel="alternate"></link><published>2011-09-30T23:21:00+01:00</published><updated>2011-09-30T23:21:00+01:00</updated><author><name>kura</name></author><id>tag:kura.gg,2011-09-30:/2011/09/30/nginx-config-for-reverse-proxying-wordpress-wp-super-cache-and-keeping-the-load-off-apache2/</id><summary type="html">
&lt;div class="section" id="the-point"&gt;
&lt;h2&gt;The point&lt;/h2&gt;
&lt;p&gt;The whole point of this is to get as much load off of Apache as possible
to keep the server running nice and smoothly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="configuration"&gt;
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;The configuration below will mean that nginx will serve basically everything;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;static files&lt;/li&gt;
&lt;li&gt;uploaded files and&lt;/li&gt;
&lt;li&gt;cached content&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;simply replace the &lt;strong&gt;&lt;span class="caps"&gt;VARIABLES&lt;/span&gt;&lt;/strong&gt; below and everything should be good to
go, if copy-pasting from below isn’t working properly you can download a
full copy from &lt;a class="reference external" href="/files/2011/09/server.txt"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;**DOMAIN_HERE**&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;access_log&lt;/span&gt; &lt;span class="s"&gt;/var/log/nginx/access.**DOMAIN_HERE**.log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kn"&gt;gzip&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;gzip_disable&lt;/span&gt; &lt;span class="s"&gt;msie6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# disable gzip for IE6&lt;/span&gt;
  &lt;span class="kn"&gt;gzip_static&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;gzip_comp_level&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# highest level of compression&lt;/span&gt;
  &lt;span class="kn"&gt;gzip_proxied&lt;/span&gt; &lt;span class="s"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;gzip_types&lt;/span&gt; &lt;span class="s"&gt;text/plain&lt;/span&gt; &lt;span class="s"&gt;text/css&lt;/span&gt; &lt;span class="s"&gt;application/x-javascript&lt;/span&gt; &lt;span class="s"&gt;text/xml&lt;/span&gt; &lt;span class="s"&gt;application/xml&lt;/span&gt; &lt;span class="s"&gt;application/xml+rss&lt;/span&gt; &lt;span class="s"&gt;text/javascript&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kn"&gt;proxy_redirect&lt;/span&gt; &lt;span class="no"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;Host&lt;/span&gt; &lt;span class="nv"&gt;$host&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;X-Real-IP&lt;/span&gt; &lt;span class="nv"&gt;$remote_addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;X-Forwarded-For&lt;/span&gt; &lt;span class="nv"&gt;$proxy_add_x …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">
&lt;div class="section" id="the-point"&gt;
&lt;h2&gt;The point&lt;/h2&gt;
&lt;p&gt;The whole point of this is to get as much load off of Apache as possible
to keep the server running nice and smoothly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="configuration"&gt;
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;The configuration below will mean that nginx will serve basically everything;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;static files&lt;/li&gt;
&lt;li&gt;uploaded files and&lt;/li&gt;
&lt;li&gt;cached content&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;simply replace the &lt;strong&gt;&lt;span class="caps"&gt;VARIABLES&lt;/span&gt;&lt;/strong&gt; below and everything should be good to
go, if copy-pasting from below isn’t working properly you can download a
full copy from &lt;a class="reference external" href="/files/2011/09/server.txt"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;**DOMAIN_HERE**&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;access_log&lt;/span&gt; &lt;span class="s"&gt;/var/log/nginx/access.**DOMAIN_HERE**.log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kn"&gt;gzip&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;gzip_disable&lt;/span&gt; &lt;span class="s"&gt;msie6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# disable gzip for IE6&lt;/span&gt;
  &lt;span class="kn"&gt;gzip_static&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;gzip_comp_level&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# highest level of compression&lt;/span&gt;
  &lt;span class="kn"&gt;gzip_proxied&lt;/span&gt; &lt;span class="s"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;gzip_types&lt;/span&gt; &lt;span class="s"&gt;text/plain&lt;/span&gt; &lt;span class="s"&gt;text/css&lt;/span&gt; &lt;span class="s"&gt;application/x-javascript&lt;/span&gt; &lt;span class="s"&gt;text/xml&lt;/span&gt; &lt;span class="s"&gt;application/xml&lt;/span&gt; &lt;span class="s"&gt;application/xml+rss&lt;/span&gt; &lt;span class="s"&gt;text/javascript&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="kn"&gt;proxy_redirect&lt;/span&gt; &lt;span class="no"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;Host&lt;/span&gt; &lt;span class="nv"&gt;$host&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;X-Real-IP&lt;/span&gt; &lt;span class="nv"&gt;$remote_addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;X-Forwarded-For&lt;/span&gt; &lt;span class="nv"&gt;$proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;proxy_pass_header&lt;/span&gt; &lt;span class="s"&gt;Set-Cookie&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="s"&gt;**/PATH/TO/WORDPRESS**&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;# default location, used for the basic proxying&lt;/span&gt;
  &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;# if we're requesting a file and it exists, return it and bail out&lt;/span&gt;
    &lt;span class="kn"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(-f&lt;/span&gt; &lt;span class="nv"&gt;$request_filename&lt;/span&gt;&lt;span class="s"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="kn"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kn"&gt;client_max_body_size&lt;/span&gt; &lt;span class="mi"&gt;2m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;# increase this to increase file upload size&lt;/span&gt;
    &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;https://localhost:**APACHE_PORT**&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;# handle uploaded files&lt;/span&gt;
  &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt;&lt;span class="sr"&gt;*&lt;/span&gt; &lt;span class="s"&gt;files/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="s"&gt;**/PATH/TO/WORDPRESS**/blogs.dir/**BLOG_ID**/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;# handle static files&lt;/span&gt;
  &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt;&lt;span class="sr"&gt;*&lt;/span&gt; &lt;span class="s"&gt;\.(jpg|png|gif|jpeg|js|css|mp3|wav|swf|mov|doc|pdf|xls|ppt|docx|pptx|xlsx|txt|htm|html)&lt;/span&gt;$ &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;# if the static file doesn't exist, handle it with Apache&lt;/span&gt;
    &lt;span class="kn"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(!-f&lt;/span&gt; &lt;span class="nv"&gt;$request_filename&lt;/span&gt;&lt;span class="s"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;https://localhost:**APACHE_PORT**&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="kn"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$supercache_file&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kn"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$supercache_uri&lt;/span&gt; &lt;span class="nv"&gt;$request_uri&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;# reset cache URI if POSTing - bypass cache&lt;/span&gt;
  &lt;span class="kn"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$request_method&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;POST)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$supercache_uri&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;# bypass cache if there's a query string&lt;/span&gt;
  &lt;span class="kn"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$query_string&lt;/span&gt;&lt;span class="s"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$supercache_uri&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;# bypass cache if one of the cookies below is set&lt;/span&gt;
  &lt;span class="kn"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$http_cookie&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt;&lt;span class="sr"&gt;*&lt;/span&gt; &lt;span class="s"&gt;"comment_author_|wordpress|wp-postpass_")&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$supercache_uri&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;# if the URI is still set (rules above don't trigger) then set our file location!&lt;/span&gt;
  &lt;span class="kn"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$supercache_uri&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt; &lt;span class="sr"&gt;^(.+)$)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$supercache_file&lt;/span&gt; &lt;span class="s"&gt;/wp-content/cache/supercache/&lt;/span&gt;&lt;span class="nv"&gt;$http_host$1index.html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;# rewrite the request to the cached HTML file&lt;/span&gt;
  &lt;span class="kn"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(-f&lt;/span&gt; &lt;span class="nv"&gt;$document_root$supercache_file&lt;/span&gt;&lt;span class="s"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;rewrite&lt;/span&gt; &lt;span class="s"&gt;^(.*)&lt;/span&gt;$ &lt;span class="nv"&gt;$supercache_file&lt;/span&gt; &lt;span class="s"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;# if file exists, return it - will bypass back to Apache if not&lt;/span&gt;
  &lt;span class="kn"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(-f&lt;/span&gt; &lt;span class="nv"&gt;$request_filename&lt;/span&gt;&lt;span class="s"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="tutorials"></category><category term="apache2"></category><category term="nginx"></category><category term="wordpress"></category><category term="wp-super-cache"></category></entry><entry><title>Load balancing HTTP/HTTPS with Pound on Debian 6/Ubuntu</title><link href="https://kura.gg/2011/09/29/load-balancing-httphttps-with-pound-on-debian-6ubuntu/" rel="alternate"></link><published>2011-09-29T23:15:00+01:00</published><updated>2011-09-29T23:15:00+01:00</updated><author><name>kura</name></author><id>tag:kura.gg,2011-09-29:/2011/09/29/load-balancing-httphttps-with-pound-on-debian-6ubuntu/</id><summary type="html">
&lt;p&gt;Pound is a great little load balancer, it’s fast, opensource and
supports &lt;span class="caps"&gt;SSL&lt;/span&gt; termination, which is great!&lt;/p&gt;
&lt;div class="section" id="install"&gt;
&lt;h2&gt;Install&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install pound
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="configuration"&gt;
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;The default configuration should be pretty good for most purposes, but
feel free to tweak as you require.&lt;/p&gt;
&lt;div class="section" id="http"&gt;
&lt;h3&gt;&lt;span class="caps"&gt;HTTP&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;We’ll first look at load balancing &lt;span class="caps"&gt;HTTP&lt;/span&gt;, in case you don’t want or need
&lt;span class="caps"&gt;HTTPS&lt;/span&gt; load balancing.&lt;/p&gt;
&lt;p&gt;We’ll need delete all the content within &lt;em&gt;ListenHTTP&lt;/em&gt; block, once done
it should look like this&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ListenHTTP
End
&lt;/pre&gt;
&lt;p&gt;Now we add an address and port to listen on and finally a line to remove
an &lt;span class="caps"&gt;HTTP&lt;/span&gt; header&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ListenHTTP
    Address 0.0.0.0 # all interfaces
    Port 80
    HeadRemove "X-Forwarded-For"
End
&lt;/pre&gt;
&lt;p&gt;This is a basic configuration, for each backend we want to load balance
we’ll need to add a service within that listener.&lt;/p&gt;
&lt;p&gt;You’ll notice we’re removing incoming headers called &lt;em&gt;X-Forwarded-For&lt;/em&gt;,
this is to make …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">
&lt;p&gt;Pound is a great little load balancer, it’s fast, opensource and
supports &lt;span class="caps"&gt;SSL&lt;/span&gt; termination, which is great!&lt;/p&gt;
&lt;div class="section" id="install"&gt;
&lt;h2&gt;Install&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install pound
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="configuration"&gt;
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;The default configuration should be pretty good for most purposes, but
feel free to tweak as you require.&lt;/p&gt;
&lt;div class="section" id="http"&gt;
&lt;h3&gt;&lt;span class="caps"&gt;HTTP&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;We’ll first look at load balancing &lt;span class="caps"&gt;HTTP&lt;/span&gt;, in case you don’t want or need
&lt;span class="caps"&gt;HTTPS&lt;/span&gt; load balancing.&lt;/p&gt;
&lt;p&gt;We’ll need delete all the content within &lt;em&gt;ListenHTTP&lt;/em&gt; block, once done
it should look like this&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ListenHTTP
End
&lt;/pre&gt;
&lt;p&gt;Now we add an address and port to listen on and finally a line to remove
an &lt;span class="caps"&gt;HTTP&lt;/span&gt; header&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ListenHTTP
    Address 0.0.0.0 # all interfaces
    Port 80
    HeadRemove "X-Forwarded-For"
End
&lt;/pre&gt;
&lt;p&gt;This is a basic configuration, for each backend we want to load balance
we’ll need to add a service within that listener.&lt;/p&gt;
&lt;p&gt;You’ll notice we’re removing incoming headers called &lt;em&gt;X-Forwarded-For&lt;/em&gt;,
this is to make sure someone doesn’t try to craft them in to a request
and abuse them.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ListenHTTP
    Address 0.0.0.0 # all interfaces
    Port 80
    HeadRemove "X-Forwarded-For"

    Service
        BackEnd
            Address 10.0.0.1
            Port 80
            Priority 1
        End
        BackEnd
            Address 10.0.0.2
            Port 80
            Priority 1
        End
    End
End
&lt;/pre&gt;
&lt;p&gt;Here I’ve added 2 BackEnds that connect to port 80, it’s all pretty
simple. Add as many as you want/need.&lt;/p&gt;
&lt;p&gt;Pound will pass correct &lt;span class="caps"&gt;HTTP&lt;/span&gt; headers through to the backends so you
configure those just like you normally would.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="https"&gt;
&lt;h3&gt;&lt;span class="caps"&gt;HTTPS&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;&lt;span class="caps"&gt;HTTPS&lt;/span&gt; is basically exactly the same as &lt;span class="caps"&gt;HTTP&lt;/span&gt; except for one fantastic
option - &lt;span class="caps"&gt;SSL&lt;/span&gt; termination! Which means we can do the &lt;span class="caps"&gt;SSL&lt;/span&gt; decryption
within Pound and talk to our backend servers over standard unencrypted
&lt;span class="caps"&gt;HTTP&lt;/span&gt; - &lt;strong&gt;this should only be done on a private network.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So, we’ll create an &lt;span class="caps"&gt;HTTPS&lt;/span&gt; listened like the one above but with extra options.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ListenHTTPS
    Address 0.0.0.0 # all interfaces
    Port 443
    AddHeader "X-Forwarded-Proto: https"
    HeadRemove "X-Forwarded-Proto"
    HeadRemove "X-Forwarded-For"
    Cert "/path/to/certificate.pem

    Service
        BackEnd
            Address 10.0.0.1
            Port 80
            Priority 1
        End
        BackEnd
            Address 10.0.0.2
            Port 80
            Priority 1
            End
    End
End
&lt;/pre&gt;
&lt;p&gt;You’ll notice a few changes here, first we tell the &lt;span class="caps"&gt;HTTPS&lt;/span&gt; listener to
listen on port 443 - &lt;span class="caps"&gt;SSL&lt;/span&gt; port.&lt;/p&gt;
&lt;p&gt;We add a header to pass back to our backend servers called
&lt;em&gt;X-Forwarded-Proto&lt;/em&gt;, this is so that on our backend we can inspect this
header and use it if required to know we’re secure.&lt;/p&gt;
&lt;p&gt;We also remove incoming headers called &lt;em&gt;X-Forwarded-Proto&lt;/em&gt; and
&lt;em&gt;X-Forwarded-For&lt;/em&gt;, this is to make sure someone doesn’t try to craft
them in to a request and abuse them.&lt;/p&gt;
&lt;p&gt;Finally is the certificate which needs to be a &lt;span class="caps"&gt;PEM&lt;/span&gt; file with all
certificates and keys within it and without passphrases.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="done"&gt;
&lt;h2&gt;Done&lt;/h2&gt;
&lt;p&gt;Once configured, reload Pound.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /etc/init.d/pound reload
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That really was simple.&lt;/p&gt;
&lt;/div&gt;
</content><category term="tutorials"></category><category term="http"></category><category term="https"></category><category term="load"></category><category term="load balancing"></category><category term="pound"></category><category term="ssl"></category><category term="ssl offloading"></category><category term="ssl termination"></category></entry><entry><title>Postfix spam protection with greylisting using Postgrey on Debian 6/Ubuntu</title><link href="https://kura.gg/2011/09/24/postfix-spam-protection-with-greylisting-using-postgrey-on-debian-6ubuntu/" rel="alternate"></link><published>2011-09-24T21:29:00+01:00</published><updated>2011-09-24T21:29:00+01:00</updated><author><name>kura</name></author><id>tag:kura.gg,2011-09-24:/2011/09/24/postfix-spam-protection-with-greylisting-using-postgrey-on-debian-6ubuntu/</id><summary type="html">
&lt;p&gt;A simple yet effective method for protecting your mail server from spam
is to use greylisting. In simple terms, when an email is received the
server will temporarily reject it with a 450 response code claiming that
the server is busy, the sending server should then attempt to try to
deliver at a later point in time, if enough time has passed the
recipient server will then accept the incoming mail and whitelist the
send address for a period of time.&lt;/p&gt;
&lt;p&gt;This is effective because most spam servers are configured not to retry
the send whereas real mail servers generally will retry. This sadly does
not protect against spam coming from comprised mail servers or accounts
like on Hotmail.com.&lt;/p&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install postgrey
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="configuring-postgrey"&gt;
&lt;h2&gt;Configuring Postgrey&lt;/h2&gt;
&lt;p&gt;By default Postgrey runs on &lt;em&gt;127.0.0.1:60000&lt;/em&gt;, which is the local
loopback interface so it is not exposed to the …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
&lt;p&gt;A simple yet effective method for protecting your mail server from spam
is to use greylisting. In simple terms, when an email is received the
server will temporarily reject it with a 450 response code claiming that
the server is busy, the sending server should then attempt to try to
deliver at a later point in time, if enough time has passed the
recipient server will then accept the incoming mail and whitelist the
send address for a period of time.&lt;/p&gt;
&lt;p&gt;This is effective because most spam servers are configured not to retry
the send whereas real mail servers generally will retry. This sadly does
not protect against spam coming from comprised mail servers or accounts
like on Hotmail.com.&lt;/p&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install postgrey
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="configuring-postgrey"&gt;
&lt;h2&gt;Configuring Postgrey&lt;/h2&gt;
&lt;p&gt;By default Postgrey runs on &lt;em&gt;127.0.0.1:60000&lt;/em&gt;, which is the local
loopback interface so it is not exposed to the outside world.&lt;/p&gt;
&lt;p&gt;If you open up &lt;strong&gt;/etc/default/postgrey&lt;/strong&gt; and modify the &lt;em&gt;POSTGREY_OPTS&lt;/em&gt;
line you can configure how long to grey list for.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;--delay&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;60&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;would greylist the sending server for 60 seconds (the default value is
300 second, 5 minutes), if a retry was attempted after 60 seconds the
sender would automatically become whitelisted, by default this sender is
whitelisted for 35 days but can be changed using the &lt;em&gt;—max-age&lt;/em&gt; option&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;--max-age&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;would whitelist for 10 days.&lt;/p&gt;
&lt;p&gt;They can be combined as below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;POSTGREY_OPTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"--inet=127.0.0.1:60000 --delay=60 --max-age=10"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once you’re satisfied save and closed and restart Postgrey.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /etc/init.d/postgrey restart
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="configuring-postfix"&gt;
&lt;h2&gt;Configuring Postfix&lt;/h2&gt;
&lt;p&gt;Open up &lt;strong&gt;/etc/postfix/main.cf&lt;/strong&gt; and add the following within
&lt;em&gt;smtpd_receipient_restrictions&lt;/em&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
check_policy_service inet:127.0.0.1:60000
&lt;/pre&gt;
&lt;p&gt;This is best added after your &lt;span class="caps"&gt;SASL&lt;/span&gt; and sender domain checks but before
&lt;span class="caps"&gt;SPF&lt;/span&gt; and blacklists, see below for an example&lt;/p&gt;
&lt;pre class="literal-block"&gt;
smtpd_recipient_restrictions = permit_mynetworks,
    permit_sasl_authenticated,
    reject_unauth_destination,
    reject_unknown_sender_domain,
    check_policy_service inet:127.0.0.1:60000
&lt;/pre&gt;
&lt;p&gt;Now reload Postfix&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /etc/init.d/postfix reload
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="testing"&gt;
&lt;h2&gt;Testing&lt;/h2&gt;
&lt;p&gt;Now if you tail your mail.log you will see your Postgrey instance
rejecting incoming email like below.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Sept 24 22:26:18 heimdall postfix/smtpd[4256]: NOQUEUE: reject: RCPT from example.com[xxx.xxx.xxx.xxx]: 450: Recipient address rejected: Greylisted for 300 seconds (see https://isg.ee.ethz.ch/tools/postgrey/help/spammed.com.html); from=to=proto=ESMTP helo=&amp;lt;example.com&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;
</content><category term="tutorials"></category><category term="debian"></category><category term="email"></category><category term="greylist"></category><category term="mail"></category><category term="postfix"></category><category term="postgrey"></category><category term="spam"></category><category term="ubuntu"></category></entry><entry><title>Postfix spam protection with blacklists</title><link href="https://kura.gg/2011/09/24/postfix-spam-protection-with-blacklists/" rel="alternate"></link><published>2011-09-24T21:05:00+01:00</published><updated>2011-09-24T21:05:00+01:00</updated><author><name>kura</name></author><id>tag:kura.gg,2011-09-24:/2011/09/24/postfix-spam-protection-with-blacklists/</id><summary type="html">&lt;p&gt;This really should be quite a quick and simple post.&lt;/p&gt;
&lt;p&gt;I use several tools to protect my mail servers from spam, the most
effective of these I’ve found is using external lists in conjunction
with &lt;strong&gt;reject_rbl_client&lt;/strong&gt; and &lt;strong&gt;reject_rhsbl_client&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;+======================+======================================================================================================+
| Service              | description                                                                                          |
+======================+======================================================================================================+
| zen.spamhaus.org     | A single lookup for querying the &lt;span class="caps"&gt;SBL&lt;/span&gt;, &lt;span class="caps"&gt;XBL&lt;/span&gt; and &lt;span class="caps"&gt;PBL&lt;/span&gt; databases.                                         |
|                      |  - &lt;span class="caps"&gt;SBL&lt;/span&gt; - Verified sources of spam, including spammers and their support services                     |
|                      |  - &lt;span class="caps"&gt;XBL&lt;/span&gt; - Illegal third-party exploits (e.g. open proxies and Trojan Horses)                          |
|                      |  - &lt;span class="caps"&gt;PBL&lt;/span&gt; - Static, dial-up &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; &lt;span class="caps"&gt;DHCP&lt;/span&gt; &lt;span class="caps"&gt;IP&lt;/span&gt; address space that is not meant to be initiating &lt;span class="caps"&gt;SMTP&lt;/span&gt; connections |
+———————————+———————————————————————————————————————————————————+
| dnsbl.sorbs.net      | Unsolicited bulk/commercial email senders                                                            |
+———————————+———————————————————————————————————————————————————+
| spam.dnsbl.sorbs.net | Hosts that have allegedly sent spam to the admins of &lt;span class="caps"&gt;SORBS&lt;/span&gt; at any time                               |
+———————————+———————————————————————————————————————————————————+
| b1.spamcop.net       | &lt;span class="caps"&gt;IP&lt;/span&gt; addresses which have been used to transmit reported email to SpamCop users                        |
+———————————+———————————————————————————————————————————————————+
| rhsbl.ahbl.org       | Domains sending spam, domains owned by spammers, comment …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This really should be quite a quick and simple post.&lt;/p&gt;
&lt;p&gt;I use several tools to protect my mail servers from spam, the most
effective of these I’ve found is using external lists in conjunction
with &lt;strong&gt;reject_rbl_client&lt;/strong&gt; and &lt;strong&gt;reject_rhsbl_client&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;+======================+======================================================================================================+
| Service              | description                                                                                          |
+======================+======================================================================================================+
| zen.spamhaus.org     | A single lookup for querying the &lt;span class="caps"&gt;SBL&lt;/span&gt;, &lt;span class="caps"&gt;XBL&lt;/span&gt; and &lt;span class="caps"&gt;PBL&lt;/span&gt; databases.                                         |
|                      |  - &lt;span class="caps"&gt;SBL&lt;/span&gt; - Verified sources of spam, including spammers and their support services                     |
|                      |  - &lt;span class="caps"&gt;XBL&lt;/span&gt; - Illegal third-party exploits (e.g. open proxies and Trojan Horses)                          |
|                      |  - &lt;span class="caps"&gt;PBL&lt;/span&gt; - Static, dial-up &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; &lt;span class="caps"&gt;DHCP&lt;/span&gt; &lt;span class="caps"&gt;IP&lt;/span&gt; address space that is not meant to be initiating &lt;span class="caps"&gt;SMTP&lt;/span&gt; connections |
+———————————+———————————————————————————————————————————————————+
| dnsbl.sorbs.net      | Unsolicited bulk/commercial email senders                                                            |
+———————————+———————————————————————————————————————————————————+
| spam.dnsbl.sorbs.net | Hosts that have allegedly sent spam to the admins of &lt;span class="caps"&gt;SORBS&lt;/span&gt; at any time                               |
+———————————+———————————————————————————————————————————————————+
| b1.spamcop.net       | &lt;span class="caps"&gt;IP&lt;/span&gt; addresses which have been used to transmit reported email to SpamCop users                        |
+———————————+———————————————————————————————————————————————————+
| rhsbl.ahbl.org       | Domains sending spam, domains owned by spammers, comment spam domains, spammed URLs                  | +———————————+———————————————————————————————————————————————————+&lt;/p&gt;
&lt;p&gt;The description for each of these services was shamelessly taken from
Wikipedia, I have listed the services that I actually use but you can
find a much larger list on the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Comparison_of_DNS_blacklists"&gt;page that I took the descriptions
from&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;*Please note that the &lt;span class="caps"&gt;SORBS&lt;/span&gt; lists are generally classed as being
aggressive and a lot of people advise not to use them due to this. They
have been known to block emails from senders like Facebook.*&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can pick and choose which ones you use and you configure them as
below within &lt;strong&gt;smtp_recipient_restrictions&lt;/strong&gt; in &lt;strong&gt;/etc/postfix/main.cf&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
smtpd_recipient_restrictions =
  reject_rbl_client zen.spamhaus.org,
  reject_rbl_client dnsbl.sorbs.net,
  reject_rbl_client spam.dnsbl.sorbs.net,
  reject_rbl_client bl.spamcop.net,
  reject_rhsbl_client rhsbl.ahbl.org
&lt;/pre&gt;
</content><category term="tutorials"></category><category term="blackhole"></category><category term="blacklist"></category><category term="email"></category><category term="mail"></category><category term="postfix"></category><category term="spam"></category></entry><entry><title>SpamAssassin + Razor + Pyzor on Debian 6/Ubuntu</title><link href="https://kura.gg/2011/09/22/spamassassin-razor-pyzor/" rel="alternate"></link><published>2011-09-22T19:17:00+01:00</published><updated>2011-09-22T19:17:00+01:00</updated><author><name>kura</name></author><id>tag:kura.gg,2011-09-22:/2011/09/22/spamassassin-razor-pyzor/</id><summary type="html">
&lt;p&gt;This is part 4 of my series on configuring a mail server, please see
&lt;a class="reference external" href="/2011/09/15/postfix-dovecot-imapimaps-sasl-maildir/"&gt;part one&lt;/a&gt;, &lt;a class="reference external" href="/2011/09/16/postfix-spamassassin-clamav-procmail/"&gt;part two&lt;/a&gt; and &lt;a class="reference external" href="/2011/09/17/postfix-dk-dkim-spf/"&gt;part three&lt;/a&gt; if you’re not familiar with them.&lt;/p&gt;
&lt;p&gt;The content of this article was written to work with the previous three
articles but should work on any SpamAssassin set-up.&lt;/p&gt;
&lt;div class="section" id="razor"&gt;
&lt;h2&gt;Razor&lt;/h2&gt;
&lt;p&gt;First off we need to install Razor.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install razor
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we need to run three commands to register and configure Razor.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo razor-admin -home&lt;span class="o"&gt;=&lt;/span&gt;/etc/spamassassin/.razor -register
sudo razor-admin -home&lt;span class="o"&gt;=&lt;/span&gt;/etc/spamassassin/.razor -create
sudo razor-admin -home&lt;span class="o"&gt;=&lt;/span&gt;/etc/spamassassin/.razor -discover
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These 3 commands should be pretty self explanatory, they register Razor,
create it’s configuration and discover the Razor servers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pyzor"&gt;
&lt;h2&gt;Pyzor&lt;/h2&gt;
&lt;p&gt;Now we’ll install Pyzor.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install pyzor
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we also need to tell Pyzor to discover it’s servers.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pyzor --homedir /etc/mail/spamassassin discover
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="spamassassin"&gt;
&lt;h2&gt;SpamAssassin&lt;/h2&gt;
&lt;p&gt;Add the following lines to the end …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
&lt;p&gt;This is part 4 of my series on configuring a mail server, please see
&lt;a class="reference external" href="/2011/09/15/postfix-dovecot-imapimaps-sasl-maildir/"&gt;part one&lt;/a&gt;, &lt;a class="reference external" href="/2011/09/16/postfix-spamassassin-clamav-procmail/"&gt;part two&lt;/a&gt; and &lt;a class="reference external" href="/2011/09/17/postfix-dk-dkim-spf/"&gt;part three&lt;/a&gt; if you’re not familiar with them.&lt;/p&gt;
&lt;p&gt;The content of this article was written to work with the previous three
articles but should work on any SpamAssassin set-up.&lt;/p&gt;
&lt;div class="section" id="razor"&gt;
&lt;h2&gt;Razor&lt;/h2&gt;
&lt;p&gt;First off we need to install Razor.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install razor
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we need to run three commands to register and configure Razor.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo razor-admin -home&lt;span class="o"&gt;=&lt;/span&gt;/etc/spamassassin/.razor -register
sudo razor-admin -home&lt;span class="o"&gt;=&lt;/span&gt;/etc/spamassassin/.razor -create
sudo razor-admin -home&lt;span class="o"&gt;=&lt;/span&gt;/etc/spamassassin/.razor -discover
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These 3 commands should be pretty self explanatory, they register Razor,
create it’s configuration and discover the Razor servers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pyzor"&gt;
&lt;h2&gt;Pyzor&lt;/h2&gt;
&lt;p&gt;Now we’ll install Pyzor.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install pyzor
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we also need to tell Pyzor to discover it’s servers.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pyzor --homedir /etc/mail/spamassassin discover
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="spamassassin"&gt;
&lt;h2&gt;SpamAssassin&lt;/h2&gt;
&lt;p&gt;Add the following lines to the end of &lt;strong&gt;/etc/spamassassin/local.cf&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;razor_config /etc/mail/spamassassin/.razor/razor-agent.conf
pyzor_options --homedir /etc/mail/spamassassin
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally we restart SpamAssassin&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /etc/init.d/spamassasin restart
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And we’re all done.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="/2011/09/22/spamassassin-razor-pyzor/"&gt;« Part 3 - Postfix + &lt;span class="caps"&gt;DK&lt;/span&gt; (DomainKeys) + &lt;span class="caps"&gt;DKIM&lt;/span&gt; + &lt;span class="caps"&gt;SPF&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="tutorials"></category><category term="email"></category><category term="mail"></category><category term="postfix"></category><category term="pyzor"></category><category term="razor"></category><category term="spam"></category><category term="spamassassin"></category></entry><entry><title>Debian/Ubuntu upgrade security packages only - a better way to do it</title><link href="https://kura.gg/2011/09/21/debianubuntu-upgrade-security-packages-only-a-better-way-to-do-it/" rel="alternate"></link><published>2011-09-21T13:21:00+01:00</published><updated>2011-09-21T13:21:00+01:00</updated><author><name>kura</name></author><id>tag:kura.gg,2011-09-21:/2011/09/21/debianubuntu-upgrade-security-packages-only-a-better-way-to-do-it/</id><content type="html">&lt;p&gt;&lt;strong&gt;I have created a scripts that handle these tasks for you, available `here`_.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First thing we need to do is create an sources list specifically for security.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo grep &lt;span class="s2"&gt;"-security"&lt;/span&gt; /etc/apt/sources.list &lt;span class="p"&gt;|&lt;/span&gt; sudo grep -v &lt;span class="s2"&gt;"#"&lt;/span&gt; &amp;gt; /etc/apt/security.sources.list
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that this is done we can simply continue to use the command below to
trigger security-only upgrades&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get upgrade -o Dir::Etc::SourceList&lt;span class="o"&gt;=&lt;/span&gt;/etc/apt/security.sources.list
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="section" id="note"&gt;
&lt;h2&gt;Note&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;This will work until you upgrade your distro (e.g. 10.04 -&amp;gt; 12.04), at
which point you will need to re-run the first command to regenerate the
security.sources.list file.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="tutorials"></category><category term="apt"></category><category term="debian"></category><category term="security"></category><category term="ubuntu"></category><category term="upgrades"></category></entry><entry><title>Postfix + DK (DomainKeys) + DKIM + SPF on Debian 6/Ubuntu</title><link href="https://kura.gg/2011/09/17/postfix-dk-dkim-spf/" rel="alternate"></link><published>2011-09-17T18:18:00+01:00</published><updated>2011-09-17T18:18:00+01:00</updated><author><name>kura</name></author><id>tag:kura.gg,2011-09-17:/2011/09/17/postfix-dk-dkim-spf/</id><summary type="html">
&lt;p&gt;This is part 3 of my guide to getting a mail server configured with all
the sexy bits to improve deliverability, spam and virus protection.&lt;/p&gt;
&lt;p&gt;You can view &lt;a class="reference external" href="/2011/09/15/postfix-dovecot-imapimaps-sasl-maildir/"&gt;part 1 here&lt;/a&gt; and &lt;a class="reference external" href="/2011/09/16/postfix-spamassassin-clamav-procmail/"&gt;part 2 here&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="the-key-pair"&gt;
&lt;h2&gt;The key pair&lt;/h2&gt;
&lt;p&gt;We need to create a key pair to sign emails with:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. code-block:: bash
&lt;/pre&gt;
&lt;blockquote&gt;
openssl genrsa -out private.key 1024
openssl rsa -in private.key -out public.key -pubout -outform &lt;span class="caps"&gt;PEM&lt;/span&gt;
sudo mkdir /etc/dk/
sudo cp private.key /etc/dk/dk.key&lt;/blockquote&gt;
&lt;p&gt;Now we can move on to &lt;span class="caps"&gt;DK&lt;/span&gt; and &lt;span class="caps"&gt;DKIM&lt;/span&gt; signing, make sure you keep the public
key for later.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dkim"&gt;
&lt;h2&gt;&lt;span class="caps"&gt;DKIM&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;First we’ll need to install an application to sign our emails.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install dkim-filter
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once installed we need to configure it, open up
&lt;strong&gt;/etc/default/dkim-filter&lt;/strong&gt;, modify the file to look like below
replacing &amp;lt;&lt;span class="caps"&gt;DOMAIN&lt;/span&gt;&amp;gt; with the domain you want to sign email from.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;DAEMON_OPTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"-l -o …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">
&lt;p&gt;This is part 3 of my guide to getting a mail server configured with all
the sexy bits to improve deliverability, spam and virus protection.&lt;/p&gt;
&lt;p&gt;You can view &lt;a class="reference external" href="/2011/09/15/postfix-dovecot-imapimaps-sasl-maildir/"&gt;part 1 here&lt;/a&gt; and &lt;a class="reference external" href="/2011/09/16/postfix-spamassassin-clamav-procmail/"&gt;part 2 here&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="the-key-pair"&gt;
&lt;h2&gt;The key pair&lt;/h2&gt;
&lt;p&gt;We need to create a key pair to sign emails with:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. code-block:: bash
&lt;/pre&gt;
&lt;blockquote&gt;
openssl genrsa -out private.key 1024
openssl rsa -in private.key -out public.key -pubout -outform &lt;span class="caps"&gt;PEM&lt;/span&gt;
sudo mkdir /etc/dk/
sudo cp private.key /etc/dk/dk.key&lt;/blockquote&gt;
&lt;p&gt;Now we can move on to &lt;span class="caps"&gt;DK&lt;/span&gt; and &lt;span class="caps"&gt;DKIM&lt;/span&gt; signing, make sure you keep the public
key for later.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dkim"&gt;
&lt;h2&gt;&lt;span class="caps"&gt;DKIM&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;First we’ll need to install an application to sign our emails.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install dkim-filter
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once installed we need to configure it, open up
&lt;strong&gt;/etc/default/dkim-filter&lt;/strong&gt;, modify the file to look like below
replacing &amp;lt;&lt;span class="caps"&gt;DOMAIN&lt;/span&gt;&amp;gt; with the domain you want to sign email from.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;DAEMON_OPTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"-l -o X-DomainKeys,DomainKey-Signature"&lt;/span&gt;
&lt;span class="nv"&gt;DAEMON_OPTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$DAEMON_OPTS&lt;/span&gt;&lt;span class="s2"&gt; -d &amp;lt;DOMAIN&amp;gt; -k /etc/dk/dk.key -s mail"&lt;/span&gt;
&lt;span class="nv"&gt;SOCKET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"inet:12345@localhost"&lt;/span&gt; &lt;span class="c1"&gt;# listen on loopback on port 12345&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We use the &lt;strong&gt;-o&lt;/strong&gt; flag to tell the filter to ignore any DomainKeys
headers when signing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dk-domainkeys"&gt;
&lt;h2&gt;&lt;span class="caps"&gt;DK&lt;/span&gt; (DomainKeys)&lt;/h2&gt;
&lt;p&gt;The dk-filter package is not installable from &lt;span class="caps"&gt;APT&lt;/span&gt; on Debian 6 for me,
try to install it using &lt;span class="caps"&gt;APT&lt;/span&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install dk-filter
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If it doesn’t work then install it by hand, go to
&lt;a class="reference external" href="https://ftp.us.debian.org/debian/pool/main/d/dk-milter/"&gt;https://ftp.us.debian.org/debian/pool/main/d/dk-milter/&lt;/a&gt; and download
the .deb file for your architecture. To install it run the command below
replacing &amp;lt;&lt;span class="caps"&gt;FILE&lt;/span&gt;&amp;gt; with the file you downloaded.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo dpkg -i &amp;lt;FILE&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that it’s installed we can configure it, open up
&lt;strong&gt;/etc/default/dk-filter&lt;/strong&gt;, modify the file to look like below replacing
&amp;lt;&lt;span class="caps"&gt;DOMAIN&lt;/span&gt;&amp;gt; with the domain you want to sign email from.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;DAEMON_OPTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"-l -o DKIM-Signature,X-DKIM"&lt;/span&gt;
&lt;span class="nv"&gt;DAEMON_OPTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$DAEMON_OPTS&lt;/span&gt;&lt;span class="s2"&gt; -d &amp;lt;DOMAIN&amp;gt; -s /etc/dk/dk.key -S mail"&lt;/span&gt;
&lt;span class="nv"&gt;SOCKET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"inet:12346@localhost"&lt;/span&gt; &lt;span class="c1"&gt;# listen on loopback on port 12346&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We use the &lt;strong&gt;-o&lt;/strong&gt; flag to tell the filter to ignore any &lt;span class="caps"&gt;DKIM&lt;/span&gt; headers
when signing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="spf"&gt;
&lt;h2&gt;&lt;span class="caps"&gt;SPF&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;Install with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install postfix-policyd-spf-python
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="postfix"&gt;
&lt;h2&gt;Postfix&lt;/h2&gt;
&lt;p&gt;Open up &lt;strong&gt;/etc/postfix/main.cf&lt;/strong&gt; and add the following lines to it&lt;/p&gt;
&lt;pre class="literal-block"&gt;
milter_default_action = accept
milter_protocol = 6
smtpd_milters = inet:localhost:12345 inet:localhost:12346
non_smtpd_milters = inet:localhost:12345 inet:localhost:12346
spf-policyd_time_limit = 3600s
&lt;/pre&gt;
&lt;p&gt;This tells Postfix to pass incoming and outgoing email through the &lt;span class="caps"&gt;DK&lt;/span&gt;
and &lt;span class="caps"&gt;DKIM&lt;/span&gt; filters, as well as mail that arrives from the queue, local
commands like sendmail and cleanup. It also sets a time limit on &lt;span class="caps"&gt;SPF&lt;/span&gt; checks.&lt;/p&gt;
&lt;p&gt;Add the following to &lt;em&gt;smtpd_recipient_restrictions =&lt;/em&gt; it should look
like this&lt;/p&gt;
&lt;pre class="literal-block"&gt;
smtpd_recipient_restrictions = permit_mynetworks,

permit_sasl_authenticated,
reject_unauth_destination,
reject_unknown_sender_domain,
check_policy_service unix:private/policy-spf
&lt;/pre&gt;
&lt;p&gt;Now open up &lt;strong&gt;/etc/postfix/master.cf&lt;/strong&gt; and add the following&lt;/p&gt;
&lt;pre class="literal-block"&gt;
policy-spf unix - n n - - spawn
    user=nobody argv=/usr/bin/policyd-spf
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="dns"&gt;
&lt;h2&gt;&lt;span class="caps"&gt;DNS&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;We need to modify your &lt;span class="caps"&gt;DNS&lt;/span&gt; entries so that &lt;span class="caps"&gt;DK&lt;/span&gt; and &lt;span class="caps"&gt;DKIM&lt;/span&gt; actually work and
we also need to add &lt;span class="caps"&gt;SPF&lt;/span&gt; records.&lt;/p&gt;
&lt;p&gt;We need to create 3 &lt;span class="caps"&gt;TXT&lt;/span&gt; records, 1 for &lt;span class="caps"&gt;SPF&lt;/span&gt; and 2 for &lt;span class="caps"&gt;DK&lt;/span&gt;/&lt;span class="caps"&gt;DKIM&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Creating the &lt;span class="caps"&gt;SPF&lt;/span&gt; record is easy, create a new &lt;span class="caps"&gt;TXT&lt;/span&gt; record called
&lt;strong&gt;&amp;lt;&lt;span class="caps"&gt;DOMAIN&lt;/span&gt;&amp;gt;.&lt;/strong&gt; e.g. &lt;strong&gt;syslog.tv.&lt;/strong&gt; with the following content. replacing
&amp;lt;&lt;span class="caps"&gt;IP&lt;/span&gt;&amp;gt; with the &lt;span class="caps"&gt;IP&lt;/span&gt; of your mail server.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
v=spf1 a mx ip4:&amp;lt;IP&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;span class="caps"&gt;DK&lt;/span&gt; and &lt;span class="caps"&gt;DKIM&lt;/span&gt; records are a little trickier, first create a &lt;span class="caps"&gt;TXT&lt;/span&gt; record
with the following name &lt;strong&gt;_domainkey.&amp;lt;&lt;span class="caps"&gt;DOMAIN&lt;/span&gt;&amp;gt;.&lt;/strong&gt; e.g.
&lt;strong&gt;_domainkey.syslog.tv&lt;/strong&gt; with the following content&lt;/p&gt;
&lt;pre class="literal-block"&gt;
t=y; o=-
&lt;/pre&gt;
&lt;p&gt;With &lt;strong&gt;t&lt;/strong&gt; set to &lt;strong&gt;y&lt;/strong&gt; it puts your &lt;span class="caps"&gt;DK&lt;/span&gt; and &lt;span class="caps"&gt;DKIM&lt;/span&gt; in test mode, just in-case.&lt;/p&gt;
&lt;p&gt;Now we need to create a second record called
&lt;strong&gt;mail._domainkey.&amp;lt;&lt;span class="caps"&gt;DOMAIN&lt;/span&gt;&amp;gt;.&lt;/strong&gt; e.g. &lt;strong&gt;mail._domainkey.syslog.tv&lt;/strong&gt;,
you’ll need to copy the contents of the public key file we created
earlier. Open it up and copy everything between &lt;strong&gt;——-&lt;span class="caps"&gt;BEGIN&lt;/span&gt; &lt;span class="caps"&gt;PUBLIC&lt;/span&gt;
&lt;span class="caps"&gt;KEY&lt;/span&gt;——-&lt;/strong&gt; and &lt;strong&gt;——-&lt;span class="caps"&gt;END&lt;/span&gt; &lt;span class="caps"&gt;PUBLIC&lt;/span&gt; &lt;span class="caps"&gt;KEY&lt;/span&gt;——-&lt;/strong&gt; in to one long line. Once
done put it in the &lt;span class="caps"&gt;DNS&lt;/span&gt; record like below&lt;/p&gt;
&lt;pre class="literal-block"&gt;
k=rsa; p=&amp;lt;KEY_CONTENT&amp;gt;
&lt;/pre&gt;
&lt;p&gt;like this&lt;/p&gt;
&lt;pre class="literal-block"&gt;
k=rsa; p=MIGfMA0GCSqGSIb3DQE ... snip ... 03hFbY5y2QbQIDAQAB
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="finally"&gt;
&lt;h2&gt;Finally&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /etc/init.d/dk-filter restart
sudo /etc/init.d/dkim-filter restart
sudo /etc/init.d/postfix restart
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Try send an email to yourself, you should see both &lt;span class="caps"&gt;DK&lt;/span&gt; and &lt;span class="caps"&gt;DKIM&lt;/span&gt;
signatures in the source.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="/2011/09/16/postfix-spamassassin-clamav-procmail/"&gt;« Part 2 - Postfix + SpamAssassin + ClamAV + Procmail&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="/2011/09/22/spamassassin-razor-pyzor/"&gt;Part 4 - SpamAssassin + Razor + Pyzor »&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="tutorials"></category><category term="debian"></category><category term="dk"></category><category term="dkim"></category><category term="domainkeys"></category><category term="email"></category><category term="mail"></category><category term="postfix"></category><category term="spf"></category><category term="ubuntu"></category></entry><entry><title>Postfix + SpamAssassin + ClamAV + Procmail on Debian 6/Ubuntu</title><link href="https://kura.gg/2011/09/16/postfix-spamassassin-clamav-procmail/" rel="alternate"></link><published>2011-09-16T21:28:00+01:00</published><updated>2011-09-16T21:28:00+01:00</updated><author><name>kura</name></author><id>tag:kura.gg,2011-09-16:/2011/09/16/postfix-spamassassin-clamav-procmail/</id><summary type="html">
&lt;p&gt;This is part 2 of my series on mail servers on Debian 6/Ubuntu 10.04, it
should work on other versions of each though. &lt;a class="reference external" href="/2011/09/15/postfix-dovecot-imapimaps-sasl-maildir/"&gt;Part 1 is available here&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="spamassassin"&gt;
&lt;h2&gt;SpamAssassin&lt;/h2&gt;
&lt;p&gt;First off we’ll get SpamAssassin installed and configured.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install spamassassin
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We’ll be configuring SpamAssassin as a daemon that Postfix interfaces
with using &lt;strong&gt;spamc&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;SpamAssassin on Debian and Ubuntu runs as root which is &lt;span class="caps"&gt;NOT&lt;/span&gt; a good thing
so we’ll need to make some changes.&lt;/p&gt;
&lt;p&gt;We’ll add a group called &lt;strong&gt;spamd&lt;/strong&gt; with &lt;span class="caps"&gt;GID&lt;/span&gt;**5001**.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo groupadd -g &lt;span class="m"&gt;5001&lt;/span&gt; spamd
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next we add a user spamd with &lt;span class="caps"&gt;UID&lt;/span&gt; &lt;strong&gt;5001&lt;/strong&gt; and add it to the spamd
group, as well as set it’s home directory as &lt;strong&gt;/var/lib/spamassassin&lt;/strong&gt;
and make sure it has no shell access or &lt;span class="caps"&gt;SSH&lt;/span&gt; access.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo useradd -u &lt;span class="m"&gt;5001&lt;/span&gt; -g spamd -s /usr/sbin/nologin -d /var/lib/spamassassin spamd
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
&lt;p&gt;This is part 2 of my series on mail servers on Debian 6/Ubuntu 10.04, it
should work on other versions of each though. &lt;a class="reference external" href="/2011/09/15/postfix-dovecot-imapimaps-sasl-maildir/"&gt;Part 1 is available here&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="spamassassin"&gt;
&lt;h2&gt;SpamAssassin&lt;/h2&gt;
&lt;p&gt;First off we’ll get SpamAssassin installed and configured.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install spamassassin
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We’ll be configuring SpamAssassin as a daemon that Postfix interfaces
with using &lt;strong&gt;spamc&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;SpamAssassin on Debian and Ubuntu runs as root which is &lt;span class="caps"&gt;NOT&lt;/span&gt; a good thing
so we’ll need to make some changes.&lt;/p&gt;
&lt;p&gt;We’ll add a group called &lt;strong&gt;spamd&lt;/strong&gt; with &lt;span class="caps"&gt;GID&lt;/span&gt;**5001**.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo groupadd -g &lt;span class="m"&gt;5001&lt;/span&gt; spamd
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next we add a user spamd with &lt;span class="caps"&gt;UID&lt;/span&gt; &lt;strong&gt;5001&lt;/strong&gt; and add it to the spamd
group, as well as set it’s home directory as &lt;strong&gt;/var/lib/spamassassin&lt;/strong&gt;
and make sure it has no shell access or &lt;span class="caps"&gt;SSH&lt;/span&gt; access.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo useradd -u &lt;span class="m"&gt;5001&lt;/span&gt; -g spamd -s /usr/sbin/nologin -d /var/lib/spamassassin spamd
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we make that users home directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo mkdir /var/lib/spamassassin
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And finally change the permissions of that directory so the spamd user
can write there.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo chown spamd:spamd /var/lib/spamassassin
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next up we have to enabled the daemon and configure it. Open up
&lt;strong&gt;/etc/default/spamassassin&lt;/strong&gt; and make the following changes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;ENABLED&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="nv"&gt;CRON&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will actually allow the spamassassin daemon to start. We also need
to configure it’s new home directory and more.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;SAHOME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"/var/lib/spamassassin/"&lt;/span&gt;
&lt;span class="nv"&gt;OPTIONS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"--create-prefs --max-children 5 --username spamd --helper-home-dir &lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;SAHOME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; -s /var/log/spamd.log"&lt;/span&gt;
&lt;span class="nv"&gt;PIDFILE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;SAHOME&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;spamd.pid"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next up we’ll make some changes to &lt;strong&gt;/etc/spamassassin/local.cf&lt;/strong&gt;&lt;/p&gt;
&lt;pre class="literal-block"&gt;
rewrite_header Subject ***** SPAM _SCORE_ *****
report_safe 1

use_bayes 1
use_bayes_rules 1
bayes_auto_learn 1
&lt;/pre&gt;
&lt;p&gt;These changes will rewrite the email subject to show that it is spam and
add the spam score too, like this &lt;strong&gt;*&lt;/strong&gt; &lt;span class="caps"&gt;SPAM&lt;/span&gt; 6.0 &lt;strong&gt;*&lt;/strong&gt;,
report_safe will attach the spam email as a plain text attachment to
the email to filter out any bad stuff. The 3 bayes options enabled the
Bayesian classifier and enable auto learn functionality. For more info
on Bayesian cliassifier, go &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Bayesian_spam_filtering"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;SpamAssassin is now configured but Postfix doesn’t know how to talk to
it, we’ll configure that later. Now on to…&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="clamav"&gt;
&lt;h2&gt;ClamAV&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install clamsmtp clamav-freshclam
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once installed you’ll have an &lt;span class="caps"&gt;SMTP&lt;/span&gt; wrapper for ClamAV installed and a
daemon that automatically updates your anti-virus database.&lt;/p&gt;
&lt;p&gt;Open up &lt;strong&gt;/etc/clamsmtpd.conf&lt;/strong&gt; and make the following changes&lt;/p&gt;
&lt;pre class="literal-block"&gt;
OutAddress: 10026
&lt;/pre&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Listen: 127.0.0.1:10025
&lt;/pre&gt;
&lt;p&gt;Now we move on to…&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="procmail"&gt;
&lt;h2&gt;Procmail&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install procmail
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we need to create &lt;strong&gt;/etc/procmailrc&lt;/strong&gt; and add the following to it&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;DROPPRIVS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;YES
&lt;span class="nv"&gt;ORGMAIL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$HOME&lt;/span&gt;/Maildir
&lt;span class="nv"&gt;MAILDIR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$ORGMAIL&lt;/span&gt;
&lt;span class="nv"&gt;DEFAULT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$ORGMAIL&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This tells Procmail to deliver email to your Maildir folder instead of /var/mail/&lt;/p&gt;
&lt;p&gt;And now to glue it all together!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="postfix"&gt;
&lt;h2&gt;Postfix&lt;/h2&gt;
&lt;p&gt;Open up &lt;strong&gt;/etc/postfix/main.cf&lt;/strong&gt; and add the following lines&lt;/p&gt;
&lt;pre class="literal-block"&gt;
content_filter = scan:127.0.0.1:10025
receive_override_options = no_address_mappings
&lt;/pre&gt;
&lt;p&gt;This tells Postfix to scan content using ClamAV which is listening on
port 10025.&lt;/p&gt;
&lt;p&gt;Now add the following to tell Postfix to deliver mail locally using Procmail.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
mailbox_command = procmail -a "$EXTENSION"
&lt;/pre&gt;
&lt;p&gt;Next open up &lt;strong&gt;/etc/postfix/master.cf&lt;/strong&gt; and change&lt;/p&gt;
&lt;pre class="literal-block"&gt;
smtp inet n - - - - smtpd
&lt;/pre&gt;
&lt;p&gt;to&lt;/p&gt;
&lt;pre class="literal-block"&gt;
smtp inet n - - - - smtpd
    -o content_filter=spamassassin
&lt;/pre&gt;
&lt;p&gt;Then add the following lines to the end of the file&lt;/p&gt;
&lt;pre class="literal-block"&gt;
scan unix - - n - 16 smtp
    -o smtp_send_xforward_command=yes

127.0.0.1:10026 inet n - n - 16 smtpd
    -o content_filter=
    -o receive_override_options=no_unknown_recipient_checks,no_header_body_checks
    -o smtpd_helo_restrictions=
    -o smtpd_client_restrictions=
    -o smtpd_sender_restrictions=
    -o smtpd_recipient_restrictions=permit_mynetworks,reject
    -o mynetworks_style=host
    -o smtpd_authorized_xforward_hosts=127.0.0.0/8

spamassassin unix - n n - - pipe
    user=spamd argv=/usr/bin/spamc -f -e
    /usr/sbin/sendmail -oi -f ${sender} ${recipient}
&lt;/pre&gt;
&lt;p&gt;These changes tell Postfix to talk to ClamAV and SpamAssassin.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="finally"&gt;
&lt;h2&gt;Finally&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /etc/init.d/spamassassin restart
sudo /etc/init.d/clamsmtp restart
sudo /etc/init.d/postfix restart
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That should be everything done, good luck!&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="/2011/09/15/postfix-dovecot-imapimaps-sasl-maildir/"&gt;« Part 1 - Postfix + Dovecot (&lt;span class="caps"&gt;IMAP&lt;/span&gt;/&lt;span class="caps"&gt;IMAPS&lt;/span&gt;) + &lt;span class="caps"&gt;SASL&lt;/span&gt; + Maildir&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;a class="reference external" href="/2011/09/17/postfix-dk-dkim-spf/"&gt;Part 2 - Postfix + &lt;span class="caps"&gt;DK&lt;/span&gt; (DomainKeys) + &lt;span class="caps"&gt;DKIM&lt;/span&gt; + &lt;span class="caps"&gt;SPF&lt;/span&gt; »&lt;/a&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
</content><category term="tutorials"></category><category term="clamav"></category><category term="clamsmtp"></category><category term="debian"></category><category term="email"></category><category term="mail"></category><category term="postfix"></category><category term="procmail"></category><category term="spamassassin"></category><category term="ubuntu"></category></entry><entry><title>Postfix + Dovecot (IMAP/IMAPS) + SASL + Maildir on Debian 6/Ubuntu</title><link href="https://kura.gg/2011/09/15/postfix-dovecot-imapimaps-sasl-maildir/" rel="alternate"></link><published>2011-09-15T23:04:00+01:00</published><updated>2011-09-15T23:04:00+01:00</updated><author><name>kura</name></author><id>tag:kura.gg,2011-09-15:/2011/09/15/postfix-dovecot-imapimaps-sasl-maildir/</id><summary type="html">
&lt;p&gt;This guide is part 1 of what I plan will be a couple of guides that take
you through installing a base mail system, SpamAssassin, &lt;span class="caps"&gt;DKIM&lt;/span&gt; and much
more. Stay tuned.&lt;/p&gt;
&lt;p&gt;This guide was written for Debian 6 but should be the same or similar
for Debian 5 and Ubuntu 10.04 and above.&lt;/p&gt;
&lt;div class="section" id="the-installation"&gt;
&lt;h2&gt;The installation&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install dovecot-imapd postfix sasl2-bin libsasl2-2 libsasl2-modules
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Choose “Internet site” when prompted and enter the fully qualified name
of your server.&lt;/p&gt;
&lt;p&gt;Once all this is done installing we’ll need to make some changes, first
off will be Postfix.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="postfix"&gt;
&lt;h2&gt;Postfix&lt;/h2&gt;
&lt;p&gt;Open up &lt;strong&gt;/etc/postfix/main.cf&lt;/strong&gt; and add the following to the end of the file&lt;/p&gt;
&lt;pre class="literal-block"&gt;
home_mailbox = Maildir/
smtpd_sasl_auth_enable = yes
smtpd_sasl_security_options = noanonymous
smtpd_sasl_local_domain = $myhostname
broken_sasl_auth_clients = yes

smtpd_sender_restrictions = permit_sasl_authenticated,
    permit_mynetworks,

smtpd_recipient_restrictions = permit_mynetworks,
    permit …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">
&lt;p&gt;This guide is part 1 of what I plan will be a couple of guides that take
you through installing a base mail system, SpamAssassin, &lt;span class="caps"&gt;DKIM&lt;/span&gt; and much
more. Stay tuned.&lt;/p&gt;
&lt;p&gt;This guide was written for Debian 6 but should be the same or similar
for Debian 5 and Ubuntu 10.04 and above.&lt;/p&gt;
&lt;div class="section" id="the-installation"&gt;
&lt;h2&gt;The installation&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install dovecot-imapd postfix sasl2-bin libsasl2-2 libsasl2-modules
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Choose “Internet site” when prompted and enter the fully qualified name
of your server.&lt;/p&gt;
&lt;p&gt;Once all this is done installing we’ll need to make some changes, first
off will be Postfix.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="postfix"&gt;
&lt;h2&gt;Postfix&lt;/h2&gt;
&lt;p&gt;Open up &lt;strong&gt;/etc/postfix/main.cf&lt;/strong&gt; and add the following to the end of the file&lt;/p&gt;
&lt;pre class="literal-block"&gt;
home_mailbox = Maildir/
smtpd_sasl_auth_enable = yes
smtpd_sasl_security_options = noanonymous
smtpd_sasl_local_domain = $myhostname
broken_sasl_auth_clients = yes

smtpd_sender_restrictions = permit_sasl_authenticated,
    permit_mynetworks,

smtpd_recipient_restrictions = permit_mynetworks,
    permit_sasl_authenticated,
    reject_unauth_destination,
    reject_unknown_sender_domain,
&lt;/pre&gt;
&lt;p&gt;Here we basically tell Postfix to store all email in maildir format in
the user’s home directory. We then enable &lt;span class="caps"&gt;SASL&lt;/span&gt; with and tell it to not
allow anonymous auth and, tell it the hostname and enabled broken &lt;span class="caps"&gt;SASL&lt;/span&gt;
auth clients, just in-case.&lt;/p&gt;
&lt;p&gt;The next section tells Postfix to allow users to send if they pass &lt;span class="caps"&gt;SASL&lt;/span&gt;
auth or are listed in the allowed networks section.&lt;/p&gt;
&lt;p&gt;Finally we set Postfix’s recipient rules where we allow our networks,
&lt;span class="caps"&gt;SASL&lt;/span&gt; auth and reject any unauthorised destinations and unknown senders.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dovecot"&gt;
&lt;h2&gt;Dovecot&lt;/h2&gt;
&lt;p&gt;Open up &lt;strong&gt;/etc/dovecot/dovecot.conf&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Uncomment the &lt;span class="caps"&gt;IMAP&lt;/span&gt; and &lt;span class="caps"&gt;IMAPS&lt;/span&gt; protocols&lt;/p&gt;
&lt;pre class="literal-block"&gt;
protocols = imap imaps
&lt;/pre&gt;
&lt;p&gt;Next we configure the protocols, add the following lines just below the
protocols option&lt;/p&gt;
&lt;pre class="literal-block"&gt;
protocol imap {
    listen = *:143
    ssl_listen = *:993/
}
&lt;/pre&gt;
&lt;p&gt;Search through the file for “&lt;em&gt;mail_location =&lt;/em&gt;” without the quotes,
make sure it’s commented out and add the following below it:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
mail_location = maildir:~/Maildir/
&lt;/pre&gt;
&lt;p&gt;Now we need to search down the file and comment out everything within
the “&lt;em&gt;auth default&lt;/em&gt;” section and add the following below it&lt;/p&gt;
&lt;pre class="literal-block"&gt;
auth default {
    mechanisms = plain login
    passdb pam {
    }

    userdb passwd {
    }

    socket listen {
        client {
            path = /var/spool/postfix/private/auth
            mode = 0660
            user = postfix
            group = postfix
        }
    }
}
&lt;/pre&gt;
&lt;p&gt;Just to explain what we’ve done, we’ve enabled &lt;span class="caps"&gt;IMAP&lt;/span&gt; and &lt;span class="caps"&gt;IMAPS&lt;/span&gt; protocols
and configured the ports to be used, both ports are the standard ports.&lt;/p&gt;
&lt;p&gt;Next up we configure Dovecot to handle Maildir, just like with Postfix.&lt;/p&gt;
&lt;p&gt;And finally we set up our auth mechanism, specifying that it needs to do
so via Postfix.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sasl"&gt;
&lt;h2&gt;&lt;span class="caps"&gt;SASL&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;Open up the following file**/etc/default/saslauthd**, we need to modify
a couple of things. Set &lt;span class="caps"&gt;START&lt;/span&gt; to yes and &lt;span class="caps"&gt;MECHANISMS&lt;/span&gt; to pam.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;START&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;yes
&lt;span class="nv"&gt;MECHANISMS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"pam"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Due to the fact Postfix will be chrooted we need to make a few system
changes for &lt;span class="caps"&gt;SASL&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;First we remove the default &lt;span class="caps"&gt;SASL&lt;/span&gt; run location.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo rm -r /var/run/saslauthd/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we make one within the Postfix chroot.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo mkdir -p /var/spool/postfix/var/run/saslauthd
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Symlink it back to /var/run so things work.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo ln -s /var/spool/postfix/var/run/saslauthd /var/run
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Change the group for the directory we created.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo chgrp sasl /var/spool/postfix/var/run/saslauthd
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And finally add the Postfix user to the &lt;span class="caps"&gt;SASL&lt;/span&gt; group.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo adduser postfix sasl
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="finally"&gt;
&lt;h2&gt;Finally&lt;/h2&gt;
&lt;p&gt;Now we just need to restart our services.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /etc/init.d/dovecot restart
sudo /etc/init.d/postfix restart
sudo /etc/init.d/saslauthd restart
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If all went according to plan normal system users should now be able to
send and receive mail.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="/2011/09/16/postfix-spamassassin-clamav-procmail/"&gt;Part 2 - Postfix + SpamAssassin + ClamAV + Procmail »&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="tutorials"></category><category term="debian"></category><category term="dovecot"></category><category term="email"></category><category term="imap"></category><category term="imaps"></category><category term="mail"></category><category term="maildir"></category><category term="postfix"></category><category term="sasl"></category><category term="ubuntu"></category></entry><entry><title>Installing kernel headers for current kernel version with ease on Debian/Ubuntu</title><link href="https://kura.gg/2011/09/15/installing-kernel-headers-for-current-kernel-version-with-ease-on-debianubuntu/" rel="alternate"></link><published>2011-09-15T13:30:00+01:00</published><updated>2011-09-15T13:30:00+01:00</updated><author><name>kura</name></author><id>tag:kura.gg,2011-09-15:/2011/09/15/installing-kernel-headers-for-current-kernel-version-with-ease-on-debianubuntu/</id><content type="html">&lt;p&gt;This is a simple one but I found out that there are people out there
that don’t know about it, so here we go.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install linux-headers-&lt;span class="k"&gt;$(&lt;/span&gt;uname -r&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will install kernel headers for your current active kernel on Debian/Ubuntu.&lt;/p&gt;
</content><category term="tutorials"></category><category term="apt"></category><category term="apt-get"></category><category term="debian"></category><category term="headers"></category><category term="kernel"></category><category term="ubuntu"></category></entry><entry><title>nginx log real IP from Pound</title><link href="https://kura.gg/2011/08/10/nginx-log-real-ip-from-pound/" rel="alternate"></link><published>2011-08-10T12:34:00+01:00</published><updated>2011-08-10T12:34:00+01:00</updated><author><name>kura</name></author><id>tag:kura.gg,2011-08-10:/2011/08/10/nginx-log-real-ip-from-pound/</id><summary type="html">&lt;p&gt;Recently I started using Pound as a load balancer to a cluster of nginx
servers and found my access logs were filled with the &lt;span class="caps"&gt;IP&lt;/span&gt; address of the
load balancer. I did some digging and found the correct way to “fix” this.&lt;/p&gt;
&lt;p&gt;First thing you need to do is make sure you remove X-Forwarded-For from Pound&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ListenHTTP
    # ... snip ...
    # ... snip ...
    HeadRemove "X-Forwarded-For"
End
&lt;/pre&gt;
&lt;p&gt;Once this is done, reload Pound.&lt;/p&gt;
&lt;p&gt;Next you need nginx compiled with realip module -
&lt;a class="reference external" href="https://wiki.nginx.org/NginxHttpRealIpModule"&gt;https://wiki.nginx.org/NginxHttpRealIpModule&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;On Ubuntu/Debian servers this module comes by default, otherwise you may
have to compile it in yourself using the following option:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;--with-http_realip_module
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once this is all done modify your nginx vhosts and add the following 2 lines&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;set_real_ip_from&lt;/span&gt; &lt;span class="s"&gt;[IP]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;real_ip_header&lt;/span&gt; &lt;span class="s"&gt;X-Forwarded-For&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where [&lt;span class="caps"&gt;IP&lt;/span&gt;] is the &lt;span class="caps"&gt;IP&lt;/span&gt; address of your load balancer.&lt;/p&gt;
&lt;p&gt;To configure this to work with Apache you need the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently I started using Pound as a load balancer to a cluster of nginx
servers and found my access logs were filled with the &lt;span class="caps"&gt;IP&lt;/span&gt; address of the
load balancer. I did some digging and found the correct way to “fix” this.&lt;/p&gt;
&lt;p&gt;First thing you need to do is make sure you remove X-Forwarded-For from Pound&lt;/p&gt;
&lt;pre class="literal-block"&gt;
ListenHTTP
    # ... snip ...
    # ... snip ...
    HeadRemove "X-Forwarded-For"
End
&lt;/pre&gt;
&lt;p&gt;Once this is done, reload Pound.&lt;/p&gt;
&lt;p&gt;Next you need nginx compiled with realip module -
&lt;a class="reference external" href="https://wiki.nginx.org/NginxHttpRealIpModule"&gt;https://wiki.nginx.org/NginxHttpRealIpModule&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;On Ubuntu/Debian servers this module comes by default, otherwise you may
have to compile it in yourself using the following option:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;--with-http_realip_module
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once this is all done modify your nginx vhosts and add the following 2 lines&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;set_real_ip_from&lt;/span&gt; &lt;span class="s"&gt;[IP]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;real_ip_header&lt;/span&gt; &lt;span class="s"&gt;X-Forwarded-For&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where [&lt;span class="caps"&gt;IP&lt;/span&gt;] is the &lt;span class="caps"&gt;IP&lt;/span&gt; address of your load balancer.&lt;/p&gt;
&lt;p&gt;To configure this to work with Apache you need the mod_rpaf module.&lt;/p&gt;
</content><category term="tutorials"></category><category term="apache"></category><category term="load balancer"></category><category term="nginx"></category><category term="pound"></category><category term="reaip"></category><category term="x-forwarded-for"></category></entry><entry><title>Shared VMDKs on ESX vSphere</title><link href="https://kura.gg/2011/07/09/shared-vmdks-on-esx-vsphere/" rel="alternate"></link><published>2011-07-09T02:07:00+01:00</published><updated>2011-07-09T02:07:00+01:00</updated><author><name>kura</name></author><id>tag:kura.gg,2011-07-09:/2011/07/09/shared-vmdks-on-esx-vsphere/</id><summary type="html">&lt;p&gt;I’d first like to point out that although the VMDKs are shared between
hosts using a shared &lt;span class="caps"&gt;SCSI&lt;/span&gt; &lt;span class="caps"&gt;BUS&lt;/span&gt; they are not synched, meaning that if you
write to the mounted point on any machine it will not display on other
machines with the same mount point until you remount the drive.
Annoying, but understandable.&lt;/p&gt;
&lt;p&gt;To business.&lt;/p&gt;
&lt;p&gt;First off all machines that you want to share this &lt;span class="caps"&gt;VMDK&lt;/span&gt; with will need
to be &lt;span class="caps"&gt;OFFLINE&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Next up we create the &lt;span class="caps"&gt;VMDK&lt;/span&gt;, I find it easiest to do this by adding
hardware to an already existing machine, I’m going to use one that I
want the &lt;span class="caps"&gt;VMDK&lt;/span&gt; shared with to make it even simpler.&lt;/p&gt;
&lt;img alt="Create a new disk" src="/images/shared-vmdks-on-esx-vsphere1.png"/&gt;
&lt;p&gt;You will need to enable clustering features as shown below, this means
you cannot use thin provisioning.&lt;/p&gt;
&lt;img alt="Choose disk size" src="/images/shared-vmdks-on-esx-vsphere2.png"/&gt;
&lt;p&gt;You will need to add the &lt;span class="caps"&gt;VMDK&lt;/span&gt; to a new &lt;span class="caps"&gt;SCSI&lt;/span&gt; &lt;span class="caps"&gt;BUS&lt;/span&gt;, this will usually begin
with 1: or …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I’d first like to point out that although the VMDKs are shared between
hosts using a shared &lt;span class="caps"&gt;SCSI&lt;/span&gt; &lt;span class="caps"&gt;BUS&lt;/span&gt; they are not synched, meaning that if you
write to the mounted point on any machine it will not display on other
machines with the same mount point until you remount the drive.
Annoying, but understandable.&lt;/p&gt;
&lt;p&gt;To business.&lt;/p&gt;
&lt;p&gt;First off all machines that you want to share this &lt;span class="caps"&gt;VMDK&lt;/span&gt; with will need
to be &lt;span class="caps"&gt;OFFLINE&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Next up we create the &lt;span class="caps"&gt;VMDK&lt;/span&gt;, I find it easiest to do this by adding
hardware to an already existing machine, I’m going to use one that I
want the &lt;span class="caps"&gt;VMDK&lt;/span&gt; shared with to make it even simpler.&lt;/p&gt;
&lt;img alt="Create a new disk" src="/images/shared-vmdks-on-esx-vsphere1.png"/&gt;
&lt;p&gt;You will need to enable clustering features as shown below, this means
you cannot use thin provisioning.&lt;/p&gt;
&lt;img alt="Choose disk size" src="/images/shared-vmdks-on-esx-vsphere2.png"/&gt;
&lt;p&gt;You will need to add the &lt;span class="caps"&gt;VMDK&lt;/span&gt; to a new &lt;span class="caps"&gt;SCSI&lt;/span&gt; &lt;span class="caps"&gt;BUS&lt;/span&gt;, this will usually begin
with 1: or 2: depending on how many &lt;span class="caps"&gt;SCSI&lt;/span&gt; &lt;span class="caps"&gt;BUS&lt;/span&gt; you have connected already,
I’m using 1:0 as shown below.&lt;/p&gt;
&lt;p&gt;You will also need to set it’s &lt;span class="caps"&gt;MODE&lt;/span&gt; as “Independent” and “Persistent”.&lt;/p&gt;
&lt;img alt="Set disk mode" src="/images/shared-vmdks-on-esx-vsphere3.png"/&gt;
&lt;p&gt;Once the drive has been added it will appear in your &lt;span class="caps"&gt;VM&lt;/span&gt; hardware list
along with the new &lt;span class="caps"&gt;SCSI&lt;/span&gt; controller. Click on the controller to modify it
and set it as “Physical” as shown below.&lt;/p&gt;
&lt;img alt="New disk is added" src="/images/shared-vmdks-on-esx-vsphere4.png"/&gt;
&lt;p&gt;Once this is down, close out of the hardware panel and modify the other
VMs you wish this disk to be shared to, do exactly as above but adding
the existing &lt;span class="caps"&gt;VMDK&lt;/span&gt; to each &lt;span class="caps"&gt;VM&lt;/span&gt; rather than creating a new drive.&lt;/p&gt;
&lt;p&gt;When you’re finished, power on all of the machines and mount the device
as you normally would for your operating system.&lt;/p&gt;
</content><category term="tutorials"></category><category term="esx"></category><category term="iscsi"></category><category term="scsi"></category><category term="shared vmdk"></category><category term="vmdk"></category><category term="vmware"></category></entry><entry><title>Logging Google Analytics cookies with nginx</title><link href="https://kura.gg/2011/06/05/logging-google-analytics-cookies-with-nginx/" rel="alternate"></link><published>2011-06-05T20:41:00+01:00</published><updated>2011-06-05T20:41:00+01:00</updated><author><name>kura</name></author><id>tag:kura.gg,2011-06-05:/2011/06/05/logging-google-analytics-cookies-with-nginx/</id><summary type="html">&lt;p&gt;I was recently tasked with adding Google tracking cookies to our nginx
logging for a couple of sites. It was so it could be pushed through a
log processor.&lt;/p&gt;
&lt;p&gt;It turned out too be a little trickier than it would have been with
Apache, but the process itself is still quite simple.&lt;/p&gt;
&lt;p&gt;Open up the server definition you wish to add it to and add a custom log
format like below&lt;/p&gt;
&lt;pre class="literal-block"&gt;
log_format g-a '$remote_addr - $remote_user [$time_local] ' '"$request" $status $body_bytes_sent ' '"$http_referer" "$http_user_agent" ' '"__utma=$cookie___utma;__utmb=$cookie___utmb;__utmc=$cookie___utmc;__utmv=$cookie___utmv;__utmz=$cookie_umtz"';
&lt;/pre&gt;
&lt;p&gt;This log format can then be added to your access log like below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;access_log&lt;/span&gt; &lt;span class="s"&gt;/var/log/nginx/access.example.com.log&lt;/span&gt; &lt;span class="s"&gt;g-a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Reload nginx&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /etc/init.d/nginx reload
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If all goes well, you should see Google Analytics appearing in your
access logs …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I was recently tasked with adding Google tracking cookies to our nginx
logging for a couple of sites. It was so it could be pushed through a
log processor.&lt;/p&gt;
&lt;p&gt;It turned out too be a little trickier than it would have been with
Apache, but the process itself is still quite simple.&lt;/p&gt;
&lt;p&gt;Open up the server definition you wish to add it to and add a custom log
format like below&lt;/p&gt;
&lt;pre class="literal-block"&gt;
log_format g-a '$remote_addr - $remote_user [$time_local] ' '"$request" $status $body_bytes_sent ' '"$http_referer" "$http_user_agent" ' '"__utma=$cookie___utma;__utmb=$cookie___utmb;__utmc=$cookie___utmc;__utmv=$cookie___utmv;__utmz=$cookie_umtz"';
&lt;/pre&gt;
&lt;p&gt;This log format can then be added to your access log like below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;access_log&lt;/span&gt; &lt;span class="s"&gt;/var/log/nginx/access.example.com.log&lt;/span&gt; &lt;span class="s"&gt;g-a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Reload nginx&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /etc/init.d/nginx reload
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If all goes well, you should see Google Analytics appearing in your
access logs like below&lt;/p&gt;
&lt;pre class="literal-block"&gt;
1.1.1.1 - - [05/Jun/2011:20:35:50 +0100] "GET / HTTP/1.1" 200 368 "" "Mozilla/5.0 (Windows NT 6.1) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.1 Safari/535.1" "__utma=65957554.1846091937.1301339836.1306174686.1306258917.5;__utmb=-;__utmc=-;__utmv=-;__utmz=-"
&lt;/pre&gt;
</content><category term="tutorials"></category><category term="google analytics"></category><category term="logging"></category><category term="nginx"></category></entry><entry><title>SSH Tunnelling</title><link href="https://kura.gg/2011/02/14/ssh-tunnelling/" rel="alternate"></link><published>2011-02-14T20:37:00+00:00</published><updated>2011-02-14T20:37:00+00:00</updated><author><name>kura</name></author><id>tag:kura.gg,2011-02-14:/2011/02/14/ssh-tunnelling/</id><content type="html">&lt;p&gt;Quite a simple one:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh -f USER@INTERMEDIATE_DEVICE -L LOCAL_PORT:DESTINATION_DEVICE:DESTINATION_PORT -N
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;-f&lt;/strong&gt; tells ssh to go to background
&lt;strong&gt;-L&lt;/strong&gt; binds a local port to a remote device and port
&lt;strong&gt;-N&lt;/strong&gt; tells ssh not to execute any commands&lt;/p&gt;
&lt;p&gt;So use this to tunnel from local port 8000 in to a remote machine on
port 22 you’d use&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh -f user@server.test.com -L &lt;span class="m"&gt;8000&lt;/span&gt;:server.destination.com:22 -N
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once the tunnel is open you can use the following to ssh or scp data around&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh localhost -p &lt;span class="m"&gt;8000&lt;/span&gt;
scp -P &lt;span class="m"&gt;8000&lt;/span&gt; /path/to/local/file user@localhost:~
scp -P &lt;span class="m"&gt;8000&lt;/span&gt; user@localhost:/path/to/remote/file .
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I use ssh tunnels all the time to remote access and use one of our Solr
servers that is blocked behind a firewall.&lt;/p&gt;
</content><category term="tutorials"></category><category term="ssh"></category><category term="tunnel"></category></entry><entry><title>Debian/Ubuntu upgrade security packages only</title><link href="https://kura.gg/2010/12/13/debianubuntu-upgrade-security-packages-only/" rel="alternate"></link><published>2010-12-13T16:27:00+00:00</published><updated>2010-12-13T16:27:00+00:00</updated><author><name>kura</name></author><id>tag:kura.gg,2010-12-13:/2010/12/13/debianubuntu-upgrade-security-packages-only/</id><content type="html">&lt;p&gt;&lt;strong&gt;The command below no longer works, for an updated version that does
work and should continue to work (until you upgrade to a new distro
version e.g. 10.04 -&amp;gt; 12.04) please see `here`_.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Really simple, should work for most cases, I’ve not found anything wrong
with it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo aptitude update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo aptitude install &lt;span class="s1"&gt;'?and(~U,~Asecurity)'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</content><category term="tutorials"></category><category term="apt-get"></category><category term="aptitude"></category><category term="security"></category><category term="update"></category><category term="upgrade"></category></entry><entry><title>Refresh Linux partition table online</title><link href="https://kura.gg/2010/10/20/refresh-linux-partition-table-online/" rel="alternate"></link><published>2010-10-20T17:17:00+01:00</published><updated>2010-10-20T17:17:00+01:00</updated><author><name>kura</name></author><id>tag:kura.gg,2010-10-20:/2010/10/20/refresh-linux-partition-table-online/</id><content type="html">
&lt;div class="section" id="if-the-device-is-not-mounted"&gt;
&lt;h2&gt;If the device is not mounted&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo blockdev --rereadpt DEVICE
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;E.g.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo blockdev --rereadpt /dev/sda
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="if-the-device-is-mounted"&gt;
&lt;h2&gt;If the device is mounted&lt;/h2&gt;
&lt;p&gt;Parted is awesome and does this job amazingly.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install parted
sudo partprobe
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="tutorials"></category><category term="linux"></category><category term="online"></category><category term="partition"></category></entry><entry><title>WordPress + nginx + Varnish + Apache 2</title><link href="https://kura.gg/2010/09/26/nginx-varnish-apache2/" rel="alternate"></link><published>2010-09-26T19:41:00+01:00</published><updated>2010-09-26T19:41:00+01:00</updated><author><name>kura</name></author><id>tag:kura.gg,2010-09-26:/2010/09/26/nginx-varnish-apache2/</id><summary type="html">
&lt;p&gt;Lately I’ve been doing a lot of work with Varnish, this includes testing
it within a load balanced environment, putting it behind nginx, putting
it in front of Solr, the list goes on.&lt;/p&gt;
&lt;p&gt;This blog post will hopefully give you an insight in to a simple way of
combining nginx, Varnish and Apache to create a powerful Wordpress
environment that can really take a hammering.&lt;/p&gt;
&lt;p&gt;I’m going to assume you already have Apache and nginx working together,
if not I suggest you read my other articles on these subjects to learn
how to combine them.&lt;/p&gt;
&lt;div class="section" id="installing-varnish"&gt;
&lt;h2&gt;Installing Varnish&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install varnish
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="configuring-apache"&gt;
&lt;h2&gt;Configuring Apache&lt;/h2&gt;
&lt;p&gt;I suggest binding Apache to port 81, this is easy to change, open the
following file in your favourite editor.&lt;/p&gt;
&lt;blockquote&gt;
/etc/apache2/ports.conf&lt;/blockquote&gt;
&lt;p&gt;Change the Listen and NameVirtualHost lines to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;Listen&lt;/span&gt; &lt;span class="m"&gt;81&lt;/span&gt;
&lt;span class="nb"&gt;NameVirtualHost&lt;/span&gt; *:81
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will mean you need to go and change all …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
&lt;p&gt;Lately I’ve been doing a lot of work with Varnish, this includes testing
it within a load balanced environment, putting it behind nginx, putting
it in front of Solr, the list goes on.&lt;/p&gt;
&lt;p&gt;This blog post will hopefully give you an insight in to a simple way of
combining nginx, Varnish and Apache to create a powerful Wordpress
environment that can really take a hammering.&lt;/p&gt;
&lt;p&gt;I’m going to assume you already have Apache and nginx working together,
if not I suggest you read my other articles on these subjects to learn
how to combine them.&lt;/p&gt;
&lt;div class="section" id="installing-varnish"&gt;
&lt;h2&gt;Installing Varnish&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install varnish
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="configuring-apache"&gt;
&lt;h2&gt;Configuring Apache&lt;/h2&gt;
&lt;p&gt;I suggest binding Apache to port 81, this is easy to change, open the
following file in your favourite editor.&lt;/p&gt;
&lt;blockquote&gt;
/etc/apache2/ports.conf&lt;/blockquote&gt;
&lt;p&gt;Change the Listen and NameVirtualHost lines to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;Listen&lt;/span&gt; &lt;span class="m"&gt;81&lt;/span&gt;
&lt;span class="nb"&gt;NameVirtualHost&lt;/span&gt; *:81
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will mean you need to go and change all of your virtualhost
definitions to work on port 81.&lt;/p&gt;
&lt;p&gt;Example below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;VirtualHost&lt;/span&gt; &lt;span class="s"&gt;*:81&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nb"&gt;ServerAdmin&lt;/span&gt; webmaster@example.com
    &lt;span class="nb"&gt;ServerName&lt;/span&gt; example.com
    &lt;span class="nb"&gt;DocumentRoot&lt;/span&gt; &lt;span class="sx"&gt;/var/www/website&lt;/span&gt;

    &lt;span class="nb"&gt;CustomLog&lt;/span&gt; &lt;span class="sx"&gt;/var/log/apache2/access.example.com.log&lt;/span&gt; combined
    &lt;span class="nb"&gt;ErrorLog&lt;/span&gt; &lt;span class="sx"&gt;/var/log/apache2/error.example.com.log&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/VirtualHost&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="configuring-varnish"&gt;
&lt;h2&gt;Configuring Varnish&lt;/h2&gt;
&lt;p&gt;Open the following file in your favourite editor&lt;/p&gt;
&lt;blockquote&gt;
/etc/varnish/default.vcl&lt;/blockquote&gt;
&lt;p&gt;First we define a backend&lt;/p&gt;
&lt;pre class="literal-block"&gt;
backend default {
    .host = "localhost";
    .port = "81";
}
&lt;/pre&gt;
&lt;p&gt;This defines a host, this should be pretty straight forward, we set the
host and port number to use.&lt;/p&gt;
&lt;p&gt;Next we define a list of allowed hosts, this is going to be used to
verify if the requester is allowed to use the &lt;span class="caps"&gt;PURGE&lt;/span&gt; request type, this
is used for purging pages on-the-fly and will be explained later.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
acl purge {
    "localhost";
}
&lt;/pre&gt;
&lt;p&gt;Next we set up our vcl_recv method, this is called when a request is received.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sub vcl_recv {
    set req.grace = 6h;

    if (req.request == "PURGE") {
        if(!client.ip ~ purge) {
            error 405 "Not allowed.";
        }

    purge("req.url ~ ^" req.url "$ &amp;amp;&amp;amp; req.http.host == "req.http.host);

    }

    if (req.url ~ ".(jpg|png|gif|gz|tgz|bz2|lzma|tbz)(?.*|)$") {
        remove req.http.Accept-Encoding;
    } elsif (req.http.Accept-Encoding ~ "gzip") {
        set req.http.Accept-Encoding = "gzip";
    } elsif (req.http.Accept-Encoding ~ "deflate") {
        set req.http.Accept-Encoding = "deflate";
    } else {
        remove req.http.Accept-Encoding;
    }

    if (req.url ~ "wp-(login|admin)") {
        return (pass);
    }

    if (req.request != "GET" &amp;amp;&amp;amp; req.request != "HEAD") {
        return (pass);
    }

    unset req.http.cookie;

    if (req.url ~ ".(jpeg|jpg|png|gif|ico|swf|js|css|txt|gz|zip|rar|bz2|tgz|tbz|html|htm|pdf|pls|torrent)(?.*|)$") {
        unset req.http.Authenticate;
        unset req.http.POSTDATA;
        set req.request = "GET";
        set req.url = regsub(req.url, "?.*$", "");
        return (lookup);
    }

}
&lt;/pre&gt;
&lt;p&gt;I should explain what the above method does.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We set req.grace to 6 hours, this means that if the cache expires and
the backend is unreachable Varnish will continue using the cached
copy for 6 hours. The first if statement checks to see if the request
type is &lt;span class="caps"&gt;PURGE&lt;/span&gt;, if it is then it looks to see if the requester is in
the access list, if they are then it purges the requested page. More
on this later.&lt;/li&gt;
&lt;li&gt;The next if/elseif/else statement is for handling encoding, it should
be relatively straight forward.&lt;/li&gt;
&lt;li&gt;Next we look to see if the url is either wp-login or wp-admin, if it
is we tell Varnish to pass to the backend and exit the vcl_recv function.&lt;/li&gt;
&lt;li&gt;We then check to see if the request type is neither &lt;span class="caps"&gt;GET&lt;/span&gt; nor &lt;span class="caps"&gt;HEAD&lt;/span&gt;, if
not we pass to the backend and exit vcl_recv.&lt;/li&gt;
&lt;li&gt;Next we unset all cookies, this is required since Varnish will not
cache content when cookies are present.&lt;/li&gt;
&lt;li&gt;The final if statement checks to see if the url has a static content
extension, removes all &lt;span class="caps"&gt;HTTP&lt;/span&gt; Auth and &lt;span class="caps"&gt;POST&lt;/span&gt; data, sets the request type
to &lt;span class="caps"&gt;GET&lt;/span&gt; and removes all QUERY_STRING content from the &lt;span class="caps"&gt;URL&lt;/span&gt; if it is
static content.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Next is vcl_pipe and vcl_pass.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sub vcl_pipe {
    set bereq.http.connection = "close";
    if (req.http.X-Forwarded-For) {
        set bereq.http.X-Forwarded-For = req.http.X-Forwarded-For;
    } else {
        set bereq.http.X-Forwarded-For = regsub(client.ip, ":.*", "");
    }
}
sub vcl_pass {
    set bereq.http.connection = "close";
    if (req.http.X-Forwarded-For) {
        set bereq.http.X-Forwarded-For = req.http.X-Forwarded-For;
    } else {
        set bereq.http.X-Forwarded-For = regsub(client.ip, ":.*", "");
    }
}
&lt;/pre&gt;
&lt;p&gt;These methods are identical and simply pass our X-Forwarded-For headers
around, this is used within nginx and Apache for logging correct &lt;span class="caps"&gt;IP&lt;/span&gt;
addresses in the access logs.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sub vcl_fetch {
    set beresp.ttl = 1h;
    set req.grace = 6h;
    if (req.url ~ "wp-(login|admin)") {
        return (pass);
    }

    unset beresp.http.set-cookie;

    if (req.url ~ ".(jpeg|jpg|png|gif|ico|swf|js|css|txt|gz|zip|rar|bz2|tgz|tbz|html|htm|pdf|pls|torrent)$") {
        set beresp.ttl = 24h;
    }
}
&lt;/pre&gt;
&lt;p&gt;This method is where content is returned from Varnish back to nginx.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;First we set the &lt;span class="caps"&gt;TTL&lt;/span&gt; of the cache to 1 hour.&lt;/li&gt;
&lt;li&gt;We again set the grace period as above in vcl_recv,&lt;/li&gt;
&lt;li&gt;again we check for wp-login or wp-admin and drop out of the method if
it’s found, this stops admin pages being cached.&lt;/li&gt;
&lt;li&gt;Next we unset the Set-Cookie header&lt;/li&gt;
&lt;li&gt;and finally if we detect the url contains a static content extension
we set the &lt;span class="caps"&gt;TTL&lt;/span&gt; of the cache to 24 hours.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And last but not least is vcl_deliver, this one simply adds some
X-Cache header information for debug purposes and can be ignored.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
sub vcl_deliver {
    if (obj.hits &amp;gt; 0) {
        set resp.http.X-Cache = "HIT";
        set resp.http.X-Cache-Hits = obj.hits;
    } else {
        set resp.http.X-Cache = "MISS";
    }
}
&lt;/pre&gt;
&lt;p&gt;Varnish is now configured.&lt;/p&gt;
&lt;p&gt;You can find a copy of my default.vcl file here -
&lt;a class="reference external" href="/files/syslog-varnish-default-vcl-26-sept-2010"&gt;/files/syslog-varnish-default-vcl-26-sept-2010&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="configuring-nginx"&gt;
&lt;h2&gt;Configuring nginx&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;example.com&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;access_log&lt;/span&gt; &lt;span class="s"&gt;/var/log/nginx/access.example.com.log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;gzip&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;gzip_disable&lt;/span&gt; &lt;span class="s"&gt;msie6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;gzip_static&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;gzip_comp_level&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;gzip_proxied&lt;/span&gt; &lt;span class="s"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;gzip_types&lt;/span&gt; &lt;span class="s"&gt;text/plain&lt;/span&gt; &lt;span class="s"&gt;text/css&lt;/span&gt; &lt;span class="s"&gt;application/x-javascript&lt;/span&gt; &lt;span class="s"&gt;text/xml&lt;/span&gt; &lt;span class="s"&gt;application/xml&lt;/span&gt; &lt;span class="s"&gt;application/xml+rss&lt;/span&gt; &lt;span class="s"&gt;text/javascript&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_redirect&lt;/span&gt; &lt;span class="no"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;Host&lt;/span&gt; &lt;span class="nv"&gt;$host&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;X-Real-IP&lt;/span&gt; &lt;span class="nv"&gt;$remote_addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;X-Forwarded-For&lt;/span&gt; &lt;span class="nv"&gt;$proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_pass_header&lt;/span&gt; &lt;span class="s"&gt;Set-Cookie&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;https://localhost:6081&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This nginx host config should be simple to those of you who’ve read my
other articles, if not then here’s a quick summary;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;listen and server_name are simply the port to listen on and the
domain name,&lt;/li&gt;
&lt;li&gt;gzip enables gzip,&lt;/li&gt;
&lt;li&gt;gzip_disable tells nginx not to gzip compress for &lt;span class="caps"&gt;IE6&lt;/span&gt;,&lt;/li&gt;
&lt;li&gt;gzip_static is on to enable compression of static content (jpeg, gif etc),&lt;/li&gt;
&lt;li&gt;gzip_comp_level is the level of compression, 1-9 (higher = more compressed)&lt;/li&gt;
&lt;li&gt;gzip_proxied is set to any to gzip proxied content&lt;/li&gt;
&lt;li&gt;and finally we set the types of files to gzip.&lt;/li&gt;
&lt;li&gt;Next we set up our location,&lt;/li&gt;
&lt;li&gt;disable proxy redirects&lt;/li&gt;
&lt;li&gt;set Host, X-Real-Ip and X-Forwarded-For headers&lt;/li&gt;
&lt;li&gt;pass back the Set-Cookie header&lt;/li&gt;
&lt;li&gt;and pass the connection over to Varnish.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="finishing-up"&gt;
&lt;h2&gt;Finishing up&lt;/h2&gt;
&lt;p&gt;Now we simply need to restart the services&lt;/p&gt;
&lt;blockquote&gt;
/etc/init.d/apache2 force-reload &amp;amp;&amp;amp; /etc/init.d/varnish restart &amp;amp;&amp;amp; /etc/init.d/nginx reload&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="testing"&gt;
&lt;h2&gt;Testing&lt;/h2&gt;
&lt;p&gt;Now you can browse your site and it should be going through nginx and
Varnish and only hitting Apache if the content is not cached or if
you’re using the WordPress admin panel or doing a &lt;span class="caps"&gt;POST&lt;/span&gt; request.&lt;/p&gt;
&lt;p&gt;You can test this with Live &lt;span class="caps"&gt;HTTP&lt;/span&gt; Headers extension for Firefox -
&lt;a class="reference external" href="https://addons.mozilla.org/en-US/firefox/addon/3829/"&gt;https://addons.mozilla.org/en-&lt;span class="caps"&gt;US&lt;/span&gt;/firefox/addon/3829/&lt;/a&gt; (this will only
work if you used my vcl_delivery method in your Varnish config).&lt;/p&gt;
&lt;p&gt;Go to a page on your site, refresh a few times, open up Live &lt;span class="caps"&gt;HTTP&lt;/span&gt;
Headers and refresh again, you should see the following&lt;/p&gt;
&lt;pre class="literal-block"&gt;
HTTP/1.1 200 OK
Server: nginx
... snip ...
Via: 1.1 varnish
X-Cache: HIT
X-Cache-Hits: &amp;lt;numeric value&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;
</content><category term="tutorials"></category><category term="apache"></category><category term="nginx"></category><category term="varnish"></category><category term="wordpress"></category></entry><entry><title>Mounting a remote filesystem using sshfs</title><link href="https://kura.gg/2010/09/26/mounting-a-remote-filesystem-using-sshfs/" rel="alternate"></link><published>2010-09-26T01:55:00+01:00</published><updated>2010-09-26T01:55:00+01:00</updated><author><name>kura</name></author><id>tag:kura.gg,2010-09-26:/2010/09/26/mounting-a-remote-filesystem-using-sshfs/</id><content type="html">&lt;p&gt;First we need to install sshfs.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install sshfs fuse-utils
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we make a mount point, I’m going to use a directory in my home
directory for this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkd﻿ir ~/remote-content
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And now we simply mount our remote directory to it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sshfs user@host:/path/to/location ~/remote-content
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It’s as simple as that.&lt;/p&gt;
</content><category term="tutorials"></category><category term="ssh"></category><category term="sshfs"></category></entry><entry><title>MySQL Master-Master-Slave-Slave Replication</title><link href="https://kura.gg/2010/09/04/mysql-master-master-slave-slave-replication/" rel="alternate"></link><published>2010-09-04T18:14:00+01:00</published><updated>2010-09-04T18:14:00+01:00</updated><author><name>kura</name></author><id>tag:kura.gg,2010-09-04:/2010/09/04/mysql-master-master-slave-slave-replication/</id><summary type="html">
&lt;div class="section" id="quick-introduction"&gt;
&lt;h2&gt;Quick introduction&lt;/h2&gt;
&lt;p&gt;My employers presented me with a challenge this week. The task was not
difficult in the end but to me it was an untried concept involving MySQL.&lt;/p&gt;
&lt;p&gt;I have never been a fan of MySQL and generally turn my nose at the
thought of using it, let alone replicating it etc.&lt;/p&gt;
&lt;p&gt;The task in question? Master -&amp;gt; Master -&amp;gt; Slave -&amp;gt; Slave replication.&lt;/p&gt;
&lt;p&gt;From this point forward I will expect you to have MySQL installed and
set-up as normal.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Master 1 will be known as Master 1 and Slave 2 with &lt;span class="caps"&gt;IP&lt;/span&gt; 10.1.1.1&lt;/li&gt;
&lt;li&gt;Master 2 will be known as Master 2 and Slave 1 with &lt;span class="caps"&gt;IP&lt;/span&gt; 10.1.1.2&lt;/li&gt;
&lt;li&gt;Slave 1 will be known as Slave 3 with &lt;span class="caps"&gt;IP&lt;/span&gt; 10.1.1.3&lt;/li&gt;
&lt;li&gt;and Slave 2 will be known as Slave 4 with &lt;span class="caps"&gt;IP&lt;/span&gt; 10.1.1.4&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="master-1"&gt;
&lt;h2&gt;Master 1&lt;/h2&gt;
&lt;p&gt;Modify your MySQL config file, usually named …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
&lt;div class="section" id="quick-introduction"&gt;
&lt;h2&gt;Quick introduction&lt;/h2&gt;
&lt;p&gt;My employers presented me with a challenge this week. The task was not
difficult in the end but to me it was an untried concept involving MySQL.&lt;/p&gt;
&lt;p&gt;I have never been a fan of MySQL and generally turn my nose at the
thought of using it, let alone replicating it etc.&lt;/p&gt;
&lt;p&gt;The task in question? Master -&amp;gt; Master -&amp;gt; Slave -&amp;gt; Slave replication.&lt;/p&gt;
&lt;p&gt;From this point forward I will expect you to have MySQL installed and
set-up as normal.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Master 1 will be known as Master 1 and Slave 2 with &lt;span class="caps"&gt;IP&lt;/span&gt; 10.1.1.1&lt;/li&gt;
&lt;li&gt;Master 2 will be known as Master 2 and Slave 1 with &lt;span class="caps"&gt;IP&lt;/span&gt; 10.1.1.2&lt;/li&gt;
&lt;li&gt;Slave 1 will be known as Slave 3 with &lt;span class="caps"&gt;IP&lt;/span&gt; 10.1.1.3&lt;/li&gt;
&lt;li&gt;and Slave 2 will be known as Slave 4 with &lt;span class="caps"&gt;IP&lt;/span&gt; 10.1.1.4&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="master-1"&gt;
&lt;h2&gt;Master 1&lt;/h2&gt;
&lt;p&gt;Modify your MySQL config file, usually named my.cnf or mysql.cnf&lt;/p&gt;
&lt;p&gt;Add the following lines to [mysqld]&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[mysqld]&lt;/span&gt;
&lt;span class="na"&gt;server-id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;1&lt;/span&gt;
&lt;span class="na"&gt;auto_increment_offset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;1&lt;/span&gt;
&lt;span class="na"&gt;auto_increment_increment&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;2&lt;/span&gt;

&lt;span class="na"&gt;log-bin&lt;/span&gt;
&lt;span class="na"&gt;binlog-ignore-db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;mysql&lt;/span&gt;
&lt;span class="na"&gt;binlog-ignore-db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;test&lt;/span&gt;
&lt;span class="na"&gt;log-slave-updates&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Save and close.&lt;/p&gt;
&lt;p&gt;You should note that I have included &lt;em&gt;auto_increment_offset*and
*auto_increment_increment&lt;/em&gt;. auto_increment_offset is the same as
server-id in my case, it does as the name suggests - offsets the auto
increment value. auto_increment_increment should be set to the number
of servers you have as masters, in this example we have 2.&lt;/p&gt;
&lt;p&gt;Open up a MySQL prompt and run the following query&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;GRANT&lt;/span&gt; &lt;span class="k"&gt;REPLICATION&lt;/span&gt; &lt;span class="k"&gt;SLAVE&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;TO&lt;/span&gt; &lt;span class="s1"&gt;'replication'&lt;/span&gt;&lt;span class="nv"&gt;@'10.1.1.2'&lt;/span&gt; &lt;span class="k"&gt;IDENTIFIED&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="s1"&gt;'password'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now restart MySQL.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="master-2-slave-1"&gt;
&lt;h2&gt;Master 2 (Slave 1)&lt;/h2&gt;
&lt;p&gt;Modify your MySQL config file.&lt;/p&gt;
&lt;p&gt;Add the following in [mysqld]&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[mysqld]&lt;/span&gt;
&lt;span class="na"&gt;server-id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;2&lt;/span&gt;
&lt;span class="na"&gt;auto_increment_offset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;2&lt;/span&gt;
&lt;span class="na"&gt;auto_increment_increment&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;2&lt;/span&gt;

&lt;span class="na"&gt;log-bin&lt;/span&gt;
&lt;span class="na"&gt;binlog-ignore-db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;mysql&lt;/span&gt;
&lt;span class="na"&gt;binlog-ignore-db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;test&lt;/span&gt;
&lt;span class="na"&gt;log-slave-updates&lt;/span&gt;

&lt;span class="na"&gt;master-host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;10.1.1.1&lt;/span&gt;
&lt;span class="na"&gt;master-user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;replication&lt;/span&gt;
&lt;span class="na"&gt;master-password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;password&lt;/span&gt;
&lt;span class="na"&gt;master-port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;3306&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Save and restart MySQL.&lt;/p&gt;
&lt;p&gt;Now open a MySQL prompt and run the following queries&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;START&lt;/span&gt; &lt;span class="k"&gt;SLAVE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;SHOW&lt;/span&gt; &lt;span class="k"&gt;SLAVE&lt;/span&gt; &lt;span class="k"&gt;STATUS&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Slave_IO_Running and Slave_SQL_Running must be set to &lt;strong&gt;Yes&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="master-1-slave-2"&gt;
&lt;h2&gt;Master 1 (Slave 2)&lt;/h2&gt;
&lt;p&gt;Open a MySQL prompt and run the following query&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SHOW&lt;/span&gt; &lt;span class="k"&gt;MASTER&lt;/span&gt; &lt;span class="k"&gt;STATUS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You should see a master record has been created.&lt;/p&gt;
&lt;p&gt;Now we need to configure Master 1 to run as Slave 2.&lt;/p&gt;
&lt;p&gt;Modify MySQL config and add the following lines to [mysqld]&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[mysqld]&lt;/span&gt;
&lt;span class="na"&gt;master-host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;10.1.1.2&lt;/span&gt;
&lt;span class="na"&gt;master-user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;replication&lt;/span&gt;
&lt;span class="na"&gt;master-password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;password&lt;/span&gt;
&lt;span class="na"&gt;master-port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;3306&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Save and restart MySQL.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="master-2"&gt;
&lt;h2&gt;Master 2&lt;/h2&gt;
&lt;p&gt;Open a MySQL prompt and run the following query&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;GRANT&lt;/span&gt; &lt;span class="k"&gt;REPLICATION&lt;/span&gt; &lt;span class="k"&gt;SLAVE&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;TO&lt;/span&gt; &lt;span class="s1"&gt;'replication'&lt;/span&gt;&lt;span class="nv"&gt;@'10.1.1.1'&lt;/span&gt; &lt;span class="k"&gt;IDENTIFIED&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="s1"&gt;'password'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="master-1-1"&gt;
&lt;h2&gt;Master 1&lt;/h2&gt;
&lt;p&gt;Open a MySQL prompt and run the following queries&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;START&lt;/span&gt; &lt;span class="k"&gt;SLAVE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;SHOW&lt;/span&gt; &lt;span class="k"&gt;SLAVE&lt;/span&gt; &lt;span class="k"&gt;STATUS&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Slave_IO_Running and Slave_SQL_Running must be set to &lt;strong&gt;Yes&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="slave-3-and-slave-4"&gt;
&lt;h2&gt;Slave 3 and Slave 4&lt;/h2&gt;
&lt;p&gt;Now that you have Master - Master replication set up it’s time to attach
the slaves.&lt;/p&gt;
&lt;p&gt;I am going to do the following&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;make Slave 3 slave of Master 1&lt;/li&gt;
&lt;li&gt;and Slave 4 a slave of Master 2.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="master-1-2"&gt;
&lt;h2&gt;Master 1&lt;/h2&gt;
&lt;p&gt;Open a MySQL prompt and run the following query&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;GRANT&lt;/span&gt; &lt;span class="k"&gt;REPLICATION&lt;/span&gt; &lt;span class="k"&gt;SLAVE&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;TO&lt;/span&gt; &lt;span class="s1"&gt;'replication'&lt;/span&gt;&lt;span class="nv"&gt;@'10.1.1.3'&lt;/span&gt; &lt;span class="k"&gt;IDENTIFIED&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="s1"&gt;'password'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="master-2-1"&gt;
&lt;h2&gt;Master 2&lt;/h2&gt;
&lt;p&gt;Open a MySQL prompt and run the following query&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;GRANT&lt;/span&gt; &lt;span class="k"&gt;REPLICATION&lt;/span&gt; &lt;span class="k"&gt;SLAVE&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;TO&lt;/span&gt; &lt;span class="s1"&gt;'replication'&lt;/span&gt;&lt;span class="nv"&gt;@'10.1.1.4'&lt;/span&gt; &lt;span class="k"&gt;IDENTIFIED&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="s1"&gt;'password'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="slave-3"&gt;
&lt;h2&gt;Slave 3&lt;/h2&gt;
&lt;p&gt;Open your MySQL config file, under [mysqld] put the following&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[mysqld]&lt;/span&gt;
&lt;span class="na"&gt;server-id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;3&lt;/span&gt;

&lt;span class="na"&gt;master-host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;10.1.1.1&lt;/span&gt;
&lt;span class="na"&gt;master-user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;replication&lt;/span&gt;
&lt;span class="na"&gt;master-password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;password&lt;/span&gt;
&lt;span class="na"&gt;master-port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;3306&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Save and restart MySQL.&lt;/p&gt;
&lt;p&gt;Open a MySQL prompt and run the following queries&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;START&lt;/span&gt; &lt;span class="k"&gt;SLAVE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;SHOW&lt;/span&gt; &lt;span class="k"&gt;SLAVE&lt;/span&gt; &lt;span class="k"&gt;STATUS&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Slave_IO_Running and Slave_SQL_Running must be set to &lt;strong&gt;Yes&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="slave-4"&gt;
&lt;h2&gt;Slave 4&lt;/h2&gt;
&lt;p&gt;Open your MySQL config file, under [mysqld] put the following&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[mysql]&lt;/span&gt;
&lt;span class="na"&gt;server-id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;4&lt;/span&gt;

&lt;span class="na"&gt;master-host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;10.1.1.2&lt;/span&gt;
&lt;span class="na"&gt;master-user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;replication&lt;/span&gt;
&lt;span class="na"&gt;master-password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;password&lt;/span&gt;
&lt;span class="na"&gt;master-port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;3306&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Save and restart MySQL.&lt;/p&gt;
&lt;p&gt;Open a MySQL prompt and run the following queries&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;START&lt;/span&gt; &lt;span class="k"&gt;SLAVE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;SHOW&lt;/span&gt; &lt;span class="k"&gt;SLAVE&lt;/span&gt; &lt;span class="k"&gt;STATUS&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Slave_IO_Running and Slave_SQL_Running must be set to &lt;strong&gt;Yes&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="tutorials"></category><category term="mysql"></category><category term="replication"></category></entry><entry><title>Find and replace across multiple files</title><link href="https://kura.gg/2010/08/13/find-and-replace-across-multiple-files/" rel="alternate"></link><published>2010-08-13T19:19:00+01:00</published><updated>2010-08-13T19:19:00+01:00</updated><author><name>kura</name></author><id>tag:kura.gg,2010-08-13:/2010/08/13/find-and-replace-across-multiple-files/</id><content type="html">&lt;p&gt;I needed to quickly modify 500 hundred &lt;span class="caps"&gt;XML&lt;/span&gt; files, each was about &lt;span class="caps"&gt;10MB&lt;/span&gt; in
size, thankfully Linux makes that pretty fast and very easy.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find . -name &lt;span class="s2"&gt;"*.xml"&lt;/span&gt; -print &lt;span class="p"&gt;|&lt;/span&gt; xargs sed -i &lt;span class="s1"&gt;'s/FROM/TO/g'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A semi “real world” example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find . -name &lt;span class="s2"&gt;"*.xml"&lt;/span&gt; -print &lt;span class="p"&gt;|&lt;/span&gt; xargs sed -i &lt;span class="s1"&gt;'s/foo/bar/g'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</content><category term="tutorials"></category><category term="find"></category><category term="sed"></category><category term="xargs"></category></entry><entry><title>Adding swap while the server is online with Debian and VMWare ESX</title><link href="https://kura.gg/2010/07/07/adding-swap-while-the-server-is-online-with-debian-and-vmware-esx/" rel="alternate"></link><published>2010-07-07T18:56:00+01:00</published><updated>2010-07-07T18:56:00+01:00</updated><author><name>kura</name></author><id>tag:kura.gg,2010-07-07:/2010/07/07/adding-swap-while-the-server-is-online-with-debian-and-vmware-esx/</id><summary type="html">
&lt;p&gt;Recently I had to install Oracle on a virtual machine but didn’t find
out until after I’d spun up of the machine that Oracle required at least
&lt;span class="caps"&gt;2GB&lt;/span&gt; of swap space, my machine did not have enough.&lt;/p&gt;
&lt;p&gt;Thankfully it’s quite simple to increase swap space, using VMWare &lt;span class="caps"&gt;ESX&lt;/span&gt;,
simple add a new drive to the machine as you normally would, I used &lt;span class="caps"&gt;5GB&lt;/span&gt;.&lt;/p&gt;
&lt;div class="section" id="detecting-the-new-scsi-drive-and-partitioning-it"&gt;
&lt;h2&gt;Detecting the new &lt;span class="caps"&gt;SCSI&lt;/span&gt; drive and partitioning it&lt;/h2&gt;
&lt;p&gt;This bit is simple, I’m going to assume you’re logged in as root.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"- - -"&lt;/span&gt; &amp;gt; /sys/class/scsi_host/**host0**/scan &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; fdisk -l
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If host0 doesn’t work, try changing to host1, host2 etc.&lt;/p&gt;
&lt;p&gt;Now we need to format the drive, for me it was /dev/sdb.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo cfdisk /dev/sdb
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create a new logical partition, set it’s type to &lt;strong&gt;82 Linux Swap&lt;/strong&gt; and
simply write the changes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="adding-swap"&gt;
&lt;h2&gt;Adding swap&lt;/h2&gt;
&lt;p&gt;Next we simply …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
&lt;p&gt;Recently I had to install Oracle on a virtual machine but didn’t find
out until after I’d spun up of the machine that Oracle required at least
&lt;span class="caps"&gt;2GB&lt;/span&gt; of swap space, my machine did not have enough.&lt;/p&gt;
&lt;p&gt;Thankfully it’s quite simple to increase swap space, using VMWare &lt;span class="caps"&gt;ESX&lt;/span&gt;,
simple add a new drive to the machine as you normally would, I used &lt;span class="caps"&gt;5GB&lt;/span&gt;.&lt;/p&gt;
&lt;div class="section" id="detecting-the-new-scsi-drive-and-partitioning-it"&gt;
&lt;h2&gt;Detecting the new &lt;span class="caps"&gt;SCSI&lt;/span&gt; drive and partitioning it&lt;/h2&gt;
&lt;p&gt;This bit is simple, I’m going to assume you’re logged in as root.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"- - -"&lt;/span&gt; &amp;gt; /sys/class/scsi_host/**host0**/scan &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; fdisk -l
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If host0 doesn’t work, try changing to host1, host2 etc.&lt;/p&gt;
&lt;p&gt;Now we need to format the drive, for me it was /dev/sdb.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo cfdisk /dev/sdb
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create a new logical partition, set it’s type to &lt;strong&gt;82 Linux Swap&lt;/strong&gt; and
simply write the changes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="adding-swap"&gt;
&lt;h2&gt;Adding swap&lt;/h2&gt;
&lt;p&gt;Next we simply add the swap space to the machine and enable it, for me
it was /dev/sdb5&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo mkswap /dev/sdb5
sudo swapon /dev/sdb5
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add on reboot&lt;/p&gt;
&lt;p&gt;And now we simply need to be sure to add the swap when the machine
reboots. Open the following file:&lt;/p&gt;
&lt;blockquote&gt;
/etc/fstab&lt;/blockquote&gt;
&lt;p&gt;And add&lt;/p&gt;
&lt;pre class="literal-block"&gt;
/dev/sdb5 swap swap defaults 0 0
&lt;/pre&gt;
&lt;p&gt;Simple.&lt;/p&gt;
&lt;/div&gt;
</content><category term="tutorials"></category><category term="debian"></category><category term="swap"></category><category term="vmware"></category></entry><entry><title>Trigger command on filesystem changes with inotify + incron</title><link href="https://kura.gg/2010/07/03/trigger-command-on-filesystem-changes-with-inotify-incron/" rel="alternate"></link><published>2010-07-03T15:26:00+01:00</published><updated>2010-07-03T15:26:00+01:00</updated><author><name>kura</name></author><id>tag:kura.gg,2010-07-03:/2010/07/03/trigger-command-on-filesystem-changes-with-inotify-incron/</id><summary type="html">
&lt;p&gt;During a seemingly normal work day a colleague pointed out a problem to
me and asked if I had any solution.&lt;/p&gt;
&lt;p&gt;The problem was that they were trying to use InfoBright
(&lt;a class="reference external" href="https://www.infobright.com/"&gt;https://www.infobright.com/&lt;/a&gt;) for some data crunching, export the data
to &lt;span class="caps"&gt;CSV&lt;/span&gt; and then import in to MySQL. My first idea was to output the data
from InfoBright as &lt;span class="caps"&gt;SQL&lt;/span&gt; and pipe it directly in to MySQL, this turned out
to not be possible as the version of &lt;span class="caps"&gt;IB&lt;/span&gt; they were using only supported
output as &lt;span class="caps"&gt;CSV&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;This in itself wasn’t a problem, the problem lay with the fact that &lt;span class="caps"&gt;IB&lt;/span&gt;
would only output the file with 0660 permissions, and although both &lt;span class="caps"&gt;IB&lt;/span&gt;
and MySQL ran as user mysql and group mysql, MySQL itself flat out
refused to import the &lt;span class="caps"&gt;CSV&lt;/span&gt; file unless it was world readable (0664),
which was slightly annoying.&lt;/p&gt;
&lt;p&gt;If the &lt;span class="caps"&gt;CSV&lt;/span&gt; didn’t …&lt;/p&gt;</summary><content type="html">
&lt;p&gt;During a seemingly normal work day a colleague pointed out a problem to
me and asked if I had any solution.&lt;/p&gt;
&lt;p&gt;The problem was that they were trying to use InfoBright
(&lt;a class="reference external" href="https://www.infobright.com/"&gt;https://www.infobright.com/&lt;/a&gt;) for some data crunching, export the data
to &lt;span class="caps"&gt;CSV&lt;/span&gt; and then import in to MySQL. My first idea was to output the data
from InfoBright as &lt;span class="caps"&gt;SQL&lt;/span&gt; and pipe it directly in to MySQL, this turned out
to not be possible as the version of &lt;span class="caps"&gt;IB&lt;/span&gt; they were using only supported
output as &lt;span class="caps"&gt;CSV&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;This in itself wasn’t a problem, the problem lay with the fact that &lt;span class="caps"&gt;IB&lt;/span&gt;
would only output the file with 0660 permissions, and although both &lt;span class="caps"&gt;IB&lt;/span&gt;
and MySQL ran as user mysql and group mysql, MySQL itself flat out
refused to import the &lt;span class="caps"&gt;CSV&lt;/span&gt; file unless it was world readable (0664),
which was slightly annoying.&lt;/p&gt;
&lt;p&gt;If the &lt;span class="caps"&gt;CSV&lt;/span&gt; didn’t need to be instantly imported in to MySQL as soon as
it was generated then we could’ve just used &lt;span class="caps"&gt;CRON&lt;/span&gt; to change the file
permissions, but also this would’ve meant remembering which files needed
to be imported.&lt;/p&gt;
&lt;p&gt;So the answer lay in &lt;strong&gt;inotify&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I could’ve written some C or Python to interface with inotify but I am
lazy, so I decided to just use incron.&lt;/p&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install inotify incron
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="configuration"&gt;
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;Once installed we need to modify /etc/incron.allow to set which users
can actually use incron.&lt;/p&gt;
&lt;p&gt;I just choose the root user.&lt;/p&gt;
&lt;blockquote&gt;
/etc/incron.allow&lt;/blockquote&gt;
&lt;p&gt;Put the following in:&lt;/p&gt;
&lt;blockquote&gt;
root&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="using-incron"&gt;
&lt;h2&gt;Using incron&lt;/h2&gt;
&lt;p&gt;Now that root can actually set up incron tasks, as root you can use
incrontab just like you do crontab&lt;/p&gt;
&lt;div class="section" id="listing-incron-tasks"&gt;
&lt;h3&gt;Listing incron tasks&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;incrontab -l
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="adding-editing-tasks"&gt;
&lt;h3&gt;Adding/editing tasks&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;incrontab -e
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="delete-all-tasks"&gt;
&lt;h3&gt;Delete all tasks&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;incrontab -r
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All incron tasks must be in the following format&lt;/p&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;path&amp;gt; &amp;lt;mask&amp;gt; &amp;lt;command&amp;gt;
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="masks"&gt;
&lt;h3&gt;Masks&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;IN_ACCESS&lt;/strong&gt; - File was accessed (read) (*)
&lt;strong&gt;IN_ATTRIB&lt;/strong&gt; - Metadata changed (permissions, timestamps, extended attributes, etc.) (*)
&lt;strong&gt;IN_CLOSE_WRITE&lt;/strong&gt; - File opened for writing was closed (*)
&lt;strong&gt;IN_CLOSE_NOWRITE&lt;/strong&gt; - File not opened for writing was closed (*)
&lt;strong&gt;IN_CLOSE&lt;/strong&gt; - Covers IN_CLOSE_WRITE and IN_CLOSE_NOWRITE
&lt;strong&gt;IN_CREATE&lt;/strong&gt; - File/directory created in watched directory (*)
&lt;strong&gt;IN_DELETE&lt;/strong&gt; - File/directory deleted from watched directory (*)
&lt;strong&gt;IN_DELETE_SELF&lt;/strong&gt; - Watched file/directory was itself deleted
&lt;strong&gt;IN_MODIFY&lt;/strong&gt; - File was modified (*)
&lt;strong&gt;IN_MOVE_SELF&lt;/strong&gt; - Watched file/directory was itself moved
&lt;strong&gt;IN_MOVED_FROM&lt;/strong&gt; - File moved out of watched directory (*)
&lt;strong&gt;IN_MOVED_TO&lt;/strong&gt; - File moved into watched directory (*)
&lt;strong&gt;IN_MOVE&lt;/strong&gt; - Covers IN_MOVED_FROM and IN_MOVED_TO
&lt;strong&gt;IN_OPEN&lt;/strong&gt; - File was opened (*)
&lt;strong&gt;IN_ALL_EVENTS&lt;/strong&gt; - All of the above&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IN_DONT_FOLLOW&lt;/strong&gt; - Don’t dereference pathname if it is a symbolic link
&lt;strong&gt;IN_ONESHOT&lt;/strong&gt; - Monitor pathname for only one event
&lt;strong&gt;IN_ONLYDIR&lt;/strong&gt; - Only watch pathname if it is a directory&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;When monitoring a directory, the masks marked with an asterisk (&lt;/em&gt;)
above can occur for files in the directory, in which case the name field
in the returned event data identifies the name of the file within the directory.*&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="command"&gt;
&lt;h3&gt;Command&lt;/h3&gt;
&lt;p&gt;Commands can be any system commands that the user has permissions to
use, but incron also has some symbols that can be accessed to use within
the commands.&lt;/p&gt;
&lt;blockquote&gt;
&lt;strong&gt;$$&lt;/strong&gt; - Dollar sign
&lt;strong&gt;$@&lt;/strong&gt; - Watched filesystem path
&lt;strong&gt;$#&lt;/strong&gt; - Event-related file name
&lt;strong&gt;$%&lt;/strong&gt; - Event flags (textually)
&lt;strong&gt;$&amp;amp;&lt;/strong&gt; - Event flags (numerically)&lt;/blockquote&gt;
&lt;p&gt;A simple way of testing incron would be to add a basic task on the root
users home directory.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
/root/ IN_CREATE echo "$@$# $% $&amp;amp;"
&lt;/pre&gt;
&lt;p&gt;Open up a second root shell on the system and tail syslog&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo tail -f /var/log/syslog
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And simply create a random file on the system in /root/&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;test-incron
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You should see the following appear within syslog:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Jul 03 15:19:26 eurus incrond[5049]: (root) CMD (echo "/tmp/test-incron IN_CREATE 256")
&lt;/pre&gt;
&lt;p&gt;Success, you now have incron working.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="how-i-used-it"&gt;
&lt;h2&gt;How I used it&lt;/h2&gt;
&lt;p&gt;For me it meant I could set up one simple task to modify file access&lt;/p&gt;
&lt;pre class="literal-block"&gt;
/tmp/mysql-ib-exports/ IN_CREATE /bin/chmod 0664 $@$#
&lt;/pre&gt;
&lt;p&gt;This will instantly change permissions on created files to 0664,
allowing the &lt;span class="caps"&gt;CSV&lt;/span&gt; to be loaded directly in to MySQL.&lt;/p&gt;
&lt;/div&gt;
</content><category term="tutorials"></category><category term="incron"></category><category term="infobright"></category><category term="inotify"></category><category term="mysql"></category></entry><entry><title>Using dpkg selections to backup and install packages</title><link href="https://kura.gg/2010/07/02/using-dpkg-selections-to-backup-and-install-packages/" rel="alternate"></link><published>2010-07-02T18:32:00+01:00</published><updated>2010-07-02T18:32:00+01:00</updated><author><name>kura</name></author><id>tag:kura.gg,2010-07-02:/2010/07/02/using-dpkg-selections-to-backup-and-install-packages/</id><summary type="html">
&lt;p&gt;Sometimes you want to be able to install packages on another machine
without the hassle of a long apt-get install command or having to write
down every single package you’ve installed.&lt;/p&gt;
&lt;p&gt;Luckily Debian has the wonderful dpkg which has 2 methods for generating
a list of installed packages and another for importing a list.&lt;/p&gt;
&lt;div class="section" id="generating-a-list-of-installed-packages"&gt;
&lt;h2&gt;Generating a list of installed packages&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo dpkg --get-selections &amp;gt; selections
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will generate a file called &lt;em&gt;selections&lt;/em&gt; which will contain
something like&lt;/p&gt;
&lt;pre class="literal-block"&gt;
... snip ...
adduser install
apache2 install
apache2-mpm-prefork install
apache2-utils install
apache2.2-bin install
apache2.2-common install
apt install
... snip...
&lt;/pre&gt;
&lt;p&gt;This is just a simple, plain text file so can be copied between servers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="installing-packages-from-an-exported-list"&gt;
&lt;h2&gt;Installing packages from an exported list&lt;/h2&gt;
&lt;p&gt;This is almost just as easy, first we need to actually set the list of
selected packages&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo dpkg --set-selections &amp;lt; selections
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we need to actually do an update and install&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo …&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">
&lt;p&gt;Sometimes you want to be able to install packages on another machine
without the hassle of a long apt-get install command or having to write
down every single package you’ve installed.&lt;/p&gt;
&lt;p&gt;Luckily Debian has the wonderful dpkg which has 2 methods for generating
a list of installed packages and another for importing a list.&lt;/p&gt;
&lt;div class="section" id="generating-a-list-of-installed-packages"&gt;
&lt;h2&gt;Generating a list of installed packages&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo dpkg --get-selections &amp;gt; selections
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will generate a file called &lt;em&gt;selections&lt;/em&gt; which will contain
something like&lt;/p&gt;
&lt;pre class="literal-block"&gt;
... snip ...
adduser install
apache2 install
apache2-mpm-prefork install
apache2-utils install
apache2.2-bin install
apache2.2-common install
apt install
... snip...
&lt;/pre&gt;
&lt;p&gt;This is just a simple, plain text file so can be copied between servers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="installing-packages-from-an-exported-list"&gt;
&lt;h2&gt;Installing packages from an exported list&lt;/h2&gt;
&lt;p&gt;This is almost just as easy, first we need to actually set the list of
selected packages&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo dpkg --set-selections &amp;lt; selections
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then we need to actually do an update and install&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get update &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt-get -u dselect-upgrade
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This last command will update your apt cache and then install all of the
selected packages.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Please note that version numbers are **not*&lt;/em&gt; remembered so you will
install the latest version of each package.*&lt;/p&gt;
&lt;/div&gt;
</content><category term="tutorials"></category><category term="apt"></category><category term="backup"></category><category term="dpkg"></category><category term="packages"></category></entry><entry><title>New syslog.tv nginx wordpress site configuration explained</title><link href="https://kura.gg/2010/04/18/new-syslog-tv-nginx-wordpress-site-configuration/" rel="alternate"></link><published>2010-04-18T12:51:00+01:00</published><updated>2010-04-18T12:51:00+01:00</updated><author><name>kura</name></author><id>tag:kura.gg,2010-04-18:/2010/04/18/new-syslog-tv-nginx-wordpress-site-configuration/</id><summary type="html">
&lt;div class="section" id="configuration-changes"&gt;
&lt;h2&gt;Configuration changes&lt;/h2&gt;
&lt;p&gt;I made some modifications to my nginx configuration this weekend to
improve performance and clear up some bugs.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;upstream&lt;/span&gt; &lt;span class="s"&gt;backend&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="n"&gt;127.0.0.1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;81&lt;/span&gt; &lt;span class="s"&gt;fail_timeout=120s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;syslog.tv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;access_log&lt;/span&gt; &lt;span class="s"&gt;/var/log/nginx/access.syslog.tv.log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;gzip&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;gzip_disable&lt;/span&gt; &lt;span class="s"&gt;msie6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;gzip_static&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;gzip_comp_level&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;gzip_proxied&lt;/span&gt; &lt;span class="s"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;gzip_types&lt;/span&gt; &lt;span class="s"&gt;text/plain&lt;/span&gt; &lt;span class="s"&gt;text/css&lt;/span&gt; &lt;span class="s"&gt;application/x-javascript&lt;/span&gt; &lt;span class="s"&gt;text/xml&lt;/span&gt;
    &lt;span class="s"&gt;application/xml&lt;/span&gt; &lt;span class="s"&gt;application/xml+rss&lt;/span&gt; &lt;span class="s"&gt;text/javascript&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="s"&gt;/var/www/syslog.tv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="kn"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$wordpress_logged_in&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$comment_author_email&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$comment_author&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="kn"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$http_cookie&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt;&lt;span class="sr"&gt;*&lt;/span&gt; &lt;span class="s"&gt;"wordpress_logged_in_[^=]*=([^%]+)%7C")&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
             &lt;span class="kn"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$wordpress_logged_in&lt;/span&gt; &lt;span class="s"&gt;wordpress_logged_in_&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="kn"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$http_cookie&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt;&lt;span class="sr"&gt;*&lt;/span&gt; &lt;span class="s"&gt;"comment_author_email_[^=]*=([^&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="kn"&gt;]+)(&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="kn"&gt;|$)")&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kn"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$comment_author_email&lt;/span&gt; &lt;span class="s"&gt;comment_author_email_&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="kn"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$http_cookie&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt;&lt;span class="sr"&gt;*&lt;/span&gt; &lt;span class="s"&gt;"comment_author_[^=]*=([^&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="kn"&gt;]+)(&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="kn"&gt;|$)")&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kn"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$comment_author&lt;/span&gt; &lt;span class="s"&gt;comment_author_&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="kn"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$my_cache_key&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$scheme://$host$uri$is_args$args$wordpress_logged_in$comment …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">
&lt;div class="section" id="configuration-changes"&gt;
&lt;h2&gt;Configuration changes&lt;/h2&gt;
&lt;p&gt;I made some modifications to my nginx configuration this weekend to
improve performance and clear up some bugs.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;upstream&lt;/span&gt; &lt;span class="s"&gt;backend&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="n"&gt;127.0.0.1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;81&lt;/span&gt; &lt;span class="s"&gt;fail_timeout=120s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;syslog.tv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;access_log&lt;/span&gt; &lt;span class="s"&gt;/var/log/nginx/access.syslog.tv.log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;gzip&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;gzip_disable&lt;/span&gt; &lt;span class="s"&gt;msie6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;gzip_static&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;gzip_comp_level&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;gzip_proxied&lt;/span&gt; &lt;span class="s"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;gzip_types&lt;/span&gt; &lt;span class="s"&gt;text/plain&lt;/span&gt; &lt;span class="s"&gt;text/css&lt;/span&gt; &lt;span class="s"&gt;application/x-javascript&lt;/span&gt; &lt;span class="s"&gt;text/xml&lt;/span&gt;
    &lt;span class="s"&gt;application/xml&lt;/span&gt; &lt;span class="s"&gt;application/xml+rss&lt;/span&gt; &lt;span class="s"&gt;text/javascript&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

   &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="s"&gt;/var/www/syslog.tv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="kn"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$wordpress_logged_in&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$comment_author_email&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$comment_author&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="kn"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$http_cookie&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt;&lt;span class="sr"&gt;*&lt;/span&gt; &lt;span class="s"&gt;"wordpress_logged_in_[^=]*=([^%]+)%7C")&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
             &lt;span class="kn"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$wordpress_logged_in&lt;/span&gt; &lt;span class="s"&gt;wordpress_logged_in_&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="kn"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$http_cookie&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt;&lt;span class="sr"&gt;*&lt;/span&gt; &lt;span class="s"&gt;"comment_author_email_[^=]*=([^&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="kn"&gt;]+)(&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="kn"&gt;|$)")&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kn"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$comment_author_email&lt;/span&gt; &lt;span class="s"&gt;comment_author_email_&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="kn"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$http_cookie&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt;&lt;span class="sr"&gt;*&lt;/span&gt; &lt;span class="s"&gt;"comment_author_[^=]*=([^&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="kn"&gt;]+)(&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="kn"&gt;|$)")&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kn"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$comment_author&lt;/span&gt; &lt;span class="s"&gt;comment_author_&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="kn"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$my_cache_key&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$scheme://$host$uri$is_args$args$wordpress_logged_in$comment_author_email$comment_author"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="kn"&gt;client_max_body_size&lt;/span&gt; &lt;span class="mi"&gt;8m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="kn"&gt;proxy_redirect&lt;/span&gt; &lt;span class="no"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;Host&lt;/span&gt; &lt;span class="nv"&gt;$host&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;X-Real-IP&lt;/span&gt; &lt;span class="nv"&gt;$remote_addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;X-Forwarded-For&lt;/span&gt; &lt;span class="nv"&gt;$proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_pass_header&lt;/span&gt; &lt;span class="s"&gt;Set-Cookie&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_cache&lt;/span&gt; &lt;span class="s"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_cache_key&lt;/span&gt; &lt;span class="nv"&gt;$my_cache_key&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_cache_valid&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="mi"&gt;302&lt;/span&gt; &lt;span class="mi"&gt;60m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_cache_valid&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt; &lt;span class="mi"&gt;1m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;https://backend&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt;&lt;span class="sr"&gt;*&lt;/span&gt; &lt;span class="s"&gt;.(jpg|png|gif|jpeg|js|css|mp3|wav|swf|mov|doc|pdf|xls|ppt|docx|pptx|xlsx)&lt;/span&gt;$ &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="s"&gt;/var/www/syslog.tv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sadly Wordpress messes up the config when displayed like that so you can
view the proper version &lt;a class="reference external" href="/satic/files/syslog-nginx-config-18-apr-2010"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="explanation"&gt;
&lt;h2&gt;Explanation&lt;/h2&gt;
&lt;p&gt;It’d be a good idea to actually explain what the configuration is doing
and why it’s configured that way, I’ll do this “chunk-by-chunk”.&lt;/p&gt;
&lt;div class="section" id="upstream"&gt;
&lt;h3&gt;upstream&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;upstream&lt;/span&gt; &lt;span class="s"&gt;backend&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="n"&gt;127.0.0.1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;81&lt;/span&gt; &lt;span class="s"&gt;fail_timeout=120s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This one is relatively simple, it basically configures an upstream proxy
to 127.0.0.1 on port 81, fail_timeout controls how long nginx will try
talking to that server before giving up.&lt;/p&gt;
&lt;p&gt;I’ll assume you understand the basic listen, server_name and
access_log parameters in the first section of the server definition.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="gzip"&gt;
&lt;h3&gt;gzip&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;gzip&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;gzip_disable&lt;/span&gt; &lt;span class="s"&gt;msie6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;gzip_static&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;gzip_comp_level&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;gzip_proxied&lt;/span&gt; &lt;span class="s"&gt;any&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;gzip_types&lt;/span&gt; &lt;span class="s"&gt;text/plain&lt;/span&gt; &lt;span class="s"&gt;text/css&lt;/span&gt; &lt;span class="s"&gt;application/x-javascript&lt;/span&gt; &lt;span class="s"&gt;text/xml&lt;/span&gt;
&lt;span class="s"&gt;application/xml&lt;/span&gt; &lt;span class="s"&gt;application/xml+rss&lt;/span&gt; &lt;span class="s"&gt;text/javascript&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Again, this one is rather simple. We enabled &lt;span class="caps"&gt;GZIP&lt;/span&gt;, disable it for anyone
still using &lt;span class="caps"&gt;IE6&lt;/span&gt;, we explicitly enable &lt;span class="caps"&gt;GZIP&lt;/span&gt; compression of static files,
set the compression level to 9 which is the highest level but also uses
the most resource, tell &lt;span class="caps"&gt;GZIP&lt;/span&gt; to compress any proxied data and then set
the mimetypes which &lt;span class="caps"&gt;GZIP&lt;/span&gt; is allowed to compress.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="location"&gt;
&lt;h3&gt;location&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;root&lt;/span&gt; &lt;span class="s"&gt;/var/www/syslog.tv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$wordpress_logged_in&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$comment_author_email&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$comment_author&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$http_cookie&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt;&lt;span class="sr"&gt;*&lt;/span&gt; &lt;span class="s"&gt;"wordpress_logged_in_[^=]*=([^%]+)%7C")&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$wordpress_logged_in&lt;/span&gt; &lt;span class="s"&gt;wordpress_logged_in_&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$http_cookie&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt;&lt;span class="sr"&gt;*&lt;/span&gt; &lt;span class="s"&gt;"comment_author_email_[^=]*=([^&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;]+)(&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;|$)")&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$comment_author_email&lt;/span&gt; &lt;span class="s"&gt;comment_author_email_&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$http_cookie&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt;&lt;span class="sr"&gt;*&lt;/span&gt; &lt;span class="s"&gt;"comment_author_[^=]*=([^&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;]+)(&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="k"&gt;|$)")&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$comment_author&lt;/span&gt; &lt;span class="s"&gt;comment_author_&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is a rather large chunk but is very simple once you understand it.
I’m setting up my document root, then setting some basic variables for
“” so that I can overwrite them further down. This is actually by the
following set of three if statements. I check for three different &lt;span class="caps"&gt;HTTP&lt;/span&gt;
cookies and then set the relevant variable to the correct value if it
exists, this is later used in the cache key to make sure each user has
their own private cache if they have certain cookies.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="my-cache-key"&gt;
&lt;h3&gt;$my_cache_key&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$my_cache_key&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$scheme://$host$uri$is_args$args$wordpress_logged_in$comment_author_email$comment_author"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This sets up a variable called $my_cache_key which contains the
current scheme (&lt;span class="caps"&gt;HTTP&lt;/span&gt; or &lt;span class="caps"&gt;HTTPS&lt;/span&gt;), host (syslog.tv), uri, various arguments
and then finally sets the variables from the previous block from the
cookie checks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="proxy-time"&gt;
&lt;h3&gt;Proxy time!&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;client_max_body_size&lt;/span&gt; &lt;span class="mi"&gt;8m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;proxy_redirect&lt;/span&gt; &lt;span class="no"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;Host&lt;/span&gt; &lt;span class="nv"&gt;$host&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;X-Real-IP&lt;/span&gt; &lt;span class="nv"&gt;$remote_addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;X-Forwarded-For&lt;/span&gt; &lt;span class="nv"&gt;$proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;proxy_pass_header&lt;/span&gt; &lt;span class="s"&gt;Set-Cookie&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;proxy_cache&lt;/span&gt; &lt;span class="s"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;proxy_cache_key&lt;/span&gt; &lt;span class="nv"&gt;$my_cache_key&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;proxy_cache_valid&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="mi"&gt;302&lt;/span&gt; &lt;span class="mi"&gt;60m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;proxy_cache_valid&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt; &lt;span class="mi"&gt;1m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;https://backend&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here I am setting the maximum size of the client body content to &lt;span class="caps"&gt;8MB&lt;/span&gt;,
disabling proxy redirects, passing through some basic headers to the
backend which allows my backend system to see which host the user is
trying to access, their real &lt;span class="caps"&gt;IP&lt;/span&gt; address rather than the &lt;span class="caps"&gt;IP&lt;/span&gt; of the nginx
server and x-Forwarded-For also contains the users &lt;span class="caps"&gt;IP&lt;/span&gt; address, it’s
basically standard when proxying.&lt;/p&gt;
&lt;p&gt;Next I pass Set-Cookie headers back to the backend, tell it to use a
cache definition called “cache” which I set up in a &lt;a class="reference external" href="/2010/02/14/more-nginx-proxy_cache-optimizations-and-nginx-load-balancing/"&gt;previous blog
post&lt;/a&gt;. I set the proxy_cache_key to use the variable defined earlier
contains all of the users cookie information in it’s key to make it a
private cache.&lt;/p&gt;
&lt;p&gt;I then pass through some basic validation rules that set &lt;span class="caps"&gt;HTTP&lt;/span&gt; 200 and
302 responses to cache for 60 minutes and 404 responses to cache for 1
minute, then I simply pass back to the backend system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="static-location-block"&gt;
&lt;h3&gt;Static location block&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt;&lt;span class="sr"&gt;*&lt;/span&gt; &lt;span class="s"&gt;.(jpg|png|gif|jpeg|js|css|mp3|wav|swf|mov|doc|pdf|xls|ppt|docx|pptx|xlsx)&lt;/span&gt;$ &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="s"&gt;/var/www/syslog.tv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This one could look a little scary but is actually really simple. I do a
location check again some defined extensions, if it matches then it will
simply serve these up from nginx rather than reverse proxy.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="in-layman-s-terms"&gt;
&lt;h2&gt;In layman’s terms&lt;/h2&gt;
&lt;p&gt;Although possibly daunting it really is quite simple, I am configuring
nginx to reverse proxy back to Apache on port 81, setting up some &lt;span class="caps"&gt;GZIP&lt;/span&gt;
compression rules to decrease the size of static files, checking to see
if a user has a WordPress cookie and giving them a private cache if they
do, serving dynamic (&lt;span class="caps"&gt;PHP&lt;/span&gt;) content via the reverse proxy to Apache if no
cache exists, serving cached content from nginx and also serving static
content from nginx.&lt;/p&gt;
&lt;p&gt;This basically means that Apache is used very sparingly and nginx is
doing what it does best, serving static/cached content.&lt;/p&gt;
&lt;/div&gt;
</content><category term="tutorials"></category><category term="apache"></category><category term="cache"></category><category term="nginx"></category><category term="proxy"></category><category term="proxy_cache"></category><category term="wordpress"></category></entry><entry><title>Convert PEM &amp; Key to a single PKCS#12 file</title><link href="https://kura.gg/2010/04/13/convert-pem-key-to-a-single-pkcs12-file/" rel="alternate"></link><published>2010-04-13T19:19:00+01:00</published><updated>2010-04-13T19:19:00+01:00</updated><author><name>kura</name></author><id>tag:kura.gg,2010-04-13:/2010/04/13/convert-pem-key-to-a-single-pkcs12-file/</id><content type="html">&lt;p&gt;Sometimes keeping multiple copies of keys, certificates and root
certificates can be a real annoyance, thankfully it’s quite simple to
convert them in to a single &lt;span class="caps"&gt;PKCS&lt;/span&gt;#12 file with the following command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;openssl pkcs12 -export -out certificate.pkcs -in certificate.crt -inkey private.key -certfile rootcert.crt -name &lt;span class="s2"&gt;"PKCS#12 Certificate Bundle"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will create a file called &lt;strong&gt;certificate.pkcs&lt;/strong&gt; which will contain
the contents of the &lt;strong&gt;certificate.crt&lt;/strong&gt;, &lt;strong&gt;private.key&lt;/strong&gt; and your root
certificate &lt;strong&gt;rootcert.crt&lt;/strong&gt;, it will also have an internal reference to
it’s name &lt;strong&gt;&lt;span class="caps"&gt;PKCS&lt;/span&gt;#12 Certificate Bundle&lt;/strong&gt; to make it easier to inspect
the certificate to find what it should contain, usually you’d set this
to something more useful.&lt;/p&gt;
</content><category term="tutorials"></category><category term="crt"></category><category term="openssl"></category><category term="pem"></category><category term="pkcs12"></category><category term="ssl"></category></entry><entry><title>Building nginx on Red Hat and Debian to RPM/DEB-style locations</title><link href="https://kura.gg/2010/04/02/building-nginx-on-red-hat-and-debian-to-rpmdeb-style-locations/" rel="alternate"></link><published>2010-04-02T16:54:00+01:00</published><updated>2010-04-02T16:54:00+01:00</updated><author><name>kura</name></author><id>tag:kura.gg,2010-04-02:/2010/04/02/building-nginx-on-red-hat-and-debian-to-rpmdeb-style-locations/</id><summary type="html">
&lt;p&gt;The title of this post is a bit stupid, but I honestly couldn’t think of
any other way to write it…&lt;/p&gt;
&lt;p&gt;When compiling nginx by hand, by default make install will push the
binaries out to /usr/local/nginx and it doesn’t come with a start/stop
script, understandably because it doesn’t know which &lt;span class="caps"&gt;OS&lt;/span&gt; it is going to
be installed on etc etc.&lt;/p&gt;
&lt;p&gt;Recently I was tasked with building nginx to an old Red Hat Enterprise
Live 4 server with no yum installation, no nginx package in up2date and
not being able to find an &lt;span class="caps"&gt;RPM&lt;/span&gt; that’s link wasn’t dead.&lt;/p&gt;
&lt;p&gt;I’ve always felt that, being a Debian user, people think of me as only
being able to use apt-get and if I’m feeling especially adventurous dpkg
- to install applications. Some people know that I build .deb files in
my spare time, but …&lt;/p&gt;</summary><content type="html">
&lt;p&gt;The title of this post is a bit stupid, but I honestly couldn’t think of
any other way to write it…&lt;/p&gt;
&lt;p&gt;When compiling nginx by hand, by default make install will push the
binaries out to /usr/local/nginx and it doesn’t come with a start/stop
script, understandably because it doesn’t know which &lt;span class="caps"&gt;OS&lt;/span&gt; it is going to
be installed on etc etc.&lt;/p&gt;
&lt;p&gt;Recently I was tasked with building nginx to an old Red Hat Enterprise
Live 4 server with no yum installation, no nginx package in up2date and
not being able to find an &lt;span class="caps"&gt;RPM&lt;/span&gt; that’s link wasn’t dead.&lt;/p&gt;
&lt;p&gt;I’ve always felt that, being a Debian user, people think of me as only
being able to use apt-get and if I’m feeling especially adventurous dpkg
- to install applications. Some people know that I build .deb files in
my spare time, but most don’t and for some weird reason I still feel
they think that about me. Paranoia?&lt;/p&gt;
&lt;p&gt;Anyway, I decided to do it the old fashioned way and build nginx from
source on the &lt;span class="caps"&gt;RHEL4&lt;/span&gt; box, simple tasks if you know how to do it correctly.&lt;/p&gt;
&lt;div class="section" id="brief-introduction-of-what-s-to-come"&gt;
&lt;h2&gt;Brief introduction of what’s to come&lt;/h2&gt;
&lt;p&gt;In this article I will explain the build process, options I pass to
configure and also provide a start/stop script for &lt;span class="caps"&gt;RHEL4&lt;/span&gt;, 5 and Debian.&lt;/p&gt;
&lt;p&gt;The build process can be found on the nginx wiki and is a very simple
thing, but I passed some different arguments to do the follow;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Install all modules that I wanted&lt;/li&gt;
&lt;li&gt;Build to /usr/bin, store config files in /etc/nginx, add
sites-available, sites-enabled folders and logs to /var/log/nginx&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I’m going to assume you have the latest 0.7.X or even 0.8.X source
already downloaded, untarred and also have gcc and all other required
build modules installed.&lt;/p&gt;
&lt;p&gt;You’ll need to be in your source directory to execute the following commands.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;First we will add a www-data user and group to run as. You may already
have this set up for you if you’ve already installed Apache or nginx
from yum or apt in the past.&lt;/p&gt;
&lt;p&gt;To check to see if you already have a www-data user run the following
command as root.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;grep www-data /etc/passwd
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You should see the following output, the at signs (@) represent a number.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
www-data:x:@@:@@:www-data:/var/www:/bin/sh
&lt;/pre&gt;
&lt;p&gt;If you don’t see this user then we will need to create it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo useradd -d /var/www -m -U www-data
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The -d argument sets the user’s home directory to /var/www, -m creates
the home directory if it does not exist and -U will create a group with
the same name as the user.&lt;/p&gt;
&lt;p&gt;I install nginx with both &lt;span class="caps"&gt;SSL&lt;/span&gt; and rewrite enabled, both of these modules
require some extra modules install on your system.&lt;/p&gt;
&lt;div class="section" id="ssl"&gt;
&lt;h3&gt;&lt;span class="caps"&gt;SSL&lt;/span&gt;&lt;/h3&gt;
&lt;div class="section" id="debian"&gt;
&lt;h4&gt;Debian&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install libssl-dev
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="redhat-yum"&gt;
&lt;h4&gt;RedHat (yum)&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo yum install libssl-dev
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you don’t have yum installed you will either need to find an &lt;span class="caps"&gt;RPM&lt;/span&gt; or
install openssl from source (&lt;a class="reference external" href="https://www.openssl.org/source/"&gt;https://www.openssl.org/source/&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="rewrite-module"&gt;
&lt;h3&gt;Rewrite module&lt;/h3&gt;
&lt;div class="section" id="debian-1"&gt;
&lt;h4&gt;Debian&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install libpcre3 libpcre3-dev
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="redhat-yum-1"&gt;
&lt;h4&gt;RedHat (yum)&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo yum install libpcre-dev
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or compile from source (&lt;a class="reference external" href="https://www.pcre.org/"&gt;https://www.pcre.org/&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="configuring"&gt;
&lt;h3&gt;Configuring&lt;/h3&gt;
&lt;p&gt;Next we will configure the source&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./configure --sbin-path&lt;span class="o"&gt;=&lt;/span&gt;/usr/bin/nginx &lt;span class="se"&gt;\&lt;/span&gt;
--conf-path&lt;span class="o"&gt;=&lt;/span&gt;/etc/nginx/nginx.conf &lt;span class="se"&gt;\&lt;/span&gt;
--pid-path&lt;span class="o"&gt;=&lt;/span&gt;/var/run/nginx.pid &lt;span class="se"&gt;\&lt;/span&gt;
--lock-path&lt;span class="o"&gt;=&lt;/span&gt;/var/lock/nginx.lock &lt;span class="se"&gt;\&lt;/span&gt;
--error-log-path&lt;span class="o"&gt;=&lt;/span&gt;/var/log/nginx/error.log &lt;span class="se"&gt;\&lt;/span&gt;
--http-log-path&lt;span class="o"&gt;=&lt;/span&gt;/var/log/nginx/access.log &lt;span class="se"&gt;\&lt;/span&gt;
--user&lt;span class="o"&gt;=&lt;/span&gt;www-data &lt;span class="se"&gt;\&lt;/span&gt;
--group&lt;span class="o"&gt;=&lt;/span&gt;www-data &lt;span class="se"&gt;\&lt;/span&gt;
--http-client-body-temp-path&lt;span class="o"&gt;=&lt;/span&gt;/var/lib/nginx/body &lt;span class="se"&gt;\&lt;/span&gt;
--http-proxy-temp-path&lt;span class="o"&gt;=&lt;/span&gt;/var/lib/nginx/proxy &lt;span class="se"&gt;\&lt;/span&gt;
--http-fastcgi-temp-path&lt;span class="o"&gt;=&lt;/span&gt;/var/lib/nginx/fastcgi &lt;span class="se"&gt;\&lt;/span&gt;
--with-http_ssl_module &lt;span class="se"&gt;\&lt;/span&gt;
--with-http_realip_module &lt;span class="se"&gt;\&lt;/span&gt;
--with-http_addition_module &lt;span class="se"&gt;\&lt;/span&gt;
--with-debug &lt;span class="se"&gt;\&lt;/span&gt;
--with-http_flv_module &lt;span class="se"&gt;\&lt;/span&gt;
--with-http_stub_status_module &lt;span class="se"&gt;\&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above command will configure nginx, setting the path to it’s binary
to /usr/bin/nginx, config file path to /etc/nginx/nginx.conf, pid to
/var/run/nginx.pid, lock file to /var/lock/nginx.lock, error and access
logs to /var/log/nginx, tell nginx to run as www-data with group
www-data, set it’s temp paths to /var/lib/nginx and enable the following
modules; ssl, realip, addition (used for adding content to the start and
end of pages), debug, flash video and status modules.&lt;/p&gt;
&lt;p&gt;If you didn’t want to install openssl or pcre then you will have to
compile without ssl and pcre. Remove —with-http_ssl_module from above
and disable the rewrite module.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;--without-http_rewrite_module
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="compiling"&gt;
&lt;h3&gt;Compiling&lt;/h3&gt;
&lt;p&gt;Once done, if you have no errors you can actually compile nginx.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make
sudo make install
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="nginx-configuration"&gt;
&lt;h2&gt;nginx configuration&lt;/h2&gt;
&lt;p&gt;Next we need to configure nginx to give it some nice configuration
options. First open up nginx’s main configuration file&lt;/p&gt;
&lt;blockquote&gt;
/etc/nginx/nginx.conf&lt;/blockquote&gt;
&lt;p&gt;Modify it to look like the one below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;user&lt;/span&gt; &lt;span class="s"&gt;www-data&lt;/span&gt; &lt;span class="s"&gt;www-data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;worker_processes&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;error_log&lt;/span&gt; &lt;span class="s"&gt;/var/log/nginx/error.log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;pid&lt;/span&gt; &lt;span class="s"&gt;/var/run/nginx.pid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="k"&gt;events&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;worker_connections&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;http&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;include&lt;/span&gt; &lt;span class="s"&gt;/etc/nginx/mime.types&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;access_log&lt;/span&gt; &lt;span class="s"&gt;/var/log/nginx/access.log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;sendfile&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;tcp_nopush&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;keepalive_timeout&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;tcp_nodelay&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;gzip&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;include&lt;/span&gt; &lt;span class="s"&gt;/etc/nginx/conf.d/*.conf&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;include&lt;/span&gt; &lt;span class="s"&gt;/etc/nginx/sites-enabled/*&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next we’ll create the sub directories for holding site and module configuation.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo mkdir /etc/nginx/sites-available
sudo mkdir /etc/nginx/sites-enabled
sudo mkdir /etc/nginx/conf.d
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next we’ll create the default server definition.&lt;/p&gt;
&lt;blockquote&gt;
/etc/nginx/sites-available/default&lt;/blockquote&gt;
&lt;p&gt;And put the following in it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;localhost&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;access_log&lt;/span&gt; &lt;span class="s"&gt;/var/log/nginx/localhost.access.log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="s"&gt;/var/www/&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;index&lt;/span&gt; &lt;span class="s"&gt;index.html&lt;/span&gt; &lt;span class="s"&gt;index.htm&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/nginx_status&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;stub_status&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;access_log&lt;/span&gt; &lt;span class="no"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;allow&lt;/span&gt; &lt;span class="mi"&gt;127&lt;/span&gt;&lt;span class="s"&gt;.0.0.1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;deny&lt;/span&gt; &lt;span class="s"&gt;all&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we symlink it in to the sites-enabled directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo ln -s /etc/nginx/sites-available/default /etc/nginx/sites-enabled
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="start-stop-scripts"&gt;
&lt;h2&gt;Start/stop scripts&lt;/h2&gt;
&lt;p&gt;Once installation is complete we need to install a start/stop script, to
simply make life easier.&lt;/p&gt;
&lt;p&gt;You can get the &lt;a class="reference external" href="/files/nginx-debian"&gt;Debian version from here&lt;/a&gt; or the &lt;a class="reference external" href="/files/nginx-redhat"&gt;RedHat version from
here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="starting-nginx"&gt;
&lt;h2&gt;Starting nginx&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/etc/init.d/nginx start
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Starting the service on boot&lt;/p&gt;
&lt;p&gt;Edit the following file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/etc/rc.local
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And add the following before the exit call.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/etc/init.d/nginx start
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="tutorials"></category><category term="debian"></category><category term="fedora"></category><category term="install"></category><category term="nginx"></category><category term="redhat"></category><category term="ubuntu"></category></entry><entry><title>Apache internal dummy connection</title><link href="https://kura.gg/2010/03/27/apache-internal-dummy-connection/" rel="alternate"></link><published>2010-03-27T19:29:00+00:00</published><updated>2010-03-27T19:29:00+00:00</updated><author><name>kura</name></author><id>tag:kura.gg,2010-03-27:/2010/03/27/apache-internal-dummy-connection/</id><summary type="html">&lt;p&gt;Recently I found that one of the servers I look after that runs a high
profile site was generating semi-high load at traffic peaks. You could
generally say that this would be understandable but the server was
shooting up to a load of around 10 for a few seconds and with that load
jump I was able to graph an increase of Apache processes on top of it.
Again though, this would generally be considered normal, but knowing how
well the server performs and having nginx sitting on top handling all
static content I knew something wasn’t quite right.&lt;/p&gt;
&lt;p&gt;Looking through the logs I found quite a lot of requests from a badly
written spider which was generating a lot of server load when it hit the
server, but after &lt;span class="caps"&gt;IP&lt;/span&gt; banning the culprit I also found several instances
of Apache waking it’s child processes.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
127.0.0 …&lt;/pre&gt;</summary><content type="html">&lt;p&gt;Recently I found that one of the servers I look after that runs a high
profile site was generating semi-high load at traffic peaks. You could
generally say that this would be understandable but the server was
shooting up to a load of around 10 for a few seconds and with that load
jump I was able to graph an increase of Apache processes on top of it.
Again though, this would generally be considered normal, but knowing how
well the server performs and having nginx sitting on top handling all
static content I knew something wasn’t quite right.&lt;/p&gt;
&lt;p&gt;Looking through the logs I found quite a lot of requests from a badly
written spider which was generating a lot of server load when it hit the
server, but after &lt;span class="caps"&gt;IP&lt;/span&gt; banning the culprit I also found several instances
of Apache waking it’s child processes.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
127.0.0.1 - - [23/Mar/2010:17:02:38 +0000] "OPTIONS * HTTP/1.0" 200 - "-" "Apache (internal dummy connection)"
&lt;/pre&gt;
&lt;p&gt;This in itself is normal and nothing to worry about, generally, it is
known and also mentioned on the Apache wiki (&lt;a class="reference external" href="https://wiki.apache.org/httpd/InternalDummyConnection"&gt;explanation here&lt;/a&gt;) that
servers running 2.2.6 or lower can suffer performance problems due to
how Apache wakes it’s children because it used &lt;span class="caps"&gt;GET&lt;/span&gt; / to wake them, but I
run 2.2.8 which doesn’t actually used that same method.&lt;/p&gt;
&lt;p&gt;I applied the well known “work around” for this to test it and see if it
made any difference.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;RewriteEngine&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt;
&lt;span class="nb"&gt;RewriteCond&lt;/span&gt; %{HTTP_USER_AGENT} ^.*internal dummy connection.*$ [NC]
&lt;span class="nb"&gt;RewriteRule&lt;/span&gt; ^/$ &lt;span class="sx"&gt;/blank.html&lt;/span&gt; [L]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Adding the virtual hosts with dynamic content will simple rewrite
Apache’s internal dummy connection requests to blank.html, thus stopping
it from trying to generate all dynamic page content just to wake the child.&lt;/p&gt;
&lt;p&gt;All seems normal but time will tell as to whether this makes a
difference with versions &amp;gt; 2.2.6.&lt;/p&gt;
</content><category term="tutorials"></category><category term="apache"></category><category term="load average"></category></entry><entry><title>Configuring Nagios to monitor remote load, disk, swap etc using NRPE</title><link href="https://kura.gg/2010/03/21/configuring-nagios-to-monitor-remote-load-disk-using-nrpe/" rel="alternate"></link><published>2010-03-21T21:55:00+00:00</published><updated>2010-03-21T21:55:00+00:00</updated><author><name>kura</name></author><id>tag:kura.gg,2010-03-21:/2010/03/21/configuring-nagios-to-monitor-remote-load-disk-using-nrpe/</id><summary type="html">
&lt;p&gt;I’ll assume you already have Nagios installed and configured and have an
understanding of actually configuring and using Nagios.&lt;/p&gt;
&lt;div class="section" id="remote-server-the-server-to-be-monitored"&gt;
&lt;h2&gt;Remote server — the server to be monitored&lt;/h2&gt;
&lt;p&gt;First we’ll install the needed plugins and daemon on the &lt;strong&gt;remote&lt;/strong&gt; server.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install nagios-plugins nagios-nrpe-server
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once installed, open up &lt;strong&gt;/etc/nagios/nrpe_local.cfg&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;And place the following in it&lt;/p&gt;
&lt;pre class="literal-block"&gt;
allowed_hosts=NAGIOS.SERVER.IP,127.0.0.1

command[check_users]=/usr/lib/nagios/plugins/check_users -w 5 -c 10
command[check_load]=/usr/lib/nagios/plugins/check_load -w 15,10,5 -c 30,25,20
command[check_all_disks]=/usr/lib/nagios/plugins/check_disk -w 20 -c 10
command[check_zombie_procs]=/usr/lib/nagios/plugins/check_procs -w 5 -c 10 -s Z
command[check_total_procs]=/usr/lib/nagios/plugins/check_procs -w 150 -c 200
command[check_swap]=/usr/lib/nagios/plugins …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">
&lt;p&gt;I’ll assume you already have Nagios installed and configured and have an
understanding of actually configuring and using Nagios.&lt;/p&gt;
&lt;div class="section" id="remote-server-the-server-to-be-monitored"&gt;
&lt;h2&gt;Remote server — the server to be monitored&lt;/h2&gt;
&lt;p&gt;First we’ll install the needed plugins and daemon on the &lt;strong&gt;remote&lt;/strong&gt; server.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install nagios-plugins nagios-nrpe-server
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once installed, open up &lt;strong&gt;/etc/nagios/nrpe_local.cfg&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;And place the following in it&lt;/p&gt;
&lt;pre class="literal-block"&gt;
allowed_hosts=NAGIOS.SERVER.IP,127.0.0.1

command[check_users]=/usr/lib/nagios/plugins/check_users -w 5 -c 10
command[check_load]=/usr/lib/nagios/plugins/check_load -w 15,10,5 -c 30,25,20
command[check_all_disks]=/usr/lib/nagios/plugins/check_disk -w 20 -c 10
command[check_zombie_procs]=/usr/lib/nagios/plugins/check_procs -w 5 -c 10 -s Z
command[check_total_procs]=/usr/lib/nagios/plugins/check_procs -w 150 -c 200
command[check_swap]=/usr/lib/nagios/plugins/check_swap -w 20 -c 10
&lt;/pre&gt;
&lt;p&gt;Save and exit.&lt;/p&gt;
&lt;p&gt;Commands need to explicitly be enabled on the remote server to actually
be runnable remotely, so you can add more plugins to this command list
any time you want.&lt;/p&gt;
&lt;p&gt;Start the nagios-nrpe-server daemon.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /etc/init.d/nagios-nrpe-server start
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="monitoring-server-the-server-with-nagios-installed"&gt;
&lt;h2&gt;Monitoring server — the server with Nagios installed&lt;/h2&gt;
&lt;p&gt;Install the nagios nrpe plugin&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install nagios-nrpe-plugin
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now test the connection to the remote server we set up just now.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/usr/lib/nagios/plugins/check_nrpe -H REMOTE.SERVER.IP
NRPE v2.8.1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you get a version response it means it all works.&lt;/p&gt;
&lt;p&gt;Now we simply add a service check for the host but use the check_nrpe
plugin to do so.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
define service {
    host_name HOSTNAME
    service_description Load
    check_command check_nrpe_1arg!check_load
    use generic-service
    notification_interval 0
}
&lt;/pre&gt;
&lt;p&gt;We have already defined the tolerances on the remote server in
nrpe_local.cfg so we only need to use the check_nrpe_1arg command,
you can actually pass arguments using check_nrpe as below.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
define service {
    host_name HOSTNAME
    service_description Load
    check_command check_nrpe!check_load!5!10
    use generic-service
    notification_interval 0
}
&lt;/pre&gt;
&lt;p&gt;Save, exit and reload nagios.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /etc/init.d/nagios2 restart
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="tutorials"></category><category term="debian"></category><category term="monitoring"></category><category term="nagios"></category><category term="nrpe"></category><category term="ubuntu"></category></entry><entry><title>Show IP in Apache logs from nginx reverse proxy</title><link href="https://kura.gg/2010/03/20/show-ip-in-apache-logs-from-nginx-reverse-proxy/" rel="alternate"></link><published>2010-03-20T19:24:00+00:00</published><updated>2010-03-20T19:24:00+00:00</updated><author><name>kura</name></author><id>tag:kura.gg,2010-03-20:/2010/03/20/show-ip-in-apache-logs-from-nginx-reverse-proxy/</id><summary type="html">&lt;p&gt;This is a very quick blog to show you how to show a users &lt;span class="caps"&gt;IP&lt;/span&gt; address in
your Apache access logs when the site in question is being reverse
proxied to Apache through nginx.&lt;/p&gt;
&lt;p&gt;You need the rpaf module for Apache, on Debian and Ubuntu this is simple
to install&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install libapache2-mod-rpaf
sudo a2enmod rpaf
sudo /etc/init.d/apache2 restart
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This set of commands will do the following;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Update apt package list&lt;/li&gt;
&lt;li&gt;Install libapache2-mod-rpaf&lt;/li&gt;
&lt;li&gt;Enable mod-rpaf&lt;/li&gt;
&lt;li&gt;Gracefully restart Apache (doesn’t kill connections)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once installed you simple need to be sure to pass the correct headers
through, so open up one of your nginx site configuration files and add
the following within the server definition.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;X-Forwarded-For&lt;/span&gt; &lt;span class="nv"&gt;$proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So you should have something that looks like this, but without the “… snip …”&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;# ...snip...&lt;/span&gt;
    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;# ...snip...&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;X-Forwarded-For&lt;/span&gt; &lt;span class="nv"&gt;$proxy_add …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;This is a very quick blog to show you how to show a users &lt;span class="caps"&gt;IP&lt;/span&gt; address in
your Apache access logs when the site in question is being reverse
proxied to Apache through nginx.&lt;/p&gt;
&lt;p&gt;You need the rpaf module for Apache, on Debian and Ubuntu this is simple
to install&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install libapache2-mod-rpaf
sudo a2enmod rpaf
sudo /etc/init.d/apache2 restart
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This set of commands will do the following;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Update apt package list&lt;/li&gt;
&lt;li&gt;Install libapache2-mod-rpaf&lt;/li&gt;
&lt;li&gt;Enable mod-rpaf&lt;/li&gt;
&lt;li&gt;Gracefully restart Apache (doesn’t kill connections)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once installed you simple need to be sure to pass the correct headers
through, so open up one of your nginx site configuration files and add
the following within the server definition.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;X-Forwarded-For&lt;/span&gt; &lt;span class="nv"&gt;$proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So you should have something that looks like this, but without the “… snip …”&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;# ...snip...&lt;/span&gt;
    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;# ...snip...&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;X-Forwarded-For&lt;/span&gt; &lt;span class="nv"&gt;$proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="c1"&gt;# ...snip...&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</content><category term="tutorials"></category><category term="apache"></category><category term="log"></category><category term="nginx"></category><category term="proxy"></category></entry><entry><title>nginx - increase increase server_names_hash_bucket_size</title><link href="https://kura.gg/2010/03/18/nginx-increase-increase-server_names_hash_bucket_size/" rel="alternate"></link><published>2010-03-18T21:54:00+00:00</published><updated>2010-03-18T21:54:00+00:00</updated><author><name>kura</name></author><id>tag:kura.gg,2010-03-18:/2010/03/18/nginx-increase-increase-server_names_hash_bucket_size/</id><content type="html">&lt;p&gt;Today I ran in to something I’d never seen before when configuring nginx.&lt;/p&gt;
&lt;p&gt;I ran the nginx config test, as I usually do before I restart it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nginx -t
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But, the response I got was interesting&lt;/p&gt;
&lt;pre class="literal-block"&gt;
2010/03/18 21:16:09 [emerg] 12299#0: could not build the server_names_hash, you should increase server_names_hash_bucket_size: 32
2010/03/18 21:16:09 [emerg] 12299#0: the configuration file /etc/nginx/nginx.conf test failed
&lt;/pre&gt;
&lt;p&gt;I found that one of the domain names I was using was over 32 characters
in length, nginx’s default max length.&lt;/p&gt;
&lt;p&gt;Thankfully the fix was simple.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;http&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;# ...snip...&lt;/span&gt;
    &lt;span class="kn"&gt;server_names_hash_bucket_size&lt;/span&gt; &lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;# ...snip...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</content><category term="tutorials"></category><category term="nginx"></category></entry><entry><title>Finding files over a set size with find &amp; awk</title><link href="https://kura.gg/2010/03/17/finding-files-over-a-set-size-with-find-and-awk/" rel="alternate"></link><published>2010-03-17T11:19:00+00:00</published><updated>2010-03-17T11:19:00+00:00</updated><author><name>kura</name></author><id>tag:kura.gg,2010-03-17:/2010/03/17/finding-files-over-a-set-size-with-find-and-awk/</id><content type="html">&lt;p&gt;This is a really great simple way to find files on the filesystem that
are over 200k in size.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find /path/to/directory/ -type f -size +200k -exec ls -lh &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;'{ print $NF ": " $5 }'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can use the output of this to either store in a file, or pipe to wc
for a count of lines&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find /path/to/directory/ -type f -size +200k -exec ls -lh &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;'{ print $NF ": " $5 }'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; wc -l
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also use egrep before wc to look for specific filetypes&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;find /path/to/directory/ -type f -size +200k -exec ls -lh &lt;span class="o"&gt;{}&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;'{ print $NF ": " $5 }'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; egrep &lt;span class="s1"&gt;'(jpg|bmp|gif|tiff|jpeg)'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; wc -l
&lt;/pre&gt;&lt;/div&gt;
</content><category term="tutorials"></category><category term="awk"></category><category term="egrep"></category><category term="find"></category><category term="linux"></category><category term="ls"></category><category term="wc"></category></entry><entry><title>Convert DER certificate to PEM</title><link href="https://kura.gg/2010/03/03/convert-der-certificate-to-pem/" rel="alternate"></link><published>2010-03-03T17:26:00+00:00</published><updated>2010-03-03T17:26:00+00:00</updated><author><name>kura</name></author><id>tag:kura.gg,2010-03-03:/2010/03/03/convert-der-certificate-to-pem/</id><content type="html">&lt;p&gt;Some times as an administrator you will be given a certificate from a
third party that will be in the &lt;span class="caps"&gt;DER&lt;/span&gt; format, which cannot be loaded in to Apache.&lt;/p&gt;
&lt;p&gt;Converting it is a simple process:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;openssl x509 -in certificate.crt -inform DER -out certificate.pem -outform PEM
&lt;/pre&gt;&lt;/div&gt;
</content><category term="tutorials"></category><category term="apache"></category><category term="certificate"></category><category term="crt"></category><category term="der"></category><category term="pem"></category><category term="ssl"></category></entry><entry><title>less is more</title><link href="https://kura.gg/2010/03/01/less-is-more/" rel="alternate"></link><published>2010-03-01T21:30:00+00:00</published><updated>2010-03-01T21:30:00+00:00</updated><author><name>kura</name></author><id>tag:kura.gg,2010-03-01:/2010/03/01/less-is-more/</id><summary type="html">
&lt;p&gt;To my surprise I have found that there are still people out there who
use &lt;em&gt;“more”&lt;/em&gt;, this has shocked me.&lt;/p&gt;
&lt;p&gt;So this is a very, very short blog post to tell those who visit that
&lt;strong&gt;less is more and more is less&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="section" id="what"&gt;
&lt;h2&gt;What?&lt;/h2&gt;
&lt;p&gt;less is a command that comes as standard in almost all Linux distros
now, and unlike more it actually has the ability to do backwards and
forwards scrolling with Page Up, Page Down, arrow keys and spacebar.
It’s a fantastic little command!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;less FILE
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Very simple to use and an all round great tool. The best thing about
less is it doesn’t need to read the whole file in one go, it reads in
chunks. Opening a &lt;span class="caps"&gt;100MB&lt;/span&gt; log file is simple with less!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="useful-options"&gt;
&lt;h2&gt;Useful options&lt;/h2&gt;
&lt;table class="docutils"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th class="head"&gt;&lt;strong&gt;-g&lt;/strong&gt;&lt;/th&gt;
&lt;th class="head"&gt;Highlights just the current match of any searched string,&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;-I&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Case-insensitive searches,&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;-M&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Show a more detailed prompt …&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;</summary><content type="html">
&lt;p&gt;To my surprise I have found that there are still people out there who
use &lt;em&gt;“more”&lt;/em&gt;, this has shocked me.&lt;/p&gt;
&lt;p&gt;So this is a very, very short blog post to tell those who visit that
&lt;strong&gt;less is more and more is less&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="section" id="what"&gt;
&lt;h2&gt;What?&lt;/h2&gt;
&lt;p&gt;less is a command that comes as standard in almost all Linux distros
now, and unlike more it actually has the ability to do backwards and
forwards scrolling with Page Up, Page Down, arrow keys and spacebar.
It’s a fantastic little command!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;less FILE
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Very simple to use and an all round great tool. The best thing about
less is it doesn’t need to read the whole file in one go, it reads in
chunks. Opening a &lt;span class="caps"&gt;100MB&lt;/span&gt; log file is simple with less!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="useful-options"&gt;
&lt;h2&gt;Useful options&lt;/h2&gt;
&lt;table class="docutils"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th class="head"&gt;&lt;strong&gt;-g&lt;/strong&gt;&lt;/th&gt;
&lt;th class="head"&gt;Highlights just the current match of any searched string,&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;-I&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Case-insensitive searches,&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;-M&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Show a more detailed prompt, including file position,&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;-N&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Show line numbers.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;+F&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Follow (like tail -f)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="section" id="useful-key-bindings"&gt;
&lt;h2&gt;Useful key bindings&lt;/h2&gt;
&lt;table class="docutils"&gt;
&lt;thead&gt;
&lt;tr&gt;&lt;th class="head"&gt;&lt;strong&gt;/&lt;/strong&gt;&lt;/th&gt;
&lt;th class="head"&gt;Search e.g. /test&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;n&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Goto next search match&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;N&lt;/strong&gt; (Shift + n)&lt;/td&gt;
&lt;td&gt;Goto previous search match&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;^&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Goto start of the file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;$&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Goto end of the file&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;Spacebar&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Next page&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;strong&gt;b&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Previous page&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="tutorials"></category><category term="less"></category><category term="linux"></category><category term="unix"></category></entry><entry><title>HOWTO: SSH config on Debian/Ubuntu</title><link href="https://kura.gg/2010/02/18/howto-ssh-config-on-debian-ubuntu/" rel="alternate"></link><published>2010-02-18T21:03:00+00:00</published><updated>2010-02-18T21:03:00+00:00</updated><author><name>kura</name></author><id>tag:kura.gg,2010-02-18:/2010/02/18/howto-ssh-config-on-debian-ubuntu/</id><summary type="html">
&lt;p&gt;Today I &lt;em&gt;finally&lt;/em&gt; got round to setting up my local user ssh config on my
new work laptop and figured I’d do a quick write up on it and it’s uses.&lt;/p&gt;
&lt;p&gt;You can create a configuration file in your home directory that will
override the options set in your machine-wide config.&lt;/p&gt;
&lt;div class="section" id="your-configuration-files"&gt;
&lt;h2&gt;Your configuration files&lt;/h2&gt;
&lt;p&gt;Your local config can be found/created in:&lt;/p&gt;
&lt;blockquote&gt;
~/.ssh/config&lt;/blockquote&gt;
&lt;p&gt;And your machine-wide configuration is in:&lt;/p&gt;
&lt;blockquote&gt;
/etc/ssh/ssh_config&lt;/blockquote&gt;
&lt;p&gt;Rather than editing my ssh config across my whole machine I’m doing it
for my local user specifically.&lt;/p&gt;
&lt;p&gt;Reading the man page for ssh_config will give you a full list of
available options, below I will outline several that I use and find very useful.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="your-host-definitions"&gt;
&lt;h2&gt;Your host definitions&lt;/h2&gt;
&lt;p&gt;First things first, we need to define a host.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Host host.domain.com
&lt;/pre&gt;
&lt;p&gt;Each host you add to your config will need to have …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
&lt;p&gt;Today I &lt;em&gt;finally&lt;/em&gt; got round to setting up my local user ssh config on my
new work laptop and figured I’d do a quick write up on it and it’s uses.&lt;/p&gt;
&lt;p&gt;You can create a configuration file in your home directory that will
override the options set in your machine-wide config.&lt;/p&gt;
&lt;div class="section" id="your-configuration-files"&gt;
&lt;h2&gt;Your configuration files&lt;/h2&gt;
&lt;p&gt;Your local config can be found/created in:&lt;/p&gt;
&lt;blockquote&gt;
~/.ssh/config&lt;/blockquote&gt;
&lt;p&gt;And your machine-wide configuration is in:&lt;/p&gt;
&lt;blockquote&gt;
/etc/ssh/ssh_config&lt;/blockquote&gt;
&lt;p&gt;Rather than editing my ssh config across my whole machine I’m doing it
for my local user specifically.&lt;/p&gt;
&lt;p&gt;Reading the man page for ssh_config will give you a full list of
available options, below I will outline several that I use and find very useful.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="your-host-definitions"&gt;
&lt;h2&gt;Your host definitions&lt;/h2&gt;
&lt;p&gt;First things first, we need to define a host.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Host host.domain.com
&lt;/pre&gt;
&lt;p&gt;Each host you add to your config will need to have a host definition&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Host host.domain.com

...

Host host2.domain.com

...
&lt;/pre&gt;
&lt;p&gt;You can also create a wildcard host, hosts will actually build together
unless overwritten, so if you set a variable within the wildcard host it
will be set on all other defined hosts, unless the option is respecified
on that host.&lt;/p&gt;
&lt;p&gt;You can set up a wildcard host with this option:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Hostname *

...
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="configuration-options"&gt;
&lt;h2&gt;Configuration options&lt;/h2&gt;
&lt;p&gt;I use several options across all my hosts&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Compression yes
&lt;/pre&gt;
&lt;p&gt;Setting this to yes will enable &lt;span class="caps"&gt;SSH&lt;/span&gt; compression. See setting below for
more information.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
CompressionLevel 9
&lt;/pre&gt;
&lt;p&gt;This is used to set compression on &lt;span class="caps"&gt;SSH&lt;/span&gt;, the higher the level (1-9) the
higher the compression rate, this also means less bandwidth is needed
but will require more processing to actually compress the request. I
generally set this in my wildcard host and leave it set.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
HostName 192.168.1.2
&lt;/pre&gt;
&lt;p&gt;This is a great little option, it means you can set an &lt;span class="caps"&gt;IP&lt;/span&gt; address to
connect to within a host definition, this basically means no more need
for /etc/hosts specifically for &lt;span class="caps"&gt;SSH&lt;/span&gt;.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
KeepAlive yes
&lt;/pre&gt;
&lt;p&gt;Setting this will enable keep alive packets to be sent to the host,
making it easier to continue working after network disconnect.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
TCPKeepAlive yes
&lt;/pre&gt;
&lt;p&gt;This option is like the one above, except it only sends &lt;span class="caps"&gt;TCP&lt;/span&gt; keep alive packets.&lt;/p&gt;
&lt;p&gt;There are many, many more settings but these are the ones I find useful.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="configuration-example"&gt;
&lt;h2&gt;Configuration example&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
Host host1
    HostName 192.168.1.1

Host host2
    HostName 192.168.1.2

Host host3
    HostName host3.example.com

Host *
    Compression yes
    CompressionLevel 9
    KeepAlive yes
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="why-use-it"&gt;
&lt;h2&gt;Why use it?&lt;/h2&gt;
&lt;p&gt;The beauty of this config means that you are able to type ssh, press
your Tab key and a whole list of your hosts will be displayed, using the
name set in the host definition, just like when you type commands, this
also means you could type “ssh h” with the above config file and it will
display host1, host2 and host3 for you to chose from.&lt;/p&gt;
&lt;/div&gt;
</content><category term="tutorials"></category><category term="debian"></category><category term="howto"></category><category term="ssh"></category><category term="ssh_config"></category><category term="ubuntu"></category></entry><entry><title>HOWTO: Guest Virtual Machine disk extend online with Debian/Ubuntu, LVM2 and VMWare ESX</title><link href="https://kura.gg/2010/02/16/howto-guest-virtual-machine-disk-extend-online-with-debian-ubuntu-lvm2-and-vmware-esx/" rel="alternate"></link><published>2010-02-16T18:20:00+00:00</published><updated>2010-02-16T18:20:00+00:00</updated><author><name>kura</name></author><id>tag:kura.gg,2010-02-16:/2010/02/16/howto-guest-virtual-machine-disk-extend-online-with-debian-ubuntu-lvm2-and-vmware-esx/</id><summary type="html">
&lt;p&gt;Over the last two days I’ve had the interesting task of online some VMs
from clones and increasing their disk space to accommodate a mass of
user uploaded content. I’ve done this before but never actually with an
Logical Volume Management (&lt;span class="caps"&gt;LVM&lt;/span&gt;) disk.&lt;/p&gt;
&lt;p&gt;My first approach, like a fool, was to clone the &lt;span class="caps"&gt;VM&lt;/span&gt; from source and boot
it from a remotely mounted GParted &lt;span class="caps"&gt;ISO&lt;/span&gt;, this didn’t actually go as
expected and I was unable to add it to the &lt;span class="caps"&gt;LVM&lt;/span&gt;, I found a nice guide
online and consulted a colleague because I knew he’d done something
similar recently. After the first successful size increase I realised I
was able to do it without ever rebooting the machine itself, this is
accomplished by actually adding an extra disk to the &lt;span class="caps"&gt;VM&lt;/span&gt;, this disk can
then be partition with cfdisk and then added to the &lt;span class="caps"&gt;LVM&lt;/span&gt;, thus …&lt;/p&gt;</summary><content type="html">
&lt;p&gt;Over the last two days I’ve had the interesting task of online some VMs
from clones and increasing their disk space to accommodate a mass of
user uploaded content. I’ve done this before but never actually with an
Logical Volume Management (&lt;span class="caps"&gt;LVM&lt;/span&gt;) disk.&lt;/p&gt;
&lt;p&gt;My first approach, like a fool, was to clone the &lt;span class="caps"&gt;VM&lt;/span&gt; from source and boot
it from a remotely mounted GParted &lt;span class="caps"&gt;ISO&lt;/span&gt;, this didn’t actually go as
expected and I was unable to add it to the &lt;span class="caps"&gt;LVM&lt;/span&gt;, I found a nice guide
online and consulted a colleague because I knew he’d done something
similar recently. After the first successful size increase I realised I
was able to do it without ever rebooting the machine itself, this is
accomplished by actually adding an extra disk to the &lt;span class="caps"&gt;VM&lt;/span&gt;, this disk can
then be partition with cfdisk and then added to the &lt;span class="caps"&gt;LVM&lt;/span&gt;, thus increasing
disk space without the need to resize the actual main disk. The &lt;span class="caps"&gt;LVM&lt;/span&gt;
doesn’t care if the disks are physically separate (in this case they
aren’t, they’re on the same &lt;span class="caps"&gt;SAN&lt;/span&gt; but are still seen by the &lt;span class="caps"&gt;OS&lt;/span&gt; as being
different devices), as far as the &lt;span class="caps"&gt;LVM&lt;/span&gt; is concerned it will actually just
make them appear to the &lt;span class="caps"&gt;OS&lt;/span&gt; as one disk, even though made up from
different parts.&lt;/p&gt;
&lt;p&gt;So, onwards.&lt;/p&gt;
&lt;div class="section" id="assigning-the-additional-space-to-the-vm"&gt;
&lt;h2&gt;Assigning the additional space to the &lt;span class="caps"&gt;VM&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;This is rather easy, I’m going to assume anyone that is reading this
guide has VMWare installed, their host and guests configured properly.
etc. This guide is also aimed at &lt;span class="caps"&gt;ESX&lt;/span&gt; but is still easily applicable to
ESXi, VMWare player, etc.&lt;/p&gt;
&lt;p&gt;Within &lt;span class="caps"&gt;ESX&lt;/span&gt;, modify your VMs settings, adding an additional &lt;span class="caps"&gt;SCSI&lt;/span&gt; hard
disk, I’m going to give mine an additional drive with &lt;span class="caps"&gt;210GB&lt;/span&gt; of space.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="partitioning-the-newly-added-space"&gt;
&lt;h2&gt;Partitioning the newly added space&lt;/h2&gt;
&lt;p&gt;Once done, go to your &lt;span class="caps"&gt;VM&lt;/span&gt;, and as root run the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"- - -"&lt;/span&gt; &amp;gt; /sys/class/scsi_host/**host0**/scan &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; fdisk -l
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If the newly added unpartitioned drive isn’t displayed, try again with a
different &lt;strong&gt;host#&lt;/strong&gt; - host1, host2 etc.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo cfdisk /dev/sda
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you don’t have cfdisk installed, you should be able to install it
with the following command on Debian-based systems:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install cfdisk
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once you have it running the &lt;span class="caps"&gt;ASCII&lt;/span&gt; interface should be simple to follow,
select your unallocated space and partition it, making sure you select
it’s type as &lt;strong&gt;Logical Volume&lt;/strong&gt; (8E) and &lt;strong&gt;not set it as bootable&lt;/strong&gt;.
Write these changes and close cfdisk.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Name Flags Part Type FS Type [Label] Size (MB)

------------------------------------------------------------------------------
sda1 Boot Primary Linux ext3 254.99
sda5 Logical Linux LVM 10479.01
sda6 Logical Linux LVM 225487.83
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="adding-to-an-existing-lvm"&gt;
&lt;h2&gt;Adding to an existing &lt;span class="caps"&gt;LVM&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;Lets take a look at our current list of physical volumes&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pvs

PV VG Fmt Attr PSize PFree
/dev/sda5 jeos-base lvm2 a- &lt;span class="m"&gt;9&lt;/span&gt;.76G &lt;span class="m"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see we have our existing list of volumes, in my case one.&lt;/p&gt;
&lt;p&gt;So now all we need to do is create another physical volume, my partition
is labelled &lt;strong&gt;sda6&lt;/strong&gt; so that’s what I will be using.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo pvcreate /dev/sda6
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that we’ve added the volume it’s time to add it to the volume group,
this is really simple and again I’ll be using sda6.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo vgextend jeos-base /dev/sda6
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;jeos-root is the name of my volume group, you’d obviously replace this
with your own groups name.&lt;/p&gt;
&lt;p&gt;Now if we actually take a look at pvs again you will see that your
physical volume has been created and added to your volume group.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pvs &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; lvdisplay

PV VG Fmt Attr PSize PFree
/dev/sda5 jeos-base lvm2 a- &lt;span class="m"&gt;9&lt;/span&gt;.76G &lt;span class="m"&gt;0&lt;/span&gt;
/dev/sda6 lvm2 -- &lt;span class="m"&gt;210&lt;/span&gt;.00G &lt;span class="m"&gt;0&lt;/span&gt;

--- Logical volume ---
LV Name /dev/jeos-base/root
VG Name jeos-base
LV UUID &lt;span class="m"&gt;1234&lt;/span&gt;
LV Write Access read/write
LV Status available
&lt;span class="c1"&gt;# open 1&lt;/span&gt;
LV Size &lt;span class="m"&gt;9&lt;/span&gt;.76 GB
Current LE &lt;span class="m"&gt;12620&lt;/span&gt;
Segments &lt;span class="m"&gt;2&lt;/span&gt;
Allocation inherit
Read ahead sectors &lt;span class="m"&gt;0&lt;/span&gt;
Block device &lt;span class="m"&gt;254&lt;/span&gt;:0
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first output shows that your device has been added to the volume
group, the second output will show you that it isn’t actually added to
the &lt;span class="caps"&gt;LVM&lt;/span&gt;, so the next step is to actually extend the &lt;span class="caps"&gt;LVM&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Thanks to Ivan Marinkovic from the comments for this improved command:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
.. code-block:: bash
&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;sudo lvextend -l+100%&lt;span class="caps"&gt;FREE&lt;/span&gt; /dev/jeos-base/root &amp;amp;&amp;amp; lvdisplay&lt;/p&gt;
&lt;p class="attribution"&gt;—Logical volume —-
&lt;span class="caps"&gt;LV&lt;/span&gt; Name /dev/jeos-base/root
&lt;span class="caps"&gt;VG&lt;/span&gt; Name jeos-base
&lt;span class="caps"&gt;LV&lt;/span&gt; &lt;span class="caps"&gt;UUID&lt;/span&gt; 1234
&lt;span class="caps"&gt;LV&lt;/span&gt; Write Access read/write
&lt;span class="caps"&gt;LV&lt;/span&gt; Status available
# open 1
&lt;span class="caps"&gt;LV&lt;/span&gt; Size 219.30 &lt;span class="caps"&gt;GB&lt;/span&gt;
Current &lt;span class="caps"&gt;LE&lt;/span&gt; 56140
Segments 2
Allocation inherit
Read ahead sectors 0
Block device 254:0&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With the output of lvextend you will see that it successfully extending
the logical volume and lvdisplay should confirm that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resizing-the-file-system"&gt;
&lt;h2&gt;Resizing the file system&lt;/h2&gt;
&lt;p&gt;Now that we have the &lt;span class="caps"&gt;LVM&lt;/span&gt; extended we will actually want to extend the
file system too, so that it can use the full extra space freely, this
can be done online, I’d recommend doing a snapshot or backup of your &lt;span class="caps"&gt;VM&lt;/span&gt;
before doing this though.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo resize2fs /dev/mapper/jeos--base-root &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; df -h

Filesystem Size Used Avail Use% Mounted on
/dev/mapper/jeos--base-root
218G &lt;span class="m"&gt;1&lt;/span&gt;.7G 205G &lt;span class="m"&gt;1&lt;/span&gt;% /
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And that’s it, all done. The output of df should confirm that your free
space has now increased in size.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Credits&lt;/em&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.randombugs.com/linux/howto-extend-lvm-partition-online.html"&gt;Original guide that I partially followed with a colleague&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;Federico Marani, the colleague that helped &amp;lt;`https://marro.wordpress.com/&lt;/cite&gt;&amp;gt;_ (Italian)&lt;/li&gt;
&lt;li&gt;Thanks to Mike Heald for linking me to reloading &lt;span class="caps"&gt;SCSI&lt;/span&gt; list&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="tutorials"></category><category term="cfdisk"></category><category term="debian"></category><category term="esx"></category><category term="howto"></category><category term="logical volume management"></category><category term="lvm"></category><category term="lvm2"></category><category term="partition"></category><category term="ubuntu"></category><category term="vmware"></category></entry><entry><title>More nginx proxy_cache optimizations and nginx load balancing</title><link href="https://kura.gg/2010/02/14/more-nginx-proxy_cache-optimizations-and-nginx-load-balancing/" rel="alternate"></link><published>2010-02-14T14:27:00+00:00</published><updated>2010-02-14T14:27:00+00:00</updated><author><name>kura</name></author><id>tag:kura.gg,2010-02-14:/2010/02/14/more-nginx-proxy_cache-optimizations-and-nginx-load-balancing/</id><summary type="html">
&lt;p&gt;This is yet another follow up to post to several previous posts about
using nginx as a reverse proxy with caching. It is actually a direct
addition to my post from a week or so ago which outlined how to actually
using nginx’s proxy caching feature which can be read here —
&lt;a class="reference external" href="https://syslog.tv/2010/02/07/nginx-proxy_cache-and-explained-benchmarked/"&gt;/2010/02/07/nginx-proxy_cache-and-explained-benchmarked/&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="even-more-changes"&gt;
&lt;h2&gt;Even more changes?&lt;/h2&gt;
&lt;p&gt;Yes, even more changes, these are basic changes that are there to
improve the caching capabilities and also implement load balancing.&lt;/p&gt;
&lt;div class="section" id="cache-changes"&gt;
&lt;h3&gt;Cache changes&lt;/h3&gt;
&lt;p&gt;The first set of changes are in the main nginx configuration file&lt;/p&gt;
&lt;blockquote&gt;
/etc/nginx/nginx.conf&lt;/blockquote&gt;
&lt;p&gt;These changes basically just change the proxy_cache key&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;proxy_cache_path&lt;/span&gt; &lt;span class="s"&gt;/var/www/nginx_cache&lt;/span&gt; &lt;span class="s"&gt;levels=1:2&lt;/span&gt; &lt;span class="s"&gt;keys_zone=cache:8m&lt;/span&gt; &lt;span class="s"&gt;max_size=1000m&lt;/span&gt; &lt;span class="s"&gt;inactive=600m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;proxy_temp_path&lt;/span&gt; &lt;span class="s"&gt;/tmp/nginx&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;proxy_cache_key&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$scheme://$host$request_uri"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I’ve decided to put the temporary caches file in to …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">
&lt;p&gt;This is yet another follow up to post to several previous posts about
using nginx as a reverse proxy with caching. It is actually a direct
addition to my post from a week or so ago which outlined how to actually
using nginx’s proxy caching feature which can be read here —
&lt;a class="reference external" href="https://syslog.tv/2010/02/07/nginx-proxy_cache-and-explained-benchmarked/"&gt;/2010/02/07/nginx-proxy_cache-and-explained-benchmarked/&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="even-more-changes"&gt;
&lt;h2&gt;Even more changes?&lt;/h2&gt;
&lt;p&gt;Yes, even more changes, these are basic changes that are there to
improve the caching capabilities and also implement load balancing.&lt;/p&gt;
&lt;div class="section" id="cache-changes"&gt;
&lt;h3&gt;Cache changes&lt;/h3&gt;
&lt;p&gt;The first set of changes are in the main nginx configuration file&lt;/p&gt;
&lt;blockquote&gt;
/etc/nginx/nginx.conf&lt;/blockquote&gt;
&lt;p&gt;These changes basically just change the proxy_cache key&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;proxy_cache_path&lt;/span&gt; &lt;span class="s"&gt;/var/www/nginx_cache&lt;/span&gt; &lt;span class="s"&gt;levels=1:2&lt;/span&gt; &lt;span class="s"&gt;keys_zone=cache:8m&lt;/span&gt; &lt;span class="s"&gt;max_size=1000m&lt;/span&gt; &lt;span class="s"&gt;inactive=600m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;proxy_temp_path&lt;/span&gt; &lt;span class="s"&gt;/tmp/nginx&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;proxy_cache_key&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$scheme://$host$request_uri"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I’ve decided to put the temporary caches file in to an nginx specific
directory, just to separate them from other cache files. I’ve also
modified the proxy_cache_key to add the following variables:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;$scheme&lt;/strong&gt; - This will be the protocol; http or https&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;$host&lt;/strong&gt; - Host name, this will be set as syslog.tv for me&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;$request_uri&lt;/strong&gt; - The full request uri, this is simple&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Why add these variables? Quite simple really, it means I can have
multiple sites running with proxy caching enabled and have them set a
meaningful key so they don’t clash.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="load-balancing-changes"&gt;
&lt;h3&gt;Load balancing changes&lt;/h3&gt;
&lt;p&gt;The next set of changes will be specific to my site specific
configuration file, the first of which is an addition on an upstream definition.&lt;/p&gt;
&lt;p&gt;/etc/nginx/sites-available/syslog.tv&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;upstream&lt;/span&gt; &lt;span class="s"&gt;apachesyslogtv&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="s"&gt;apache.syslog.tv&lt;/span&gt; &lt;span class="s"&gt;weight=1&lt;/span&gt; &lt;span class="s"&gt;fail_timeout=60s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So what does this mean? This is really actually quite simple, we define
an upstream set called &lt;strong&gt;apachesyslogtv&lt;/strong&gt;, which contains, in this
example, a single server definition with a weight of 1 and a fail
timeout of 60 seconds. You would actually be able to add multiple server
definitions to this with different weights and fail timeouts. This is
used for load balancing.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;upstream&lt;/span&gt; &lt;span class="s"&gt;apachesyslogtv&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="s"&gt;apache1.syslog.tv&lt;/span&gt; &lt;span class="s"&gt;weight=1&lt;/span&gt; &lt;span class="s"&gt;fail_timeout=60s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="s"&gt;apache2.syslog.tv&lt;/span&gt; &lt;span class="s"&gt;weight=1&lt;/span&gt; &lt;span class="s"&gt;fail_timeout=60s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="server-definition-changes"&gt;
&lt;h3&gt;Server definition changes&lt;/h3&gt;
&lt;p&gt;There are quite a lot of changes that are made to the actual server
definition, I will go through these step-by-step to explain what has
changed and why it’s changed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="s"&gt;/path/to/site&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;proxy_redirect&lt;/span&gt; &lt;span class="no"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;Host&lt;/span&gt; &lt;span class="nv"&gt;$host&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;X-Real-IP&lt;/span&gt; &lt;span class="nv"&gt;$remote_addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;X-Forwarded-For&lt;/span&gt; &lt;span class="nv"&gt;$proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$http_cookie&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt;&lt;span class="sr"&gt;*&lt;/span&gt; &lt;span class="s"&gt;"comment_author_|wordpress_(?!test_cookie)|wp-postpass_")&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$do_not_cache&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kn"&gt;proxy_cache_key&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$scheme://$host$request_uri&lt;/span&gt; &lt;span class="nv"&gt;$do_not_cache"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;proxy_cache&lt;/span&gt; &lt;span class="s"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;proxy_cache_valid&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="mi"&gt;302&lt;/span&gt; &lt;span class="mi"&gt;60m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;proxy_cache_valid&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt; &lt;span class="mi"&gt;1m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;https://apachesyslogtv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ok, so that’s the first location, definition. Several things have
changed with this.&lt;/p&gt;
&lt;p&gt;The first change is an addition of a cookie check, in my case I’m
running a WordPress site so I check for various WordPress cookies, if
they exist I set the variable &lt;strong&gt;$do_not_cache&lt;/strong&gt; to 1.&lt;/p&gt;
&lt;p&gt;Next is a change to the proxy_cache_key to incorporate the
$do_not_cache variable, this tells nginx not to cache the current page.&lt;/p&gt;
&lt;p&gt;And finally is a change to proxy_pass, this now points to the name of
my upstream definition, which nginx will then use to decide which server
to use.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;location&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt;&lt;span class="sr"&gt;*&lt;/span&gt; &lt;span class="s"&gt;.(jpg|png|gif|jpeg|css|mp3|wav|swf|mov|doc|pdf|xls|ppt|docx|pptx|xlsx)&lt;/span&gt;$ &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;proxy_cache_valid&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="mi"&gt;120m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;expires&lt;/span&gt; &lt;span class="mi"&gt;604800&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;https://apachesyslogtv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;proxy_cache&lt;/span&gt; &lt;span class="s"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The second and final location definition, which will match a file
extension in the &lt;span class="caps"&gt;URL&lt;/span&gt;, if a match is found it will set the cache validity
to 2 hours, expire to 7 days, pass back to our upstream definition and
cache the result. You may notice that out of all of these static file
extensions .js is missing, this is because a lot of my site is generated
by Javascript/Ajax and this will not work with caching.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="why-the-changes"&gt;
&lt;h2&gt;Why the changes?&lt;/h2&gt;
&lt;p&gt;With these changes I am able to properly store with a cache key which
allows me to cache all of my nginx sites, I’ve added the ability to
balance load across multiple servers and I’ve increased the power of the
caching to only cache pages if you’re not logged in and to always cache
static files for a long time. Meaning that the cache shouldn’t need to
be regenerated very often.&lt;/p&gt;
&lt;p&gt;All in all these changes do not increase the power of the server at all,
but with a load balanced environment this would obviously increase the
performance dramatically.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-full-config"&gt;
&lt;h2&gt;The full config&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;upstream&lt;/span&gt; &lt;span class="s"&gt;apachesyslogtv&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;server&lt;/span&gt; &lt;span class="s"&gt;apache.syslog.tv&lt;/span&gt; &lt;span class="s"&gt;weight=1&lt;/span&gt; &lt;span class="s"&gt;fail_timeout=60s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="n"&gt;174.143.241.61&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;syslog.tv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;access_log&lt;/span&gt; &lt;span class="s"&gt;/var/log/nginx/syslog.tv.access.log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;gzip_vary&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;gzip_static&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="s"&gt;/path/to/site&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_redirect&lt;/span&gt; &lt;span class="no"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;Host&lt;/span&gt; &lt;span class="nv"&gt;$host&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;X-Real-IP&lt;/span&gt; &lt;span class="nv"&gt;$remote_addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;X-Forwarded-For&lt;/span&gt; &lt;span class="nv"&gt;$proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="kn"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$http_cookie&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt;&lt;span class="sr"&gt;*&lt;/span&gt; &lt;span class="s"&gt;"comment_author_|wordpress_(?!test_cookie)|wp-postpass_")&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kn"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$do_not_cache&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="kn"&gt;proxy_cache_key&lt;/span&gt; &lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$scheme://$host$request_uri&lt;/span&gt; &lt;span class="nv"&gt;$do_not_cache"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_cache&lt;/span&gt; &lt;span class="s"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_cache_valid&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="mi"&gt;302&lt;/span&gt; &lt;span class="mi"&gt;60m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_cache_valid&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt; &lt;span class="mi"&gt;1m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;https://apachesyslogtv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt;&lt;span class="sr"&gt;*&lt;/span&gt; &lt;span class="s"&gt;.(jpg|png|gif|jpeg|css|mp3|wav|swf|mov|doc|pdf|xls|ppt|docx|pptx|xlsx)&lt;/span&gt;$ &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_cache_valid&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="mi"&gt;120m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;expires&lt;/span&gt; &lt;span class="mi"&gt;604800&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;https://apachesyslogtv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_cache&lt;/span&gt; &lt;span class="s"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="tutorials"></category><category term="apache"></category><category term="cache"></category><category term="debian"></category><category term="howto"></category><category term="load balancing"></category><category term="nginx"></category><category term="ubuntu"></category><category term="wordpress"></category></entry><entry><title>HOWTO: DomainKeys with Postfix on Debian/Ubuntu</title><link href="https://kura.gg/2010/02/12/howto-domainkeys-with-postfix-on-debian-ubuntu/" rel="alternate"></link><published>2010-02-12T19:08:00+00:00</published><updated>2010-02-12T19:08:00+00:00</updated><author><name>kura</name></author><id>tag:kura.gg,2010-02-12:/2010/02/12/howto-domainkeys-with-postfix-on-debian-ubuntu/</id><summary type="html">&lt;p&gt;&lt;strong&gt;I have written a much newer, clearer and better article on DomainKeys
signing email `here`_.&lt;/strong&gt;&lt;/p&gt;
&lt;div class="section" id="about"&gt;
&lt;h2&gt;About&lt;/h2&gt;
&lt;p&gt;This guide is a sister to another guide I wrote a while back about how
to use DomainKeys Identified Mail (&lt;span class="caps"&gt;DKIM&lt;/span&gt;) with Postfix on Debian, which
can be read here - &lt;a class="reference external" href="/2010/01/11/dkim-on-debian-with-postfix/"&gt;/2010/01/11/dkim-on-debian-with-postfix/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;DomainKeys is an older implementation than &lt;span class="caps"&gt;DKIM&lt;/span&gt;, &lt;span class="caps"&gt;DKIM&lt;/span&gt; is a merge of
DomainKeys and Identified Mail. Both DomainKeys and &lt;span class="caps"&gt;DKIM&lt;/span&gt; are used so
having both configured is a good idea.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="getting-started"&gt;
&lt;h2&gt;Getting started&lt;/h2&gt;
&lt;p&gt;Lets start off by installing the dk-filter&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install dk-filter
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once installed you can can create a public and private key set using the
commands below, if you’re already using &lt;span class="caps"&gt;DKIM&lt;/span&gt; you can skip this step and
just use your already existing key.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;openssl genrsa -out private.key &lt;span class="m"&gt;1024&lt;/span&gt;
openssl rsa -in private.key -out public.key -pubout -outform PEM
sudo mkdir /etc/mail
sudo cp …&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;I have written a much newer, clearer and better article on DomainKeys
signing email `here`_.&lt;/strong&gt;&lt;/p&gt;
&lt;div class="section" id="about"&gt;
&lt;h2&gt;About&lt;/h2&gt;
&lt;p&gt;This guide is a sister to another guide I wrote a while back about how
to use DomainKeys Identified Mail (&lt;span class="caps"&gt;DKIM&lt;/span&gt;) with Postfix on Debian, which
can be read here - &lt;a class="reference external" href="/2010/01/11/dkim-on-debian-with-postfix/"&gt;/2010/01/11/dkim-on-debian-with-postfix/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;DomainKeys is an older implementation than &lt;span class="caps"&gt;DKIM&lt;/span&gt;, &lt;span class="caps"&gt;DKIM&lt;/span&gt; is a merge of
DomainKeys and Identified Mail. Both DomainKeys and &lt;span class="caps"&gt;DKIM&lt;/span&gt; are used so
having both configured is a good idea.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="getting-started"&gt;
&lt;h2&gt;Getting started&lt;/h2&gt;
&lt;p&gt;Lets start off by installing the dk-filter&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install dk-filter
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once installed you can can create a public and private key set using the
commands below, if you’re already using &lt;span class="caps"&gt;DKIM&lt;/span&gt; you can skip this step and
just use your already existing key.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;openssl genrsa -out private.key &lt;span class="m"&gt;1024&lt;/span&gt;
openssl rsa -in private.key -out public.key -pubout -outform PEM
sudo mkdir /etc/mail
sudo cp private.key /etc/mail/dk.key
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So that’s the key sorted, now we’ll configure dk-filter.&lt;/p&gt;
&lt;p&gt;Open the following file&lt;/p&gt;
&lt;blockquote&gt;
/etc/default/dk-filter&lt;/blockquote&gt;
&lt;p&gt;You should see something like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Sane defaults: log to syslog&lt;/span&gt;
&lt;span class="nv"&gt;DAEMON_OPTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"-l"&lt;/span&gt;
&lt;span class="c1"&gt;# Sign for domain.tld with key in /etc/mail/domainkey.key using&lt;/span&gt;
&lt;span class="c1"&gt;# selector '2007' (e.g. 2007._domainkey.domain.tld)&lt;/span&gt;
&lt;span class="nv"&gt;DAEMON_OPTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$DAEMON_OPTS&lt;/span&gt;&lt;span class="s2"&gt; -d domain.tld -s&lt;/span&gt;
&lt;span class="s2"&gt;/etc/mail/domainkey.key -S 2007"&lt;/span&gt;
&lt;span class="c1"&gt;# See dk-filter(8) for a complete list of options&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Uncomment to specify an alternate socket&lt;/span&gt;
&lt;span class="c1"&gt;#SOCKET="/var/run/dk-filter/dk-filter.sock" # default&lt;/span&gt;
&lt;span class="c1"&gt;#SOCKET="inet:54321" # listen on all interfaces on port 54321&lt;/span&gt;
&lt;span class="c1"&gt;#SOCKET="inet:8892@localhost" # listen on loopback on port 8892&lt;/span&gt;
&lt;span class="c1"&gt;#SOCKET="inet:12345@192.0.2.1" # listen on 192.0.2.1 on port 12345&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You will need to modify the DAEMON_OPTS, changing the domain (-d), key
file and location (-s) and selector (-S), an example is below&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Sane defaults: log to syslog&lt;/span&gt;
&lt;span class="nv"&gt;DAEMON_OPTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"-l"&lt;/span&gt;
&lt;span class="c1"&gt;# Sign for domain.tld with key in /etc/mail/domainkey.key using&lt;/span&gt;
&lt;span class="c1"&gt;# selector '2007' (e.g. 2007._domainkey.domain.tld)&lt;/span&gt;
&lt;span class="nv"&gt;DAEMON_OPTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$DAEMON_OPTS&lt;/span&gt;&lt;span class="s2"&gt; -d syslog.tv -s /etc/mail/dk.key -S mail"&lt;/span&gt;
&lt;span class="c1"&gt;# See dk-filter(8) for a complete list of options&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Uncomment to specify an alternate socket&lt;/span&gt;
&lt;span class="c1"&gt;#SOCKET="/var/run/dk-filter/dk-filter.sock" # default&lt;/span&gt;
&lt;span class="c1"&gt;#SOCKET="inet:54321" # listen on all interfaces on port 54321&lt;/span&gt;
&lt;span class="c1"&gt;#SOCKET="inet:8892@localhost" # listen on loopback on port 8892&lt;/span&gt;
&lt;span class="nv"&gt;SOCKET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"inet:12345@localhost"&lt;/span&gt; &lt;span class="c1"&gt;# listen on loopback on port 12345&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You should notice that I specifically told the daemon to run on loopback
on port 12345, you should do the same, if you already have something
running on that port (like &lt;span class="caps"&gt;DKIM&lt;/span&gt;, which uses the same port in my other
guide,) you should set this to something different, like 12346.&lt;/p&gt;
&lt;p&gt;On Debian Sid I had problems with DAEMON_OPTS, for some reason the
second DAEMON_OPTS was not overwriting and including the first, so I
modified it to look like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Sane defaults: log to syslog&lt;/span&gt;
&lt;span class="c1"&gt;#DAEMON_OPTS="-l"&lt;/span&gt;
&lt;span class="c1"&gt;# Sign for domain.tld with key in /etc/mail/domainkey.key using&lt;/span&gt;
&lt;span class="c1"&gt;# selector '2007' (e.g. 2007._domainkey.domain.tld)&lt;/span&gt;
&lt;span class="nv"&gt;DAEMON_OPTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"-l -d syslog.tv -s /etc/mail/dk.key -S mail"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The problem meant that when the daemon was actually started, it would
not know which domain, key or selector to use, doing the above solved
this issue for me.&lt;/p&gt;
&lt;p&gt;Now that dk-filter is configured, we can start it&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /etc/init.d/dk-filter start
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="configuring-postfix"&gt;
&lt;h2&gt;Configuring Postfix&lt;/h2&gt;
&lt;p&gt;Next we need to modify Postfix to tell it to use dk-filter to sign
emails. Lets open up&lt;/p&gt;
&lt;blockquote&gt;
/etc/postfix/main.cf&lt;/blockquote&gt;
&lt;p&gt;Place the following as the end of that file&lt;/p&gt;
&lt;pre class="literal-block"&gt;
milter_default_action = accept
milter_protocol = 6
smtpd_milters = inet:localhost:12345
non_smtpd_milters = inet:localhost:12345
&lt;/pre&gt;
&lt;p&gt;If you’ve already got this defined you simple append to the end,
separating with commas&lt;/p&gt;
&lt;pre class="literal-block"&gt;
milter_default_action = accept
milter_protocol = 6
smtpd_milters = inet:localhost:12345, inet:localhost:12346
non_smtpd_milters = inet:localhost:12345, inet:localhost:12346
&lt;/pre&gt;
&lt;p&gt;That’s Postfix configured, we’ll reload it once the &lt;span class="caps"&gt;DNS&lt;/span&gt; is configured.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="configuring-the-dns"&gt;
&lt;h2&gt;Configuring the &lt;span class="caps"&gt;DNS&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;How you configured your &lt;span class="caps"&gt;DNS&lt;/span&gt; is up to you, you will need to add the
following 2 new records&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;_domainkey.&lt;span class="caps"&gt;DOMAIN&lt;/span&gt;.&lt;span class="caps"&gt;TLD&lt;/span&gt;. &lt;span class="caps"&gt;IN&lt;/span&gt; &lt;span class="caps"&gt;TXT&lt;/span&gt; “t=y; o=-;”&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;SELECTOR&lt;/span&gt;._domainkey.&lt;span class="caps"&gt;DOMAIN&lt;/span&gt;.&lt;span class="caps"&gt;TLD&lt;/span&gt;. &lt;span class="caps"&gt;IN&lt;/span&gt; &lt;span class="caps"&gt;TXT&lt;/span&gt; “k=rsa; t=y; p=YOUR_PUBLIC_KEY_HERE”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Replace the instances of &lt;strong&gt;&lt;span class="caps"&gt;DOMAIN&lt;/span&gt;.&lt;span class="caps"&gt;TLD&lt;/span&gt;&lt;/strong&gt; with your actual mail domain
name in both records, &lt;strong&gt;&lt;span class="caps"&gt;SELECTOR&lt;/span&gt;&lt;/strong&gt; was configured in to opendkim
earlier, in my example I used &lt;strong&gt;mail&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Your key will be called public.key, we created both public and private
keys earlier. You only need to add the actual key from between the &lt;span class="caps"&gt;BEGIN&lt;/span&gt;
and &lt;span class="caps"&gt;END&lt;/span&gt; lines, e.g. my test one below&lt;/p&gt;
&lt;pre class="literal-block"&gt;
-----BEGIN PUBLIC KEY-----
MIGfMWGwregWREGREwgERGREGergerDGdEPzFCAdYnf1Z9nRtfTqwP/mcdGg
NmbY11tCtwwFMu8/qEQwaK/Nc61q0D/z7NYwlsPFi08lnVSHGrewherh5630n
F6S0z961h6li/pOHiJy/l2ehnenhehO3d/NmATY90WlpEDmnlVAMTYgALBFJplp
1ruZ66Bgrewhg43y634567gewrgB
-----END PUBLIC KEY-----
&lt;/pre&gt;
&lt;p&gt;Becomes&lt;/p&gt;
&lt;p&gt;:&lt;/p&gt;
&lt;blockquote&gt;
MIGfMWGwregWREGREwgERGREGerg […snip…] plp1ruZ66Bgrewhg43y634567gewrgB&lt;/blockquote&gt;
&lt;p&gt;Now we simply reload the Postfix config with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /etc/init.d/postfix reload
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now you can send test mails once you’re sure &lt;span class="caps"&gt;DNS&lt;/span&gt; changes have
propagated. You will see any errors in &lt;strong&gt;/var/log/mail.log&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="tutorials"></category><category term="debian"></category><category term="dkim"></category><category term="domainkeys"></category><category term="howto"></category><category term="mail"></category><category term="postfix"></category><category term="ubuntu"></category></entry><entry><title>HOWTO: Using SPF to validate outgoing mail</title><link href="https://kura.gg/2010/02/11/howto-using-spf-to-validate-outgoing-mail/" rel="alternate"></link><published>2010-02-11T18:25:00+00:00</published><updated>2010-02-11T18:25:00+00:00</updated><author><name>kura</name></author><id>tag:kura.gg,2010-02-11:/2010/02/11/howto-using-spf-to-validate-outgoing-mail/</id><summary type="html">
&lt;p&gt;You can get a basic overview on what &lt;span class="caps"&gt;SPF&lt;/span&gt; is, what it’s for and it’s more
advanced usages here - &lt;a class="reference external" href="https://www.openspf.org/"&gt;https://www.openspf.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This article is to give only a basic insight in to how you can use an
&lt;span class="caps"&gt;SPF&lt;/span&gt; record to valid mail from your servers.&lt;/p&gt;
&lt;div class="section" id="the-dns"&gt;
&lt;h2&gt;The &lt;span class="caps"&gt;DNS&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class="caps"&gt;SPF&lt;/span&gt; records work from your &lt;span class="caps"&gt;DNS&lt;/span&gt;, it’s really simple. Technically there is
a &lt;span class="caps"&gt;DNS&lt;/span&gt; type defined for &lt;span class="caps"&gt;SPF&lt;/span&gt; records as of &lt;a class="reference external" href="https://tools.ietf.org/html/rfc4408"&gt;&lt;span class="caps"&gt;RFC&lt;/span&gt; 4408&lt;/a&gt;, but since not all
servers recognise this type it also works in the &lt;span class="caps"&gt;TXT&lt;/span&gt; type.&lt;/p&gt;
&lt;p&gt;A simple usage of &lt;span class="caps"&gt;SPF&lt;/span&gt; is&lt;/p&gt;
&lt;pre class="literal-block"&gt;
v=spf1 a mx -all
&lt;/pre&gt;
&lt;p&gt;Imagine this exists on this domain, &lt;strong&gt;syslog.tv&lt;/strong&gt;. This spf record would
mean that &lt;span class="caps"&gt;ALL&lt;/span&gt; &lt;span class="caps"&gt;AN&lt;/span&gt; and &lt;span class="caps"&gt;MX&lt;/span&gt; servers listed in the &lt;span class="caps"&gt;DNS&lt;/span&gt; records of syslog.tv
would be valid senders.&lt;/p&gt;
&lt;p&gt;The hypen (-) before &lt;em&gt;all&lt;/em&gt; means that if the mail appears to be coming
from a server that isn …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
&lt;p&gt;You can get a basic overview on what &lt;span class="caps"&gt;SPF&lt;/span&gt; is, what it’s for and it’s more
advanced usages here - &lt;a class="reference external" href="https://www.openspf.org/"&gt;https://www.openspf.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This article is to give only a basic insight in to how you can use an
&lt;span class="caps"&gt;SPF&lt;/span&gt; record to valid mail from your servers.&lt;/p&gt;
&lt;div class="section" id="the-dns"&gt;
&lt;h2&gt;The &lt;span class="caps"&gt;DNS&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;span class="caps"&gt;SPF&lt;/span&gt; records work from your &lt;span class="caps"&gt;DNS&lt;/span&gt;, it’s really simple. Technically there is
a &lt;span class="caps"&gt;DNS&lt;/span&gt; type defined for &lt;span class="caps"&gt;SPF&lt;/span&gt; records as of &lt;a class="reference external" href="https://tools.ietf.org/html/rfc4408"&gt;&lt;span class="caps"&gt;RFC&lt;/span&gt; 4408&lt;/a&gt;, but since not all
servers recognise this type it also works in the &lt;span class="caps"&gt;TXT&lt;/span&gt; type.&lt;/p&gt;
&lt;p&gt;A simple usage of &lt;span class="caps"&gt;SPF&lt;/span&gt; is&lt;/p&gt;
&lt;pre class="literal-block"&gt;
v=spf1 a mx -all
&lt;/pre&gt;
&lt;p&gt;Imagine this exists on this domain, &lt;strong&gt;syslog.tv&lt;/strong&gt;. This spf record would
mean that &lt;span class="caps"&gt;ALL&lt;/span&gt; &lt;span class="caps"&gt;AN&lt;/span&gt; and &lt;span class="caps"&gt;MX&lt;/span&gt; servers listed in the &lt;span class="caps"&gt;DNS&lt;/span&gt; records of syslog.tv
would be valid senders.&lt;/p&gt;
&lt;p&gt;The hypen (-) before &lt;em&gt;all&lt;/em&gt; means that if the mail appears to be coming
from a server that isn’t listen in syslog.tv’s &lt;span class="caps"&gt;DNS&lt;/span&gt; records then the
check should fail.&lt;/p&gt;
&lt;div class="section" id="mechanisms"&gt;
&lt;h3&gt;Mechanisms&lt;/h3&gt;
&lt;p&gt;+=============+=============================================================================================================+
| Mechanism   | Description                                                                                                 |
| +=============+===========================================================================================================+
| &lt;strong&gt;&lt;span class="caps"&gt;ALL&lt;/span&gt;&lt;/strong&gt;     | Matches always                                                                                              |
+——————-+——————————————————————————————————————————————————————-+
| &lt;strong&gt;A&lt;/strong&gt;       | If the domain name has an A (or &lt;span class="caps"&gt;AAAA&lt;/span&gt; for IPv6) record corresponding to the sender’s address, it will match. |
+——————-+——————————————————————————————————————————————————————-+
| &lt;strong&gt;&lt;span class="caps"&gt;IP4&lt;/span&gt;&lt;/strong&gt;     | If the sender is in a given IPv4 range, match.                                                              |
+——————-+——————————————————————————————————————————————————————-+
| &lt;strong&gt;&lt;span class="caps"&gt;IP6&lt;/span&gt;&lt;/strong&gt;     | If the sender is in a given IPv6 range, match.                                                              |
+——————-+——————————————————————————————————————————————————————-+
| &lt;strong&gt;&lt;span class="caps"&gt;MX&lt;/span&gt;&lt;/strong&gt;      | If the domain name has an &lt;span class="caps"&gt;MX&lt;/span&gt; record resolving to the sender’s address, it will match.                       |
+——————-+——————————————————————————————————————————————————————-+
| &lt;strong&gt;&lt;span class="caps"&gt;PTR&lt;/span&gt;&lt;/strong&gt;     | If the &lt;span class="caps"&gt;RDNS&lt;/span&gt; domain of the sending &lt;span class="caps"&gt;IP&lt;/span&gt; ending in the domain name.                                             |
+——————-+——————————————————————————————————————————————————————-+
| &lt;strong&gt;&lt;span class="caps"&gt;EXISTS&lt;/span&gt;&lt;/strong&gt;  | If the given domain resolves, matches.                                                                      |
+——————-+——————————————————————————————————————————————————————-+
| &lt;strong&gt;&lt;span class="caps"&gt;INCLUDE&lt;/span&gt;&lt;/strong&gt; | If the included policy passes the test this mechanism matches.                                              | +——————-+——————————————————————————————————————————————————————-+&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="qualifiers"&gt;
&lt;h3&gt;Qualifiers&lt;/h3&gt;
&lt;p&gt;+===========+=====================================================+
| Qualifier | Description                                         |
+===========+=====================================================+
| &lt;strong&gt;+&lt;/strong&gt;     | &lt;span class="caps"&gt;PASS&lt;/span&gt; result.                                        |
+—————-+——————————————————————————-+
| &lt;strong&gt;?&lt;/strong&gt;     | &lt;span class="caps"&gt;NEUTRAL&lt;/span&gt; result interpreted like no policy.          |
+—————-+——————————————————————————-+
| &lt;strong&gt;~&lt;/strong&gt;     | &lt;span class="caps"&gt;SOFTFAIL&lt;/span&gt;, a debugging aid between &lt;span class="caps"&gt;NEUTRAL&lt;/span&gt; and &lt;span class="caps"&gt;FAIL&lt;/span&gt;. |
+—————-+——————————————————————————-+
| &lt;strong&gt;-&lt;/strong&gt;     | &lt;span class="caps"&gt;FAIL&lt;/span&gt;, the mail should be rejected.                  | +—————-+——————————————————————————-+&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="more-examples"&gt;
&lt;h2&gt;More examples&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
v=spf1 include:google.com -all
&lt;/pre&gt;
&lt;p&gt;Include &lt;span class="caps"&gt;SPF&lt;/span&gt; records from the domain &lt;strong&gt;google.com&lt;/strong&gt; and pass if record
matches any from the include, failing if it doesn’t.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
v=spf1 exists:syslog.tv
&lt;/pre&gt;
&lt;p&gt;If syslog.tv resolves, pass.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
v=spf mx ~all
&lt;/pre&gt;
&lt;p&gt;If record matches against an &lt;span class="caps"&gt;MX&lt;/span&gt; record for the domain in the &lt;span class="caps"&gt;DNS&lt;/span&gt;, pass,
if not then neutrally fail but still be accepted.&lt;/p&gt;
&lt;p&gt;Hopefully this basic guide is helpful, &lt;span class="caps"&gt;SPF&lt;/span&gt; records are very useful and
we use them a lot at work across our mail platform, going so far as to
get clients to include our &lt;span class="caps"&gt;SPF&lt;/span&gt; records in their &lt;span class="caps"&gt;DNS&lt;/span&gt; to ensure no
failures when they send email via our servers.&lt;/p&gt;
&lt;/div&gt;
</content><category term="tutorials"></category><category term="howto"></category><category term="mail"></category></entry><entry><title>HOWTO: IPTables on Debian/Ubuntu</title><link href="https://kura.gg/2010/02/11/howto-iptables-on-debian-ubuntu/" rel="alternate"></link><published>2010-02-11T16:51:00+00:00</published><updated>2010-02-11T16:51:00+00:00</updated><author><name>kura</name></author><id>tag:kura.gg,2010-02-11:/2010/02/11/howto-iptables-on-debian-ubuntu/</id><summary type="html">
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;Simple, if it’s not installed already then run the following commands&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install iptables
sudo /etc/init.d/iptables start
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The safest and best way of configuring iptables, in my opinion, is to
have two files. The first is a temporary/test set that you will save to
first, the second is the actual rule set that will be loaded to iptables.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="configuration"&gt;
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;So, first we’ll create an empty temp rules file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo touch /etc/iptables.temp.rules
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add some simple rules to it:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
*filter
# Allows all loopback traffic and drop all traffic to 127/8 that doesn't use lo

-A INPUT -i lo -j ACCEPT
-A INPUT ! -i lo -d 127.0.0.0/8 -j REJECT

# Accepts all established inbound connections
-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

# Allows all outbound traffic
-A OUTPUT -j ACCEPT

#SSH
-A INPUT -p tcp -m …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;Simple, if it’s not installed already then run the following commands&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install iptables
sudo /etc/init.d/iptables start
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The safest and best way of configuring iptables, in my opinion, is to
have two files. The first is a temporary/test set that you will save to
first, the second is the actual rule set that will be loaded to iptables.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="configuration"&gt;
&lt;h2&gt;Configuration&lt;/h2&gt;
&lt;p&gt;So, first we’ll create an empty temp rules file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo touch /etc/iptables.temp.rules
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Add some simple rules to it:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
*filter
# Allows all loopback traffic and drop all traffic to 127/8 that doesn't use lo

-A INPUT -i lo -j ACCEPT
-A INPUT ! -i lo -d 127.0.0.0/8 -j REJECT

# Accepts all established inbound connections
-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

# Allows all outbound traffic
-A OUTPUT -j ACCEPT

#SSH
-A INPUT -p tcp -m tcp --dport 22 -j ACCEPT
#HTTP
-A INPUT -p tcp -m tcp --dport 80 -j ACCEPT
#HTTPS
-A INPUT -p tcp -m tcp --dport 443 -j ACCEPT
#SMTP
-A INPUT -p tcp -m tcp --dport 25 -j ACCEPT
#IMAP
-A INPUT -p tcp -m tcp --dport 143 -j ACCEPT
#POP3
-A INPUT -p tcp -m tcp --dport 110 -j ACCEPT
#PING
-A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT

# Log
-I INPUT 5 -m limit --limit 5/min -j LOG --log-prefix "iptables denied: " --log-level 7

# Reject all other inbound - default deny unless explicitly allowed
policy
-A INPUT -j REJECT
-A FORWARD -j REJECT

COMMIT
&lt;/pre&gt;
&lt;p&gt;Next we apply this rule set to the currently running iptables instance&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo iptables-restore &amp;lt; /etc/iptables.temp.rules
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Check to make sure they loaded correctly&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo iptables -L
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If everything looks &lt;span class="caps"&gt;OK&lt;/span&gt; and ready to go then we simply save, this time to
the secondary file that I mentioned earlier&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo iptables-save &amp;gt; /etc/iptables.up.rules
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="network-interface-configuration"&gt;
&lt;h2&gt;Network interface configuration&lt;/h2&gt;
&lt;p&gt;Open up the following file with your favourite editor&lt;/p&gt;
&lt;blockquote&gt;
/etc/network/interfaces&lt;/blockquote&gt;
&lt;p&gt;Find the following lines:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
auto lo
iface lo inet loopback
&lt;/pre&gt;
&lt;p&gt;And add this to the end&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pre-up iptables-restore &amp;lt; /etc/iptables.up.rules
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So that it becomes&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;auto lo
iface lo inet loopback
    pre-up iptables-restore &amp;lt; /etc/iptables.up.rules
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will restore your custom set of iptables rules when it instantiates
the network devices.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-future"&gt;
&lt;h2&gt;The future&lt;/h2&gt;
&lt;p&gt;When you need to add more rules in the future, simply add them to your
iptables.temp.rules set, load them in to iptables as shown, if
everything looks good then save to iptables.up.rules&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Please note; this is only an extremely basic rule set and will need to
be improved upon by you or another sys admin in your team to properly
secure your server.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="tutorials"></category><category term="debian"></category><category term="howto"></category><category term="iptables"></category><category term="networking"></category><category term="security"></category><category term="ubuntu"></category></entry><entry><title>nginx, proxy_cache and reverse proxying explained &amp; benchmarked</title><link href="https://kura.gg/2010/02/07/nginx-proxy_cache-and-explained-benchmarked/" rel="alternate"></link><published>2010-02-07T10:27:00+00:00</published><updated>2010-02-07T10:27:00+00:00</updated><author><name>kura</name></author><id>tag:kura.gg,2010-02-07:/2010/02/07/nginx-proxy_cache-and-explained-benchmarked/</id><summary type="html">
&lt;div class="section" id="the-beginning"&gt;
&lt;h2&gt;The beginning&lt;/h2&gt;
&lt;p&gt;Where to begin? nginx would be a good start I suppose. It’s far easier
and makes much for sense for you to actually read about nginx from it’s
own website - &lt;a class="reference external" href="https://nginx.org/en/"&gt;https://nginx.org/en/&lt;/a&gt; - but just to give a simple
explanation too; `nginx is king of static content &lt;span class="caps"&gt;HTTP&lt;/span&gt; servers.`&lt;/p&gt;
&lt;p&gt;Anyone that has dealt with Apache on medium to high traffic websites
will know that Apache is bit of a `wheezy, old geezer` when it comes
to content serving using it’s mpm-worker (threaded). Very often high
traffic will cause server load to go through the roof but for serving
dynamic content, there really is no better &lt;span class="caps"&gt;HTTP&lt;/span&gt; server than Apache, so
this leaves us in a bit of a predicament; a high powered website with
dynamic content and lots of static files like &lt;span class="caps"&gt;JS&lt;/span&gt;, &lt;span class="caps"&gt;CSS&lt;/span&gt; and imagery, what
do we do?!&lt;/p&gt;
&lt;p&gt;In this example `dynamic …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
&lt;div class="section" id="the-beginning"&gt;
&lt;h2&gt;The beginning&lt;/h2&gt;
&lt;p&gt;Where to begin? nginx would be a good start I suppose. It’s far easier
and makes much for sense for you to actually read about nginx from it’s
own website - &lt;a class="reference external" href="https://nginx.org/en/"&gt;https://nginx.org/en/&lt;/a&gt; - but just to give a simple
explanation too; `nginx is king of static content &lt;span class="caps"&gt;HTTP&lt;/span&gt; servers.`&lt;/p&gt;
&lt;p&gt;Anyone that has dealt with Apache on medium to high traffic websites
will know that Apache is bit of a `wheezy, old geezer` when it comes
to content serving using it’s mpm-worker (threaded). Very often high
traffic will cause server load to go through the roof but for serving
dynamic content, there really is no better &lt;span class="caps"&gt;HTTP&lt;/span&gt; server than Apache, so
this leaves us in a bit of a predicament; a high powered website with
dynamic content and lots of static files like &lt;span class="caps"&gt;JS&lt;/span&gt;, &lt;span class="caps"&gt;CSS&lt;/span&gt; and imagery, what
do we do?!&lt;/p&gt;
&lt;p&gt;In this example `dynamic content` means content that is drawn from the
&lt;span class="caps"&gt;SQL&lt;/span&gt; &lt;span class="caps"&gt;DB&lt;/span&gt; and used to generate pages using &lt;span class="caps"&gt;PHP&lt;/span&gt;; pages of products, category
trees, etc, a typical ecommerce platform.&lt;/p&gt;
&lt;p&gt;I opted to use nginx to reverse proxy to Apache and serve up just the
static content through nginx itself long ago and, looking down through
the `Related Posts` section of this page you will find at least half a
dozen articles about it, including my original article on how to get
nginx to actually reverse proxy and use &lt;span class="caps"&gt;WP&lt;/span&gt;-Super-Cache to actually
generate cached &lt;span class="caps"&gt;HTML&lt;/span&gt; content that nginx could serve. This article takes
that further.&lt;/p&gt;
&lt;p&gt;If you’ve not read the aforementioned article I would strongly suggest
you do before continuing with this one - &lt;a class="reference external" href="/2010/01/11/debian-apache-2-nginx-wordpress-mu/"&gt;Debian, Apache 2, Nginx, WordPress &lt;span class="caps"&gt;MU&lt;/span&gt; &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; &lt;span class="caps"&gt;WP&lt;/span&gt;-Super-Cache&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="everything-has-changed"&gt;
&lt;h2&gt;Everything has changed?&lt;/h2&gt;
&lt;p&gt;So now that you’ve read that it’s time to explain what’s different and,
quite simply, everything is. Everything? Everything.&lt;/p&gt;
&lt;p&gt;Gone are the location checks and file checks, all replaced with several
lines that tell nginx that it needs to cache the page content.&lt;/p&gt;
&lt;p&gt;Before I get stuck in on the changes it’s worth pointing out that this
is only possible with version of nginx &amp;gt;= 0.7.65 and within the 0.8.*
branch. According to the nginx website there was a bug in the proxy
caching engine that meant nginx would ignore comma separate cache
controls. So upgrade before attempting this.&lt;/p&gt;
&lt;p&gt;Back to the changes, lets take a look at a small change I made to the
actual nginx main configuration file, on Debian/Ubuntu this is in&lt;/p&gt;
&lt;blockquote&gt;
/etc/nginx/nginx.conf&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;proxy_cache_path&lt;/span&gt; &lt;span class="s"&gt;/var/www/syslog.tv/cache&lt;/span&gt; &lt;span class="s"&gt;levels=1:2&lt;/span&gt; &lt;span class="s"&gt;keys_zone=one:8m&lt;/span&gt; &lt;span class="s"&gt;max_size=1000m&lt;/span&gt; &lt;span class="s"&gt;inactive=600m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;proxy_temp_path&lt;/span&gt; &lt;span class="s"&gt;/tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These 2 lines need to be within the main nginx configuration before any
of your server {} definitions, otherwise nginx’s config test will fail
and nginx won’t start.&lt;/p&gt;
&lt;p&gt;The biggest chain was in this site’s server definition, it now looks
like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="n"&gt;174.143.241.61&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;syslog.tv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;access_log&lt;/span&gt; &lt;span class="s"&gt;/var/log/nginx/syslog.tv.access.log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="s"&gt;/var/www/syslog.tv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;#the path to your actual site, used for serving static files&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_redirect&lt;/span&gt; &lt;span class="no"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;Host&lt;/span&gt; &lt;span class="nv"&gt;$host&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;X-Real-IP&lt;/span&gt; &lt;span class="nv"&gt;$remote_addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;X-Forwarded-For&lt;/span&gt; &lt;span class="nv"&gt;$proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_cache&lt;/span&gt; &lt;span class="no"&gt;on&lt;/span&gt;&lt;span class="s"&gt;e&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_cache_key&lt;/span&gt; &lt;span class="s"&gt;syslog.tv&lt;/span&gt;&lt;span class="nv"&gt;$request_uri&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_cache_valid&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="mi"&gt;302&lt;/span&gt; &lt;span class="mi"&gt;60m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_cache_valid&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt; &lt;span class="mi"&gt;1m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;https://apache.syslog.tv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The server definition should be relatively easy to understand, we have
the general listen, server_name, access_log and root which are used
everywhere, the only difference now is that I am serving root from
/var/www/syslog.tv/cache which is where nginx is configured to store
it’s cache.&lt;/p&gt;
&lt;p&gt;We set several proxy specific options, proxy_redirect and three
proxy_set_header instances, these are really quite self explanatory;
do not redirect proxy requests, ever and the three headers are passed
over to Apache so it is able to properly log access and see the original
&lt;span class="caps"&gt;IP&lt;/span&gt; rather than seeing nginx’s &lt;span class="caps"&gt;IP&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;The new and important part is from proxy_cache down to proxy_pass,
proxy_pass exists in my original config file but here it is now used in
conjunction with proxy_cache, which sets the zone (zone definition are
in the two lines added to nginx.conf), set the key, sets some timers on
valid responses, in this case 200, 302 and 404 and then passed back to
Apache with proxy_pass.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="so-what-does-it-do"&gt;
&lt;h2&gt;So what does it do?&lt;/h2&gt;
&lt;p&gt;I’m going to assume that you’re with me so far if you’re reading this,
I’ve not lost you or anything, I hope.&lt;/p&gt;
&lt;p&gt;So what is the point of this? What does it do?&lt;/p&gt;
&lt;p&gt;It’s really quite simple; this tells nginx to cache all proxy responses
when they meet the response type requirements for the times defined,
that’s it.&lt;/p&gt;
&lt;p&gt;When nginx loads it will automatically look for a cached version
residing in our root directory before even thinking about reverse
proxying back to Apache, if it finds a cached variant that is still
valid it will serve it, if not it will proxy back to Apache which
generates our page content, which nginx serves and then caches. This
means that the load on Apache is greatly reduced and I mean &lt;strong&gt;greatly&lt;/strong&gt; reduced.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="controlling-the-cache"&gt;
&lt;h2&gt;Controlling the cache&lt;/h2&gt;
&lt;p&gt;The best thing about this setup is how you actually control what gets
cached. Headers. It’s as simple as that.
These are basic &lt;span class="caps"&gt;HTTP&lt;/span&gt; Cache-Control headers:&lt;/p&gt;
&lt;blockquote&gt;
Cache-Control: private, max-age=0&lt;/blockquote&gt;
&lt;p&gt;The one above sets Cache-Control to private with a max-age of 0 and the
one below sets to public with a max age of one hour.&lt;/p&gt;
&lt;blockquote&gt;
Cache-Control: public, max-age=3600&lt;/blockquote&gt;
&lt;p&gt;nginx will respect these headers and handle the caching accordingly, you
can set these headers through &lt;span class="caps"&gt;PHP&lt;/span&gt; and have pages not get cached, you can
even use .htaccess to set the headers on specific directories, files or
file extensions or you could even just set them in your site’s server
definition. Amazing stuff.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-numbers"&gt;
&lt;h2&gt;The numbers&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
Benchmarking this setup actually scared me, I was completely amazed
out how well nginx performed.
Benchmarking syslog.tv (be patient)
...
Finished 10000 requests

Server Software: nginx/0.7.65
Server Hostname: syslog.tv
Server Port: 80
...
Concurrency Level: 200
Time taken for tests: 93.371 seconds
Complete requests: 10000
Failed requests: 0
Write errors: 0
Total transferred: 74634408 bytes
HTML transferred: 72015948 bytes
Requests per second: 107.10 [#/sec] (mean)
Time per request: 1867.419 [ms] (mean)
Time per request: 9.337 [ms] (mean, across all concurrent requests)
Transfer rate: 780.60 [Kbytes/sec] received

Connection Times (ms)
min mean[+/-sd] median max
Connect: 10 611 245.9 600 3640
Processing: 70 1238 142.0 1250 5100
Waiting: 70 611 100.5 600 4100
Total: 80 1849 266.2 1860 6240

Percentage of the requests served within a certain time (ms)
50% 1860
66% 1860
75% 1860
80% 1880
90% 1880
95% 1900
98% 1920
99% 2260
100% 6240 (longest request)
&lt;/pre&gt;
&lt;p&gt;That is very good, the server this website runs on is very underpowered,
&lt;span class="caps"&gt;256MB&lt;/span&gt; of &lt;span class="caps"&gt;RAM&lt;/span&gt;, single virtual core just in case anyone thinks I cheated
and used a 32 core machine.&lt;/p&gt;
&lt;p&gt;What is also worth mentioning is the load average&lt;/p&gt;
&lt;blockquote&gt;
load average: 0.08, 0.06, 0.03&lt;/blockquote&gt;
&lt;p&gt;I’m hoping your eyes are as wide as mine were when I saw this average,
200 concurrent connections on nginx and the load average doesn’t go
above 0.08 the whole time. It served 10,000 requests with 0 failures,
200 at a time in 93.371 seconds…&lt;/p&gt;
&lt;p&gt;I tried the same with proxy_caching disable and also directly against
Apache, both times with a KeepAlive On and KeepAliveTimeOut 5 Apache
fell over, load went through the roof and I had to hard reset the server
both times. Apache couldn’t even handle 50 concurrent requests, let
alone 200.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-conclusion"&gt;
&lt;h2&gt;The conclusion&lt;/h2&gt;
&lt;p&gt;The conclusion is simple for me; I love nginx and will continue to use
it as much as I can to increase performance, this does not mean I have
any dislike for Apache at all, in fact I know very well that to do
things well in this field you need to have multiple systems in place to
handle multiple things, especially with high traffic sites.&lt;/p&gt;
&lt;p&gt;For me the future is simple, cache as much content as I possibly can and
use nginx to serve it.&lt;/p&gt;
&lt;p&gt;The next steps for me will be using Varnish for caching, nginx for load
balancing and also trying caching content to Memcached. As always
finding will be reported here.&lt;/p&gt;
&lt;/div&gt;
</content><category term="tutorials"></category><category term="apache"></category><category term="cache"></category><category term="debian"></category><category term="howto"></category><category term="nginx"></category><category term="php"></category><category term="ubuntu"></category><category term="wordpress"></category></entry><entry><title>Using nginx, Varnish and Apache</title><link href="https://kura.gg/2010/02/06/using-nginx-varnish-and-apache/" rel="alternate"></link><published>2010-02-06T10:36:00+00:00</published><updated>2010-02-06T10:36:00+00:00</updated><author><name>kura</name></author><id>tag:kura.gg,2010-02-06:/2010/02/06/using-nginx-varnish-and-apache/</id><summary type="html">
&lt;div class="section" id="the-problem"&gt;
&lt;h2&gt;The problem&lt;/h2&gt;
&lt;p&gt;So lets get to the problem first. I have several lightly to medium
loaded sites running on some virtual servers, they servers themselves
are highly configured to run beautifully on our host environments, very,
very &lt;span class="caps"&gt;RAM&lt;/span&gt; intensive but low disk I/O and low &lt;span class="caps"&gt;CPU&lt;/span&gt; usage.&lt;/p&gt;
&lt;p&gt;As mentioned, the sites are relatively low loaded, they’ll generally
hang around at between 3,000-5,000 unique hits a day and are run through
Apache using &lt;span class="caps"&gt;PHP&lt;/span&gt;, various &lt;span class="caps"&gt;PHP&lt;/span&gt; modules and MySQL, a simple generic &lt;span class="caps"&gt;LAMP&lt;/span&gt;
environment, yet customised to suit it’s surroundings and host.&lt;/p&gt;
&lt;p&gt;The sites themselves run fine on that setup, no issues at all on normal
days, but on set days of the week these sites can double in unique hits
or even more than double, with KeepAlive enabled and a KeepAliveTimeout
set low Apache has problems handling this kind of load (I should point
out …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
&lt;div class="section" id="the-problem"&gt;
&lt;h2&gt;The problem&lt;/h2&gt;
&lt;p&gt;So lets get to the problem first. I have several lightly to medium
loaded sites running on some virtual servers, they servers themselves
are highly configured to run beautifully on our host environments, very,
very &lt;span class="caps"&gt;RAM&lt;/span&gt; intensive but low disk I/O and low &lt;span class="caps"&gt;CPU&lt;/span&gt; usage.&lt;/p&gt;
&lt;p&gt;As mentioned, the sites are relatively low loaded, they’ll generally
hang around at between 3,000-5,000 unique hits a day and are run through
Apache using &lt;span class="caps"&gt;PHP&lt;/span&gt;, various &lt;span class="caps"&gt;PHP&lt;/span&gt; modules and MySQL, a simple generic &lt;span class="caps"&gt;LAMP&lt;/span&gt;
environment, yet customised to suit it’s surroundings and host.&lt;/p&gt;
&lt;p&gt;The sites themselves run fine on that setup, no issues at all on normal
days, but on set days of the week these sites can double in unique hits
or even more than double, with KeepAlive enabled and a KeepAliveTimeout
set low Apache has problems handling this kind of load (I should point
out that Apache only starts to struggle if there are a lot of concurrent
requests or if there’s a lot of &lt;span class="caps"&gt;SSL&lt;/span&gt; activity).&lt;/p&gt;
&lt;p&gt;We’re serving a lot of static content with each request, at least half a
dozen &lt;span class="caps"&gt;CSS&lt;/span&gt; files and half a dozen &lt;span class="caps"&gt;JS&lt;/span&gt; files, literally dozens of images
and this will increase depending on the pages you’re viewing and to top
it all off, an entire subset of pages that use &lt;span class="caps"&gt;SSL&lt;/span&gt; with obviously all
assets being run through &lt;span class="caps"&gt;SSL&lt;/span&gt; too.&lt;/p&gt;
&lt;p&gt;So now we have a problem, even with double the average load on a single
server with all those assets we’re greatly increasing the strain on
Apache, Apache can handle it but the server isn’t very happy so I have
to make a decision, do I load balance Apache or do I set up a way of
serving static content through an &lt;span class="caps"&gt;HTTPD&lt;/span&gt; that is designed for it?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-first-solution"&gt;
&lt;h2&gt;The first solution&lt;/h2&gt;
&lt;p&gt;The choice was simple, we serve static content through nginx, much like
I do with this blog but even more restrictive since this whole blog is cached.&lt;/p&gt;
&lt;p&gt;This is relatively easy and is covered in other blog post that should be
linked in the “related posts” section below, I successfully configured
nginx to reverse proxy connections back to when the content was non
static, i.e. &lt;span class="caps"&gt;PHP&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;This in itself yielded a much higher rate of requests/second because
nginx was doing a lot of the grunt work, not content with this though I
wanted to actually cache the dynamic pages that were hit the most. This
was the homepage, various offer pages and some other site-specific pages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-second-solution"&gt;
&lt;h2&gt;The second solution&lt;/h2&gt;
&lt;p&gt;The next step of this, as mentioned above is to get some caching in
place, I’ve had experience caching proxy requests using nginx, as
mentioned above this blog uses the same configuration but is very less
restrictive, it literally caches everything except my admin pages. This
is not at all viable on these websites due to dynamic user content etc.&lt;/p&gt;
&lt;p&gt;So the next step was to introduce conditional nginx caching.&lt;/p&gt;
&lt;p&gt;I was rather unsure of exactly how to achieve this but the nginx forums
yielded amazingly useful information (&lt;a class="reference external" href="https://forum.nginx.org/"&gt;https://forum.nginx.org/&lt;/a&gt;) which
helped me create a very simple caching mechanism; a user hits the
website, all content is served by nginx which reverse proxies dynamic
content to Apache, the page content is cached when a user does not have
a login session cookie and any other requests to this page will serve
the cached version which dies after 1 hour, when a user does have a
login session cookie nginx does not serve the cached content but
continues to reverse proxy to Apache. Simple.&lt;/p&gt;
&lt;p&gt;This in itself is still untested on the testing environment because I
only completed it at 2am &lt;span class="caps"&gt;GMT&lt;/span&gt; and was rather tired at the time. I have
high hopes for it though, but it doesn’t stop there…&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-final-phase"&gt;
&lt;h2&gt;The final phase&lt;/h2&gt;
&lt;p&gt;The final phase is still on my planning board and is probably overkill
for what we need, but it doesn’t hurt to test things and the techie in
me is desperate to waste more of my free time on squeezing as much
performance out of our applications as I can. And, to be perfectly
honest, we may need something like this in the future for some much
higher traffic sites or to port older, high traffic sites on to.&lt;/p&gt;
&lt;p&gt;So what’s the plan? &lt;strong&gt;Varnish&lt;/strong&gt;. Not the kind you use on wood or on your
nails but a very powerful &lt;span class="caps"&gt;HTTP&lt;/span&gt; caching engine -
&lt;a class="reference external" href="https://varnish-cache.org/wiki/Introduction"&gt;https://varnish-cache.org/wiki/Introduction&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Varnish is currently used in conjunction with nginx on some very highly
used sites; WordPress.com, Gravatar and I’m sure many more.&lt;/p&gt;
&lt;p&gt;The idea is simple, a visitor will come to the site, nginx will do one
of two things which are outlined above but I will go through them again;
all static content will be served with nginx but directly from the
varnish cache, if a visitor has no login session cookie then nginx will
serve the page cache from Varnish, if a user does have a login session
cookie Varnish will proxy the request back to Apache. It’s a sort of
double reverse proxy setup and I can’t wait to see it in action.&lt;/p&gt;
&lt;p&gt;I will report back here once I have some more time to even get this
setup but I doubt it’ll happen for a week or more, sadly.&lt;/p&gt;
&lt;/div&gt;
</content><category term="tutorials"></category><category term="apache"></category><category term="cache"></category><category term="nginx"></category><category term="varnish"></category></entry><entry><title>HOWTO: Debian - Apache 2 SSL on multiple virtual hosts</title><link href="https://kura.gg/2010/01/15/howto-debian-apache2-ssl-multiple-vhosts/" rel="alternate"></link><published>2010-01-15T06:24:00+00:00</published><updated>2010-01-15T06:24:00+00:00</updated><author><name>kura</name></author><id>tag:kura.gg,2010-01-15:/2010/01/15/howto-debian-apache2-ssl-multiple-vhosts/</id><summary type="html">&lt;p&gt;Figured I’d write this one up quickly as it proved to annoy the hell out
of me at 4:30am this morning getting it working on a live server.&lt;/p&gt;
&lt;p&gt;Apache 2 can serve &lt;span class="caps"&gt;SSL&lt;/span&gt; content to multiple vhosts on your setup,
provided they use different &lt;span class="caps"&gt;IP&lt;/span&gt; addresses, this post will give you a
quick run down on how to do it.&lt;/p&gt;
&lt;p&gt;First up we need to actually add the new &lt;span class="caps"&gt;IP&lt;/span&gt; to the machine in /etc/network/interfaces.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
auto eth0
iface eth0 inet static
    address 10.1.1.7
    netmask 255.255.255.0
    gateway 10.1.1.1

auto eth0:1
iface eth0:1 inet static
    address 10.1.1.8
    netmask 255.255.255.0
&lt;/pre&gt;
&lt;p&gt;Replace my IPs with your own.&lt;/p&gt;
&lt;p&gt;Restart networking.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /etc/init.d/networking restart
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next task is Apache 2 to configure it to listen on both IPs.&lt;/p&gt;
&lt;blockquote&gt;
/etc/apache2/ports.conf&lt;/blockquote&gt;
&lt;p&gt;My …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Figured I’d write this one up quickly as it proved to annoy the hell out
of me at 4:30am this morning getting it working on a live server.&lt;/p&gt;
&lt;p&gt;Apache 2 can serve &lt;span class="caps"&gt;SSL&lt;/span&gt; content to multiple vhosts on your setup,
provided they use different &lt;span class="caps"&gt;IP&lt;/span&gt; addresses, this post will give you a
quick run down on how to do it.&lt;/p&gt;
&lt;p&gt;First up we need to actually add the new &lt;span class="caps"&gt;IP&lt;/span&gt; to the machine in /etc/network/interfaces.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
auto eth0
iface eth0 inet static
    address 10.1.1.7
    netmask 255.255.255.0
    gateway 10.1.1.1

auto eth0:1
iface eth0:1 inet static
    address 10.1.1.8
    netmask 255.255.255.0
&lt;/pre&gt;
&lt;p&gt;Replace my IPs with your own.&lt;/p&gt;
&lt;p&gt;Restart networking.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /etc/init.d/networking restart
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next task is Apache 2 to configure it to listen on both IPs.&lt;/p&gt;
&lt;blockquote&gt;
/etc/apache2/ports.conf&lt;/blockquote&gt;
&lt;p&gt;My changes&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;IfModule&lt;/span&gt; &lt;span class="s"&gt;mod_ssl.c&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nb"&gt;Listen&lt;/span&gt; &lt;span class="m"&gt;10.1.1.7&lt;/span&gt;:443
    &lt;span class="nb"&gt;Listen&lt;/span&gt; &lt;span class="m"&gt;10.1.1.8&lt;/span&gt;:443
    &lt;span class="nb"&gt;NameVirtualHost&lt;/span&gt; &lt;span class="m"&gt;10.1.1.7&lt;/span&gt;:443
    &lt;span class="nb"&gt;NameVirtualHost&lt;/span&gt; &lt;span class="m"&gt;10.1.1.8&lt;/span&gt;:443
&lt;span class="nt"&gt;&amp;lt;/IfModule&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That basically tells Apache to listen to port 443 on both those &lt;span class="caps"&gt;IP&lt;/span&gt;
addresses and sets up 2 NameVirtualHosts, 1 for each &lt;span class="caps"&gt;IP&lt;/span&gt;:&lt;span class="caps"&gt;PORT&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;The next step is to set up the VirtualHosts, I am going to use a sample
that has almost no directives, excluding all of the actual &lt;span class="caps"&gt;SSL&lt;/span&gt;
directives to make things easier to read.&lt;/p&gt;
&lt;p&gt;Host 1&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;VirtualHost&lt;/span&gt; &lt;span class="s"&gt;10.1.1.7:443&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nb"&gt;ServerName&lt;/span&gt; web1.example.com
    &lt;span class="nb"&gt;DocumentRoot&lt;/span&gt; &lt;span class="sx"&gt;/path/to/html1&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/VirtualHost&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Host 2&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;VirtualHost&lt;/span&gt; &lt;span class="s"&gt;10.1.1.8:443&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nb"&gt;ServerName&lt;/span&gt; web2.example.com
    &lt;span class="nb"&gt;DocumentRoot&lt;/span&gt; &lt;span class="sx"&gt;/path/to/html2&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/VirtualHost&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That is a very basic config but I hope it helps you understand how each
VirtualHost actually works when multiple IPs are used.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apache2ctl configtest
sudo /etc/init.d/apache2 restart
&lt;/pre&gt;&lt;/div&gt;
</content><category term="tutorials"></category><category term="apache"></category><category term="debian"></category><category term="eth0"></category><category term="howto"></category><category term="mod_ssl"></category><category term="networking"></category><category term="ssl"></category><category term="vhost"></category></entry><entry><title>HOWTO: Debian server security</title><link href="https://kura.gg/2010/01/14/howto-debian-server-security/" rel="alternate"></link><published>2010-01-14T19:57:00+00:00</published><updated>2010-01-14T19:57:00+00:00</updated><author><name>kura</name></author><id>tag:kura.gg,2010-01-14:/2010/01/14/howto-debian-server-security/</id><summary type="html">
&lt;p&gt;Server security is something I’ve always tried to keep myself up-to-date
on. I have at least a dozen &lt;span class="caps"&gt;RSS&lt;/span&gt; feeds that I read daily to learn about
the latest flaws, holes releases etc. That being said I am by no means
an “expert”, I’ve learned what I’ve needed to learn over time. I like to
think that over the years I’ve gained enough knowledge to almost
completely secure servers with all the programs installed that I
generally use.&lt;/p&gt;
&lt;p&gt;The aim of this article is to introduce you to some of the programs I
use for security and some config changes that can be made to other
programs to make them more secure. It is aimed at web servers but other
changes work anywhere, like the &lt;span class="caps"&gt;SSH&lt;/span&gt; changes.&lt;/p&gt;
&lt;div class="section" id="ssh"&gt;
&lt;h2&gt;&lt;span class="caps"&gt;SSH&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;We’ll start with a very simple change that makes a very big difference,
a change to the …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
&lt;p&gt;Server security is something I’ve always tried to keep myself up-to-date
on. I have at least a dozen &lt;span class="caps"&gt;RSS&lt;/span&gt; feeds that I read daily to learn about
the latest flaws, holes releases etc. That being said I am by no means
an “expert”, I’ve learned what I’ve needed to learn over time. I like to
think that over the years I’ve gained enough knowledge to almost
completely secure servers with all the programs installed that I
generally use.&lt;/p&gt;
&lt;p&gt;The aim of this article is to introduce you to some of the programs I
use for security and some config changes that can be made to other
programs to make them more secure. It is aimed at web servers but other
changes work anywhere, like the &lt;span class="caps"&gt;SSH&lt;/span&gt; changes.&lt;/p&gt;
&lt;div class="section" id="ssh"&gt;
&lt;h2&gt;&lt;span class="caps"&gt;SSH&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;We’ll start with a very simple change that makes a very big difference,
a change to the security of &lt;span class="caps"&gt;SSH&lt;/span&gt;. The file is located in the location
below on a Debian system.&lt;/p&gt;
&lt;blockquote&gt;
/etc/ssh/sshd_config&lt;/blockquote&gt;
&lt;p&gt;Replace this.&lt;/p&gt;
&lt;blockquote&gt;
PermitRootLogin yes&lt;/blockquote&gt;
&lt;p&gt;With this.&lt;/p&gt;
&lt;blockquote&gt;
PermitRootLogin no&lt;/blockquote&gt;
&lt;p&gt;This one change will massively reduce risk on your servers, no root &lt;span class="caps"&gt;SSH&lt;/span&gt;
access means no chance of brute forced accounts, well, not direct
attacks. Please be advised though, this change applies to you too, you
will have to log in to the server as another user and use &lt;strong&gt;su&lt;/strong&gt; or
&lt;strong&gt;sudo su&lt;/strong&gt;. You can always read my article on sudo/sudoers to learn
more about sudo.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="denyhosts"&gt;
&lt;h2&gt;DenyHosts&lt;/h2&gt;
&lt;p&gt;This is one of my favourite programs, if not my favourite program and is
of course available from the Debian repository.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install denyhosts
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once installed it will configure itself and should start on it’s own
too. DenyHosts will monitor your &lt;span class="caps"&gt;SSH&lt;/span&gt; logs and ban people that it sees
attacking you. One thing that should be mentioned is DenyHosts will only
work if &lt;span class="caps"&gt;SSH&lt;/span&gt; is compiled with &lt;span class="caps"&gt;TLS&lt;/span&gt; wrappers enabled. If you installed &lt;span class="caps"&gt;SSH&lt;/span&gt;
using apt-get this won’t be an issue.&lt;/p&gt;
&lt;p&gt;The way it works is really simple and partly explained above, DenyHosts
can be configured so you can set your own failed attempt thresholds, the
banned hosts are put in your denied hosts file, on a Debian system this is:&lt;/p&gt;
&lt;blockquote&gt;
/etc/hosts.deny&lt;/blockquote&gt;
&lt;p&gt;If you’re worried about banning yourself then put your &lt;span class="caps"&gt;IP&lt;/span&gt; address in
this file.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;/etc/hosts.allow&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;ALL&lt;/span&gt;: &lt;span class="caps"&gt;YOUR&lt;/span&gt;.&lt;span class="caps"&gt;IP&lt;/span&gt;.&lt;span class="caps"&gt;HERE&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Some changes I always make are shown below, don’t use these without
reading the config file to see what they actually do.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
BLOCK_SERVICE = ALL
DENY_THRESHOLD_INVALID = 5
DENY_THRESHOLD_VALID = 10
DENY_THRESHOLD_ROOT = 1
DENY_THRESHOLD_RESTRICTED = 1
HOSTNAME_LOOKUP=YES
ADMIN_EMAIL = myemail@mydomain.tld
SMTP_HOST = localhost
SMTP_PORT = 25
SMTP_HOST = localhost
SMTP_PORT = 25
SMTP_FROM = DenyHosts &amp;lt;denyhosts@SERVERNAME&amp;gt;
SMTP_SUBJECT = DenyHosts Report from $[HOSTNAME]
&lt;/pre&gt;
&lt;p&gt;Once configured simply restart the DenyHosts daemon.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /etc/init.d/denyhosts restart
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="logwatch"&gt;
&lt;h2&gt;Logwatch&lt;/h2&gt;
&lt;p&gt;Next up is another fantastic little program. It’s simple, it’s
lightweight and… it’s in the Debian repository.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install logwatch
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This program does as it’s name suggests, it watches your log files, it
then emails them to you every day and runs from &lt;strong&gt;/etc/cron.daily&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;There really is no configuration required for logwatch, I personally
just edit the cron job to force a mailto.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/usr/sbin/logwatch --mailto myemail@mydomain.tld
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Logwatch will send you a nice, tidy email every day giving you stats etc.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
--------------------- httpd Begin ------------------------
Requests with error response codes

400 Bad Request
/w00tw00t.at.ISC.SANS.DFind:): 1 Time(s)
/w00tw00t.at.ISC.SANS.test0:): 1 Time(s)

404 Not Found
//phpMyAdmin//scripts/setup.php: 1 Time(s)
//phpmyadmin//scripts/setup.php: 1 Time(s)
&lt;/pre&gt;
&lt;p&gt;As you can see, a few people have tried to find holes in my Apache and
also things that aren’t even present on my server.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Snip.

--------------------- SSHD Begin ------------------------

Users logging in through sshd:

hidden:
***.***.***.*** (my.hostname.com): 4 times

Refused incoming connections:
190.144.99.98 (190.144.99.98): 2 Time(s)
61.168.227.12 (61.168.227.12): 2 Time(s)
host.united-rx.com (209.59.172.198): 2 Time(s)

---------------------- SSHD End -------------------------

Snip.

--------------------- Sudo (secure-log) Begin------------------------

myuser =&amp;gt; root
------------
/bin/su - 1 Times.
---------------------- Sudo (secure-log) End-------------------------
&lt;/pre&gt;
&lt;p&gt;With that said it’s now time to move on to the actual “web server” side
of things, the following changes are all personal preference but do help
increase security.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="apache-2"&gt;
&lt;h2&gt;Apache 2&lt;/h2&gt;
&lt;p&gt;These changes are made to the following conf file on a Debian server.&lt;/p&gt;
&lt;blockquote&gt;
/etc/apache2/apache2.conf&lt;/blockquote&gt;
&lt;p&gt;Only show minimal information in headers.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;ServerTokens&lt;/span&gt; Prod
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Don’t include server version in server-generated pages.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;ServerSignature&lt;/span&gt; &lt;span class="k"&gt;Off&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Disable the icons alias that FancyIndexed directory listings use.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;#Alias /icons/ "/var/www/icons/"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The following change will need to be done to your vhosts too, it
disallows users from browsing your directory structures when no index
file is present.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;Options&lt;/span&gt; -Indexes
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Restart apache and you’re good.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /etc/init.d/apache2 restart
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="php"&gt;
&lt;h2&gt;&lt;span class="caps"&gt;PHP&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;The following changes help to hide and secure &lt;span class="caps"&gt;PHP&lt;/span&gt;. You need to make them
in the following file.&lt;/p&gt;
&lt;blockquote&gt;
/etc/php5/apache2/php.ini&lt;/blockquote&gt;
&lt;p&gt;Turn off &lt;span class="caps"&gt;PHP&lt;/span&gt; exposure.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;expose_php&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;Off&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Preventing session fixation. For more information on this please see
&lt;a class="reference external" href="https://www.acros.si/papers/session_fixation.pdf"&gt;this paper&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;session.use_only_cookies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1&lt;/span&gt;
&lt;span class="na"&gt;session.cookie_httponly&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;1&lt;/span&gt;
&lt;span class="na"&gt;session.use_trans_sid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once changed simply restart Apache.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /etc/init.d/apache2 restart
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="round-up"&gt;
&lt;h2&gt;Round up&lt;/h2&gt;
&lt;p&gt;There are many more ways to secure a server but I hope these changes
help you secure yours.&lt;/p&gt;
&lt;/div&gt;
</content><category term="tutorials"></category><category term="apache"></category><category term="debian"></category><category term="denyhosts"></category><category term="howto"></category><category term="logwatch"></category><category term="php"></category><category term="security"></category></entry><entry><title>HOWTO: Debian - Sudo(ers) explained</title><link href="https://kura.gg/2010/01/13/howto-debian-sudoers-explained/" rel="alternate"></link><published>2010-01-13T03:56:00+00:00</published><updated>2010-01-13T03:56:00+00:00</updated><author><name>kura</name></author><id>tag:kura.gg,2010-01-13:/2010/01/13/howto-debian-sudoers-explained/</id><summary type="html">
&lt;p&gt;Ah sudo, one of my favourites, funnily enough I’ve noticed a lot of
Linux users use sudo (mainly because Ubuntu installs and configures your
first user by default,) but very few seem to know that much about it.
This can include not even knowing how to add a user to sudoers.&lt;/p&gt;
&lt;p&gt;This article will give you some useful information on what sudo actually
is, how to configure it and how to restrict it.&lt;/p&gt;
&lt;div class="section" id="what-is-sudo"&gt;
&lt;h2&gt;What is sudo?&lt;/h2&gt;
&lt;p&gt;So, quickly running &lt;strong&gt;man sudo&lt;/strong&gt; gives us some information what sudo
actually is and does.&lt;/p&gt;
&lt;blockquote&gt;
sudo allows a permitted user to execute a command as the superuser
or another user, as specified in the sudoers file. The real and
effective uid and gid are set to match those of the target user as
specified in the passwd file and the group vector is initialized
based on the group file (unless the -P option …&lt;/blockquote&gt;&lt;/div&gt;</summary><content type="html">
&lt;p&gt;Ah sudo, one of my favourites, funnily enough I’ve noticed a lot of
Linux users use sudo (mainly because Ubuntu installs and configures your
first user by default,) but very few seem to know that much about it.
This can include not even knowing how to add a user to sudoers.&lt;/p&gt;
&lt;p&gt;This article will give you some useful information on what sudo actually
is, how to configure it and how to restrict it.&lt;/p&gt;
&lt;div class="section" id="what-is-sudo"&gt;
&lt;h2&gt;What is sudo?&lt;/h2&gt;
&lt;p&gt;So, quickly running &lt;strong&gt;man sudo&lt;/strong&gt; gives us some information what sudo
actually is and does.&lt;/p&gt;
&lt;blockquote&gt;
sudo allows a permitted user to execute a command as the superuser
or another user, as specified in the sudoers file. The real and
effective uid and gid are set to match those of the target user as
specified in the passwd file and the group vector is initialized
based on the group file (unless the -P option was specified). If the
invoking user is root or if the target user is the same as the
invoking user, no password is required. Otherwise, sudo requires
that users authenticate themselves with a password by default (&lt;span class="caps"&gt;NOTE&lt;/span&gt;:
in the default configuration this is the user’s password, not the
root password). Once a user has been authenticated, a timestamp is
updated and the user may then use sudo without a password for a
short period of time (15 minutes unless overridden in sudoers).&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="why-use-sudo"&gt;
&lt;h2&gt;Why use sudo?&lt;/h2&gt;
&lt;p&gt;So now that we know what sudo is, why use it? Well, one of the main (and
probably biggest reasons) for using sudo is giving users and groups
access to commands that as a normal user they wouldn’t normally be able
to use.&lt;/p&gt;
&lt;p&gt;If configured correctly you can have all commands run through sudo
logged, which you can then do wonderous things with like have emailed to
you as I do, using Logwatch.&lt;/p&gt;
&lt;p&gt;sudo uses the users password, this means no revealing root passwords to
random users in order to allow them to run a few extra commands that
they need to use. “But I can just change access permissions on programs
if I want them accessible” I hear you cry, of course you can, but there
are some things you simply don’t want to expose and yes, you can argue
that you just add a user to a group that has permissions but sudo is
just a better way of controlling access.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="installing-sudo"&gt;
&lt;h2&gt;Installing sudo&lt;/h2&gt;
&lt;p&gt;So first things first, lets install sudo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;apt-get install sudo
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Chances are you’ve probably already got sudo installed but depending on
how you installed Debian (or whichever flavour you’re using) you may not
have chosen to install it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="so-how-do-i-use-sudo"&gt;
&lt;h2&gt;So how do I use sudo?&lt;/h2&gt;
&lt;p&gt;Well, this is what &lt;strong&gt;man sudo&lt;/strong&gt; is for, but basically it’s simple:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo cat /etc/issue
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Yes, this command would work without the need for sudo, but I wanted a
simple example usage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="adding-users-to-sudo"&gt;
&lt;h2&gt;Adding users to sudo&lt;/h2&gt;
&lt;p&gt;There are a couple of ways of doing this, you can either edit
&lt;strong&gt;/etc/sudoers&lt;/strong&gt; with your favourite editor or use &lt;strong&gt;visudo&lt;/strong&gt;. visudo
will use which ever editor you have set using export. I’ve seen some
distributions that do not allow direct access to /etc/sudoers and force
you to use visudo, I’ve also read and seen that visudo does some
checking before saving. I personally know enough and feel comfortable
enough with the sudoers file to edit it directly, but that’s just my choice.&lt;/p&gt;
&lt;p&gt;So, open your sudoers list using your chosen method, you should see
something similar to this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;root &lt;span class="nv"&gt;ALL&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;ALL&lt;span class="o"&gt;)&lt;/span&gt; ALL
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, what does this mean? Well, it’s actually surprisingly simple. The
first part &lt;strong&gt;“root”&lt;/strong&gt; is the name of the user, the second &lt;strong&gt;“&lt;span class="caps"&gt;ALL&lt;/span&gt;”&lt;/strong&gt; is
the host that this definition belongs to, chances are you don’t need to
change this, the third &lt;strong&gt;“&lt;span class="caps"&gt;ALL&lt;/span&gt;”&lt;/strong&gt; is the user(s) to allow the user to run
commands as and the final &lt;strong&gt;“&lt;span class="caps"&gt;ALL&lt;/span&gt;”&lt;/strong&gt; is a list of commands that the user
can run.&lt;/p&gt;
&lt;p&gt;So, this might be a bit daunting from that explanation, so lets take a
look at a user I’ll create for myself&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kura &lt;span class="nv"&gt;ALL&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;root&lt;span class="o"&gt;)&lt;/span&gt; /usr/bin/apt-get, /usr/bin/vi
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So lets break that down; the user &lt;strong&gt;kura&lt;/strong&gt; can run the commands
&lt;strong&gt;/usr/bin/apt-get&lt;/strong&gt; and &lt;strong&gt;/usr/bin/vi&lt;/strong&gt; as the user &lt;strong&gt;root&lt;/strong&gt; on all hosts.&lt;/p&gt;
&lt;p&gt;Hopefully that makes it simple to understand. For the user that the
commands are run as you can user any user or daemon on the server, for
example root could be another user, in the following example I will use
a different user called admin.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;kura &lt;span class="nv"&gt;ALL&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;admin&lt;span class="o"&gt;)&lt;/span&gt; /usr/bin/apt-get, /usr/bin/vi
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="adding-groups-to-sudoers"&gt;
&lt;h2&gt;Adding groups to sudoers&lt;/h2&gt;
&lt;p&gt;The approach for this is exactly the same as for users except you use %
to define a group.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;%sudoers &lt;span class="nv"&gt;ALL&lt;/span&gt;&lt;span class="o"&gt;=(&lt;/span&gt;root&lt;span class="o"&gt;)&lt;/span&gt; /usr/bin/apt-get, /usr/bin/vi
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And now to wrap this article up…&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-i-personally-use-sudoers"&gt;
&lt;h2&gt;How I personally use sudoers&lt;/h2&gt;
&lt;p&gt;I use sudoers on all of my servers and my approach to locking them down
is simple; I have a user that has access to &lt;span class="caps"&gt;ALL&lt;/span&gt; users and &lt;span class="caps"&gt;ALL&lt;/span&gt; commands,
I then have a group called sudoers that users can be added to that have
access to some commands that they may need from time to time, giving
them the ability to do things like tailing system logs. I also have
Logwatch installed which will email me with my daily log report which
includes a list of all users that ran commands via sudo and tells me
which commands they ran. This way I can keep an eye on them.&lt;/p&gt;
&lt;/div&gt;
</content><category term="tutorials"></category><category term="debian"></category><category term="howto"></category><category term="sudo"></category><category term="sudoers"></category></entry><entry><title>HOWTO: Debian, Apache 2 &amp; mod_ssl with self signed cert. or officially signed cert.</title><link href="https://kura.gg/2010/01/12/howto-debian-apache-2-amp-mod_ssl/" rel="alternate"></link><published>2010-01-12T22:57:00+00:00</published><updated>2010-01-12T22:57:00+00:00</updated><author><name>kura</name></author><id>tag:kura.gg,2010-01-12:/2010/01/12/howto-debian-apache-2-amp-mod_ssl/</id><summary type="html">
&lt;p&gt;This is gonna be quite a simple tutorial that should be the same
(excluding pathing and apt) across other Linux distros.&lt;/p&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;First off we’ll get Apache and mod_ssl install&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install apache2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class="caps"&gt;SSL&lt;/span&gt; should be enabled by default, if not run the following&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo a2enmod ssl
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ssl-certificate"&gt;
&lt;h2&gt;&lt;span class="caps"&gt;SSL&lt;/span&gt; certificate&lt;/h2&gt;
&lt;p&gt;There are several ways of doing this, the first you need to figure out
is if you want a self signed certificate or one signed by a provider
like GeoTrust, this type is not free. In this article I’ll cover both,
starting with self signed.&lt;/p&gt;
&lt;div class="section" id="self-signed"&gt;
&lt;h3&gt;Self signed&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudp mkdir /etc/apache2/ssl
sudo /usr/sbin/make-ssl-cert /usr/share/ssl-cert/ssleay.cnf /etc/apache2/ssl/apache.pem
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="provider-signed"&gt;
&lt;h3&gt;Provider signed&lt;/h3&gt;
&lt;p&gt;Please note, this type of certificate has to be paid for, prices at time
of writing range from £15/year to £2,000/year.&lt;/p&gt;
&lt;p&gt;There are actually some more …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">
&lt;p&gt;This is gonna be quite a simple tutorial that should be the same
(excluding pathing and apt) across other Linux distros.&lt;/p&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;First off we’ll get Apache and mod_ssl install&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install apache2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;span class="caps"&gt;SSL&lt;/span&gt; should be enabled by default, if not run the following&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo a2enmod ssl
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ssl-certificate"&gt;
&lt;h2&gt;&lt;span class="caps"&gt;SSL&lt;/span&gt; certificate&lt;/h2&gt;
&lt;p&gt;There are several ways of doing this, the first you need to figure out
is if you want a self signed certificate or one signed by a provider
like GeoTrust, this type is not free. In this article I’ll cover both,
starting with self signed.&lt;/p&gt;
&lt;div class="section" id="self-signed"&gt;
&lt;h3&gt;Self signed&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudp mkdir /etc/apache2/ssl
sudo /usr/sbin/make-ssl-cert /usr/share/ssl-cert/ssleay.cnf /etc/apache2/ssl/apache.pem
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="provider-signed"&gt;
&lt;h3&gt;Provider signed&lt;/h3&gt;
&lt;p&gt;Please note, this type of certificate has to be paid for, prices at time
of writing range from £15/year to £2,000/year.&lt;/p&gt;
&lt;p&gt;There are actually some more options when it comes to generating a key
for this &lt;span class="caps"&gt;CRT&lt;/span&gt;, the first way creates a key that does not require a
passphrase, the second way requires a passphrase and, unless you make a
special change to your Apache config along with a small bash script
(will go through later) will ask you for the passphrase for each key
every time you restart Apache.&lt;/p&gt;
&lt;div class="section" id="without-a-passphrase"&gt;
&lt;h4&gt;Without a passphrase&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;openssl genrsa -out DOMAINNAME.key &lt;span class="m"&gt;4096&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="with-a-passphrase"&gt;
&lt;h4&gt;With a passphrase&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;openssl genrsa -des3 -out DOMAINNAME.key &lt;span class="m"&gt;4096&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Replace &lt;span class="caps"&gt;DOMAINNAME&lt;/span&gt; with your domain name, I find this makes it much
easier if all of my certs and keys are named accordingly, but that’s
just me. I also generally use at least a 4096bit modulus, feel free to
change this to whatever you wish, some signers will only take a key of a
specific size.&lt;/p&gt;
&lt;p&gt;Next up is actually generating the &lt;span class="caps"&gt;CSR&lt;/span&gt; from the key.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;openssl req -new -key DOMAINNAME.key &amp;gt; DOMAINNAME.csr
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As a note, it’s very badly wordly but &lt;span class="caps"&gt;COMMON&lt;/span&gt; &lt;span class="caps"&gt;NAME&lt;/span&gt; is the actual fully
qualified domain name that you want to use &lt;span class="caps"&gt;SSL&lt;/span&gt; on, if your domain name
is example.com and you want this to work on www.example.com but did not
buy a wildcard certificate then put www.example.com as your Common Name.&lt;/p&gt;
&lt;p&gt;Once generated, send this off to your signer and they will send you a
&lt;span class="caps"&gt;CRT&lt;/span&gt; in return.&lt;/p&gt;
&lt;p&gt;Once you have your &lt;span class="caps"&gt;CRT&lt;/span&gt; it’s time to put them on the server, move your
key file to Debian’s &lt;span class="caps"&gt;SSL&lt;/span&gt; directory.&lt;/p&gt;
&lt;p&gt;Put your &lt;span class="caps"&gt;CRT&lt;/span&gt; on the server and move it to Debian’s &lt;span class="caps"&gt;SSL&lt;/span&gt; directory too.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="apache-configuration"&gt;
&lt;h2&gt;Apache configuration&lt;/h2&gt;
&lt;p&gt;First thing we need to do is check your Apache ports.conf file to make
sure &lt;span class="caps"&gt;SSL&lt;/span&gt; is enabled.&lt;/p&gt;
&lt;p&gt;It should have the following at the bottom.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;IfModule&lt;/span&gt; &lt;span class="s"&gt;mod_ssl.c&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;# SSL name based virtual hosts are not yet supported, therefore no&lt;/span&gt;
    &lt;span class="c"&gt;# NameVirtualHost statement here&lt;/span&gt;
    &lt;span class="nb"&gt;Listen&lt;/span&gt; &lt;span class="m"&gt;443&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/IfModule&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that’s sorted we’ll move on to your actual virtualhost.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo nano /etc/apache2/sites-available/DOMAINNAME.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We’ll use a config template I’ve always used, feel free to edit it at need.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;VirtualHost&lt;/span&gt; &lt;span class="s"&gt;*&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nb"&gt;ServerAdmin&lt;/span&gt; webmaster@DOMAINNAME
    &lt;span class="nb"&gt;ServerName&lt;/span&gt; DOMAINNAME
    &lt;span class="nb"&gt;DocumentRoot&lt;/span&gt; &lt;span class="sx"&gt;/var/www/DOMAINNAME&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;Directory&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nb"&gt;Options&lt;/span&gt; FollowSymLinks
        &lt;span class="nb"&gt;AllowOverride&lt;/span&gt; &lt;span class="k"&gt;None&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/Directory&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;Directory&lt;/span&gt; &lt;span class="s"&gt;/var/www/DOMAINNAME&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nb"&gt;Options&lt;/span&gt; -Indexes FollowSymLinks MultiViews
        &lt;span class="nb"&gt;AllowOverride&lt;/span&gt; &lt;span class="k"&gt;All&lt;/span&gt;
        &lt;span class="nb"&gt;Order&lt;/span&gt; allow,deny
        &lt;span class="nb"&gt;allow&lt;/span&gt; from &lt;span class="k"&gt;all&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/Directory&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/VirtualHost&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;VirtualHost&lt;/span&gt; &lt;span class="s"&gt;*:443&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nb"&gt;ServerAdmin&lt;/span&gt; webmaster@DOMAINNAME
    &lt;span class="nb"&gt;ServerName&lt;/span&gt; DOMAINNAME
    &lt;span class="nb"&gt;DocumentRoot&lt;/span&gt; &lt;span class="sx"&gt;/var/www/DOMAINNAME&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;Directory&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nb"&gt;Options&lt;/span&gt; FollowSymLinks
        &lt;span class="nb"&gt;AllowOverride&lt;/span&gt; &lt;span class="k"&gt;None&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/Directory&amp;gt;&lt;/span&gt;

    &lt;span class="nt"&gt;&amp;lt;Directory&lt;/span&gt; &lt;span class="s"&gt;/var/www/DOMAINNAME&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nb"&gt;Options&lt;/span&gt; -Indexes FollowSymLinks MultiViews
        &lt;span class="nb"&gt;AllowOverride&lt;/span&gt; &lt;span class="k"&gt;All&lt;/span&gt;
        &lt;span class="nb"&gt;Order&lt;/span&gt; allow,deny
        &lt;span class="nb"&gt;allow&lt;/span&gt; from &lt;span class="k"&gt;all&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/Directory&amp;gt;&lt;/span&gt;

     &lt;span class="nb"&gt;SSLEngine&lt;/span&gt; &lt;span class="k"&gt;On&lt;/span&gt;
     &lt;span class="nb"&gt;SSLCertificateFile&lt;/span&gt; &lt;span class="sx"&gt;/etc/apache2/ssl/apache.pem&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/VirtualHost&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you used the self signed approach then the above
&lt;strong&gt;SSLCertificateFile&lt;/strong&gt; will be correct, if not replace it with what is
shown below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;SSLCertificateFile&lt;/span&gt; &lt;span class="sx"&gt;/etc/ssl/certs/DOMAINANE.crt&lt;/span&gt;
&lt;span class="nb"&gt;SSLCertificateKeyFile&lt;/span&gt; &lt;span class="sx"&gt;/etc/ssl/private/DOMAINNAME.key&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you received a bundle file as well as your domains &lt;span class="caps"&gt;CRT&lt;/span&gt; then copy it
to /etc/ssl/certs/ on your server and add the following line after
&lt;strong&gt;SSLCertificateKeyFile&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;SSLCertificateChainFile&lt;/span&gt; &lt;span class="sx"&gt;/etc/ssl/certs/DOMAINNAME.bundle.crt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Save and exit, with that done we need to enable the site.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo a2ensite DOMAINNAME.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you used a self signed certificate or passphrase-free key, this
should be all you need to do, feel free to test your config and restart
Apache and test your site.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apache2ctrl configtest
sudo /etc/init.d/apache2 restart
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you used a key with a passphrase you will either have to type your
passphrase in each time you restart Apache or, use this wonderful Apache
supported “hack” below…&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-nasty-ssl-passphrase-hack"&gt;
&lt;h2&gt;The nasty &lt;span class="caps"&gt;SSL&lt;/span&gt; passphrase hack…&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo nano /etc/apache2/apache2.conf
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Place the following at the end of the file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;SSLPassPhraseDialog&lt;/span&gt; exec:/etc/apache2/ssl.sh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we need to create this bash file, so…&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo nano /etc/apache2/ssl.sh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Place the following in it&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="nv"&gt;$1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'DOMAINNAME:443'&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"PASSPHRASE"&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is actually supported by Apache, when it’s restarted it will call
this script for every &lt;span class="caps"&gt;SSL&lt;/span&gt; virtualhost you have enabled, passing the
hostname and the port through to the script as $1, so you can add
multiple sites to this file.&lt;/p&gt;
&lt;p&gt;Now save and make it only usable by root.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo chmod &lt;span class="m"&gt;0700&lt;/span&gt; /etc/apache2/ssl.sh
sudo chown root:root /etc/apache2/ssl.sh
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can follow the config test and restart call from above.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apache2ctl configtest
sudo /etc/init.d/apache2 restart
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And that is it, we should be done!&lt;/p&gt;
&lt;/div&gt;
</content><category term="tutorials"></category><category term="apache"></category><category term="debian"></category><category term="mod_ssl"></category><category term="ssl"></category></entry><entry><title>Apache 2, Nginx &amp; WordPress MU - Follow up</title><link href="https://kura.gg/2010/01/12/apache-2-nginx-wordpress-mu-follow-up/" rel="alternate"></link><published>2010-01-12T00:37:00+00:00</published><updated>2010-01-12T00:37:00+00:00</updated><author><name>kura</name></author><id>tag:kura.gg,2010-01-12:/2010/01/12/apache-2-nginx-wordpress-mu-follow-up/</id><summary type="html">&lt;p&gt;This is a quick follow up to a previous post about getting this blog
&lt;a class="reference external" href="/2010/01/11/debian-apache-2-nginx-wordpress-mu/"&gt;running on nginx with a reverse proxy to Apache 2&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It seems the issue stems from 3 mods I had installed and enabled&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;mod-spamhaus&lt;/li&gt;
&lt;li&gt;mod-evasive and&lt;/li&gt;
&lt;li&gt;mod-security&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The 3, when running together are a fantastic way to strengthen any web
server from attack, be it &lt;span class="caps"&gt;DOS&lt;/span&gt;, injection, &lt;span class="caps"&gt;XLS&lt;/span&gt; etc. I’ve sworn by all 3
of them for years now and I thought I had them cracked for
security:performance ratio, when it comes to reverse proxying requests
from nginx to Apache 2 where WordPress is concerned, apparently I was
very wrong.&lt;/p&gt;
&lt;p&gt;The issue wasn’t so bad when the cache was full, but seeing as my cache
is only alive for an hour that leaves an open point for the cache to be
recreated when a user views the page. This in itself isn’t …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is a quick follow up to a previous post about getting this blog
&lt;a class="reference external" href="/2010/01/11/debian-apache-2-nginx-wordpress-mu/"&gt;running on nginx with a reverse proxy to Apache 2&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It seems the issue stems from 3 mods I had installed and enabled&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;mod-spamhaus&lt;/li&gt;
&lt;li&gt;mod-evasive and&lt;/li&gt;
&lt;li&gt;mod-security&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The 3, when running together are a fantastic way to strengthen any web
server from attack, be it &lt;span class="caps"&gt;DOS&lt;/span&gt;, injection, &lt;span class="caps"&gt;XLS&lt;/span&gt; etc. I’ve sworn by all 3
of them for years now and I thought I had them cracked for
security:performance ratio, when it comes to reverse proxying requests
from nginx to Apache 2 where WordPress is concerned, apparently I was
very wrong.&lt;/p&gt;
&lt;p&gt;The issue wasn’t so bad when the cache was full, but seeing as my cache
is only alive for an hour that leaves an open point for the cache to be
recreated when a user views the page. This in itself isn’t a bad thing
or even the root cause, the actual cause appears to be a huge amount of
requests hitting Apache, these in turn trigger all 3 mods, all for the
same reason; lots and lots of requests in short amounts of time from the
same &lt;span class="caps"&gt;IP&lt;/span&gt; address.&lt;/p&gt;
&lt;p&gt;Somehow this was causing Apache to spawn many child processes which it
then tried to kill when the requests were completed or killed, this put
my server load to 15.02 at one point in time, causing the server to go
in to a frenzy as Apache tried to spawn even more children to handle the
requests, getting itself caught in a vicious looping cycle.&lt;/p&gt;
&lt;p&gt;As it stands now I have lowered the tolerance of both mod-evasive and
mod-security which has massively improved performance to the point where
now I can clean and recreate the cache of all blogs running from this
&lt;span class="caps"&gt;WPMU&lt;/span&gt; installation at the same time, while browsing and never notice it.&lt;/p&gt;
&lt;p&gt;Currently mod-spamhaus has been disabled until such time as I can figure
out it’s configuration variables and get it running nicely without it
killing my server when the site in question is a WordPress site.&lt;/p&gt;
&lt;p&gt;As a consequence my other non &lt;span class="caps"&gt;WPMU&lt;/span&gt; blogs that are running purely on
Apache with no nginx reverse proxy have also sped up dramatically which
is always a good thing. I guess for now I’ll have to write a quick
Python script that temporarily bans people using iptables until I can
get all 3 mods working in harmony.&lt;/p&gt;
&lt;p&gt;Will post in the future when I have more info.&lt;/p&gt;
</content><category term="tutorials"></category><category term="apache"></category><category term="cache"></category><category term="debian"></category><category term="nginx"></category><category term="wordpress"></category></entry><entry><title>HOWTO: DKIM with Postfix on Debian</title><link href="https://kura.gg/2010/01/11/dkim-on-debian-with-postfix/" rel="alternate"></link><published>2010-01-11T20:53:00+00:00</published><updated>2010-01-11T20:53:00+00:00</updated><author><name>kura</name></author><id>tag:kura.gg,2010-01-11:/2010/01/11/dkim-on-debian-with-postfix/</id><summary type="html">&lt;p&gt;&lt;em&gt;There is a much newer article on this subject `here`_ and covers
DomainKeys and &lt;span class="caps"&gt;DKIM&lt;/span&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Mail and mail servers have always been my forté if I’m to be honest, my
home mail server has been spam free for years now, nothing really gets
past due to my love of all things installable and configurable.&lt;/p&gt;
&lt;p&gt;Several months ago I started a new job and after a few weeks I was
tasked with getting &lt;span class="caps"&gt;DKIM&lt;/span&gt; signing to work on our mail platform, &lt;span class="caps"&gt;DKIM&lt;/span&gt; was
semi-new to me, I’d never bothered with anything but &lt;span class="caps"&gt;SPF&lt;/span&gt; before so I
figured I’d give it a shot.&lt;/p&gt;
&lt;p&gt;At work our servers are Debian based but are the evil that is Ubuntu,
strangely though I was able to find an Ubuntu specific article that
wasn’t absolute rubbish, which surprised me no end. I was able to get
dkim-milter working with Postfix and signing …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;There is a much newer article on this subject `here`_ and covers
DomainKeys and &lt;span class="caps"&gt;DKIM&lt;/span&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Mail and mail servers have always been my forté if I’m to be honest, my
home mail server has been spam free for years now, nothing really gets
past due to my love of all things installable and configurable.&lt;/p&gt;
&lt;p&gt;Several months ago I started a new job and after a few weeks I was
tasked with getting &lt;span class="caps"&gt;DKIM&lt;/span&gt; signing to work on our mail platform, &lt;span class="caps"&gt;DKIM&lt;/span&gt; was
semi-new to me, I’d never bothered with anything but &lt;span class="caps"&gt;SPF&lt;/span&gt; before so I
figured I’d give it a shot.&lt;/p&gt;
&lt;p&gt;At work our servers are Debian based but are the evil that is Ubuntu,
strangely though I was able to find an Ubuntu specific article that
wasn’t absolute rubbish, which surprised me no end. I was able to get
dkim-milter working with Postfix and signing emails first time round.
Google was failing to match against our &lt;span class="caps"&gt;DNS&lt;/span&gt; records but after some
repeat changes I was able to get it working.&lt;/p&gt;
&lt;p&gt;Debian was a completely different kettle of fish.&lt;/p&gt;
&lt;p&gt;I’ll have to go through a bit of the background to my problem before the
actual installation tutorial. I had everything installed and running but
dkim-filter was refusing to start correctly, Postfix couldn’t connect to
it and no emails could be signed. After a lot of banging my head against
the desk I decided to try dkimproxy, I had the same issues with this
too. Then I spotted opendkim which used the same config as dkim-filter
but this time actually worked. I’m not sure what exactly is wrong with
the dkim-filter package, I’ve noticed a few people writing posts about
it but opendkim saved me so I’ll stick with it.&lt;/p&gt;
&lt;p&gt;First off I’m going to assume you have Postfix installed and running, if
you don’t there are plenty of articles on Google for how to get it running.&lt;/p&gt;
&lt;p&gt;First step is to install opendkim.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install opendkim
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Leave the install process to complete, we’ll configure it later, first
we’ll make the public and private keys required for signing.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;openssl genrsa -out private.key &lt;span class="m"&gt;1024&lt;/span&gt;
openssl rsa -in private.key -out public.key -pubout -outform PEM
sudo /etc/mail/
sudo cp private.key /etc/mail/dkim.key
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So that’s the key sorted, now we’ll configure opendkim.&lt;/p&gt;
&lt;p&gt;First open &lt;strong&gt;/etc/opendkim.conf&lt;/strong&gt; and put the following in, replacing
the _DOMAIN_ with your domain name.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# Log to syslog
Syslog yes
# Required to use local socket with MTAs that access the socket as a non-
# privileged user (e.g. Postfix)
UMask 002

# Sign for example.com with key in /etc/mail/dkim.key using
# selector '2007' (e.g. 2007._domainkey.example.com)
Domain _DOMAIN_
KeyFile /etc/dkim/private.key
Selector mail

# Commonly-used options; the commented-out versions show the defaults.
#Canonicalization simple
#Mode sv
#SubDomains no
#ADSPDiscard no
&lt;/pre&gt;
&lt;p&gt;Set a custom selector if you want.&lt;/p&gt;
&lt;p&gt;Next we open up &lt;strong&gt;/etc/default/opendkim&lt;/strong&gt; and change it to the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Command-line options specified here will override the contents of&lt;/span&gt;
&lt;span class="c1"&gt;# /etc/opendkim.conf. See opendkim(8) for a complete list of options.&lt;/span&gt;
&lt;span class="c1"&gt;#DAEMON_OPTS=""&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;

&lt;span class="c1"&gt;# Uncomment to specify an alternate socket&lt;/span&gt;

&lt;span class="c1"&gt;# Note that setting this will override any Socket value in opendkim.conf&lt;/span&gt;

&lt;span class="c1"&gt;#SOCKET="local:/var/run/opendkim/opendkim.sock" # default&lt;/span&gt;
&lt;span class="c1"&gt;#SOCKET="inet:54321" # listen on all interfaces on port 54321&lt;/span&gt;
&lt;span class="nv"&gt;SOCKET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"inet:12345@localhost"&lt;/span&gt; &lt;span class="c1"&gt;# listen on loopback on port 12345&lt;/span&gt;
&lt;span class="c1"&gt;#SOCKET="inet:12345@192.0.2.1" # listen on 192.0.2.1 on port 12345&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That’s opendkim all configured, start the daemon with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /etc/init.d/opendkim start
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next we need to modify Postfix to tell it to use opendkim to sign
emails. Lets open up &lt;strong&gt;/etc/postfix/main.cf&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Place the following as the end of that file&lt;/p&gt;
&lt;pre class="literal-block"&gt;
milter_default_action = accept
milter_protocol = 6
smtpd_milters = inet:localhost:12345
non_smtpd_milters = inet:localhost:12345
&lt;/pre&gt;
&lt;p&gt;That’s Postfix configured, we’ll reload it once the &lt;span class="caps"&gt;DNS&lt;/span&gt; is configured.&lt;/p&gt;
&lt;p&gt;How you configured your &lt;span class="caps"&gt;DNS&lt;/span&gt; is up to you, you will need to add the
following 2 new records&lt;/p&gt;
&lt;pre class="literal-block"&gt;
_domainkey.DOMAIN.TLD. IN TXT "t=y; o=-;" SELECTOR._domainkey.DOMAIN.TLD. IN TXT "k=rsa; t=y; p=YOUR_PUBLIC_KEY_HERE"
&lt;/pre&gt;
&lt;p&gt;Replace the instances of &lt;strong&gt;&lt;span class="caps"&gt;DOMAIN&lt;/span&gt;.&lt;span class="caps"&gt;TLD&lt;/span&gt;&lt;/strong&gt; with your actual mail domain
name in both records, &lt;strong&gt;&lt;span class="caps"&gt;SELECTOR&lt;/span&gt;&lt;/strong&gt; was configured in to opendkim
earlier, in my example I used &lt;strong&gt;mail&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Your key will be called public.key, we created both public and private
keys earlier. You only need to add the actual key from between the &lt;span class="caps"&gt;BEGIN&lt;/span&gt;
and &lt;span class="caps"&gt;END&lt;/span&gt; lines, e.g. my test one below&lt;/p&gt;
&lt;pre class="literal-block"&gt;
-----BEGIN PUBLIC KEY-----
MIGfMWGwregWREGREwgERGREGergerDGdEPzFCAdYnf1Z9nRtfTqwP/mcdGg
NmbY11tCtwwFMu8/qEQwaK/Nc61q0D/z7NYwlsPFi08lnVSHGrewherh5630n
F6S0z961h6li/pOHiJy/l2ehnenhehO3d/NmATY90WlpEDmnlVAMTYgALBFJplp
1ruZ66Bgrewhg43y634567gewrgB
-----END PUBLIC KEY-----
&lt;/pre&gt;
&lt;p&gt;Becomes&lt;/p&gt;
&lt;pre class="literal-block"&gt;
MIGfMWGwregWREGREwgERGREGerg [...snip...]
plp1ruZ66Bgrewhg43y634567gewrgB
&lt;/pre&gt;
&lt;p&gt;Now we simply reload the Postfix config with &lt;strong&gt;/etc/init.d/postfix reload&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Now you can send test mails once you’re sure &lt;span class="caps"&gt;DNS&lt;/span&gt; changes have
propagated. You will see any errors in &lt;strong&gt;/var/log/mail.log&lt;/strong&gt;.&lt;/p&gt;
</content><category term="tutorials"></category><category term="debian"></category><category term="dkim"></category><category term="howto"></category><category term="mail"></category><category term="postfix"></category></entry><entry><title>Debian, Apache 2, Nginx, WordPress MU &amp; WP-Super-Cache</title><link href="https://kura.gg/2010/01/11/debian-apache-2-nginx-wordpress-mu/" rel="alternate"></link><published>2010-01-11T19:58:00+00:00</published><updated>2010-01-11T19:58:00+00:00</updated><author><name>kura</name></author><id>tag:kura.gg,2010-01-11:/2010/01/11/debian-apache-2-nginx-wordpress-mu/</id><summary type="html">
&lt;p&gt;&lt;em&gt;This is a rather old article, for more up-to-date information please see;&lt;/em&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="/2010/02/07/nginx-proxy_cache-and-explained-benchmarked/"&gt;/2010/02/07/nginx-proxy_cache-and-explained-benchmarked/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/2010/02/14/more-nginx-proxy_cache-optimizations-and-nginx-load-balancing/"&gt;/2010/02/14/more-nginx-proxy_cache-optimizations-and-nginx-load-balancing/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I’ve started collecting a few blogs on my servers now and figured from
this one on I would consolidate it in to one workable, usable location.
Removing my need to update multiple plugins, themes and WordPress
itself, over and over.&lt;/p&gt;
&lt;p&gt;This time round I thought I’d do it properly, and properly in my book is
as complicated and “awesome” as it can possibly be, without growing legs
and running off to stomp a city.&lt;/p&gt;
&lt;div class="section" id="love"&gt;
&lt;h2&gt;Love&lt;/h2&gt;
&lt;p&gt;I’ve fallen in-love with nginx (&lt;a class="reference external" href="https://nginx.org/"&gt;https://nginx.org/&lt;/a&gt;) over the last 6
months or so, I’d been an avid user of LighTTPD for a very long time
before but started to look in to nginx mid year as a replacement. I
learned that at my new job they used …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
&lt;p&gt;&lt;em&gt;This is a rather old article, for more up-to-date information please see;&lt;/em&gt;&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="/2010/02/07/nginx-proxy_cache-and-explained-benchmarked/"&gt;/2010/02/07/nginx-proxy_cache-and-explained-benchmarked/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="/2010/02/14/more-nginx-proxy_cache-optimizations-and-nginx-load-balancing/"&gt;/2010/02/14/more-nginx-proxy_cache-optimizations-and-nginx-load-balancing/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I’ve started collecting a few blogs on my servers now and figured from
this one on I would consolidate it in to one workable, usable location.
Removing my need to update multiple plugins, themes and WordPress
itself, over and over.&lt;/p&gt;
&lt;p&gt;This time round I thought I’d do it properly, and properly in my book is
as complicated and “awesome” as it can possibly be, without growing legs
and running off to stomp a city.&lt;/p&gt;
&lt;div class="section" id="love"&gt;
&lt;h2&gt;Love&lt;/h2&gt;
&lt;p&gt;I’ve fallen in-love with nginx (&lt;a class="reference external" href="https://nginx.org/"&gt;https://nginx.org/&lt;/a&gt;) over the last 6
months or so, I’d been an avid user of LighTTPD for a very long time
before but started to look in to nginx mid year as a replacement. I
learned that at my new job they used nginx for image server and, after
reading a few articles online decided nginx greatly outweighed “Lighty”.&lt;/p&gt;
&lt;p&gt;First stop was getting Wordpress &lt;span class="caps"&gt;MU&lt;/span&gt; installed, this itself proved rather
interesting, I’ve no idea why however. After several failed attempts
(the first showing me pages without images or css, the second
redirecting to nowhere and so on,) I finally got it working. On logging
in I realised how horrid it was, forcing you to set-up weird sub domain
structures that the blogs are &lt;em&gt;supposed&lt;/em&gt; to work under. This is all well
and good but I don’t have blogs running on sub domains, I have blogs
running on their own domains. Ignoring this “feature” you can actually
force set each blog to have it’s own url, but this has to be during
editing after initial creation.&lt;/p&gt;
&lt;p&gt;The rest was the usual WordPress ease, wget the plugins and themes I
wanted, unzip them as usual and stick them in the right locations,
removing unwanted readme.txt files just to keep the whole place clean.
On a side note; what happened to the “&lt;span class="caps"&gt;README&lt;/span&gt;” files of the past? Why are
they all starting to appear named as “readme.txt” now? I guess the
Windows crowd couldn’t figure out how to open them in Notepad…&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hurdles"&gt;
&lt;h2&gt;Hurdles&lt;/h2&gt;
&lt;p&gt;My first stumble was when I couldn’t use my beloved sitemaps plugin I’ve
used so many times, the problem with it is it stores the files directly
in the doc root, which is fine on a single instance, but with multiple
blogs they just overwrite each other. Luckily I found a nice little
WordPress &lt;span class="caps"&gt;MU&lt;/span&gt; specific one that slotted in nicely, it appears to be
generated each and every time the file is hit, so I wrote a quick script
that uses wget to grab each blogs sitemap every 6 hours, saves them to
the content directory and uses .htaccess to point to the right one.&lt;/p&gt;
&lt;p&gt;With that dragon vanquished it was time to get &lt;span class="caps"&gt;WP&lt;/span&gt;-Super-Cache installed,
this proved painless as usual and was running under Apache 2 in no time
at all, I’ve yet to work out why every time I install it under Apache,
Apache seems go insane, eventually slowing everything down to a crawl…
But that leads me on to the next part.&lt;/p&gt;
&lt;p&gt;Nginx reverse proxy to Apache.&lt;/p&gt;
&lt;p&gt;This wasn’t difficult at all, I’ve reverse proxied connections to Apache
many times from nginx now, being a Debian user made it quite nice a
simple, I have Apache 2 running bound to 1 &lt;span class="caps"&gt;IP&lt;/span&gt; and nginx bound to
another, I simply created a new vhost for nginx and filled it with the
lovely data needed as shown below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kn"&gt;listen&lt;/span&gt; &lt;span class="n"&gt;174.143.241.61&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;server_name&lt;/span&gt; &lt;span class="s"&gt;syslog.tv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;access_log&lt;/span&gt; &lt;span class="s"&gt;/var/log/nginx/syslog.tv.access.log&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="s"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_pass&lt;/span&gt; &lt;span class="s"&gt;https://apache.syslog.tv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_redirect&lt;/span&gt; &lt;span class="no"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;Host&lt;/span&gt; &lt;span class="nv"&gt;$host&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;X-Real-IP&lt;/span&gt; &lt;span class="nv"&gt;$remote_addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_set_header&lt;/span&gt; &lt;span class="s"&gt;X-Forwarded-For&lt;/span&gt; &lt;span class="nv"&gt;$proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;client_max_body_size&lt;/span&gt; &lt;span class="mi"&gt;10m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;client_body_buffer_size&lt;/span&gt; &lt;span class="mi"&gt;128k&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_connect_timeout&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_send_timeout&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_read_timeout&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_buffer_size&lt;/span&gt; &lt;span class="mi"&gt;4k&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_buffers&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="mi"&gt;32k&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_busy_buffers_size&lt;/span&gt; &lt;span class="mi"&gt;64k&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kn"&gt;proxy_temp_file_write_size&lt;/span&gt; &lt;span class="mi"&gt;64k&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kn"&gt;location&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt;&lt;span class="sr"&gt;*&lt;/span&gt; &lt;span class="s"&gt;^.+.(jpg|jpeg|gif|png|ico|css|zip|tgz|gz|rar|bz2|doc|xls|exe|pdf|ppt|txt|tar|mid|midi|wav|bmp|rtf|js)&lt;/span&gt;$ &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;root&lt;/span&gt; &lt;span class="s"&gt;/path/to/wordpress&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kn"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(-f&lt;/span&gt; &lt;span class="nv"&gt;$request_filename&lt;/span&gt;&lt;span class="s"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kn"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(-d&lt;/span&gt; &lt;span class="nv"&gt;$request_filename&lt;/span&gt;&lt;span class="s"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kn"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$supercache_file&lt;/span&gt; &lt;span class="s"&gt;.&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kn"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$supercache_uri&lt;/span&gt; &lt;span class="nv"&gt;$request_uri&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kn"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$request_method&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="s"&gt;POST)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$supercache_uri&lt;/span&gt; &lt;span class="s"&gt;.&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kn"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$query_string&lt;/span&gt;&lt;span class="s"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$supercache_uri&lt;/span&gt; &lt;span class="s"&gt;.&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kn"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$http_cookie&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt;&lt;span class="sr"&gt;*&lt;/span&gt; &lt;span class="s"&gt;.comment_author_|wordpress|wp-postpass_.)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$supercache_uri&lt;/span&gt; &lt;span class="s"&gt;.&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kn"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$supercache_uri&lt;/span&gt; &lt;span class="p"&gt;~&lt;/span&gt; &lt;span class="sr"&gt;^(.+)$)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;$supercache_file&lt;/span&gt; &lt;span class="s"&gt;/wp-content/cache/supercache/&lt;/span&gt;&lt;span class="nv"&gt;$http_host/$1index.html&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="kn"&gt;if&lt;/span&gt; &lt;span class="s"&gt;(-f&lt;/span&gt; &lt;span class="nv"&gt;$document_root$supercache_file&lt;/span&gt;&lt;span class="s"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kn"&gt;rewrite&lt;/span&gt; &lt;span class="s"&gt;^(.*)&lt;/span&gt;$ &lt;span class="nv"&gt;$supercache_file&lt;/span&gt; &lt;span class="s"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, this is rather simple, I patched it together from some
articles already out there on Google, made a couple of changes where
required. The main thing here is that we turn “proxy_redirect” off, and
you may also notice I am pointing at apache.syslog.tv, this domain
doesn’t exist, I just created an instance of it pointing to Apache’s
local &lt;span class="caps"&gt;IP&lt;/span&gt; in /etc/hosts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="more-hurdles"&gt;
&lt;h2&gt;More hurdles&lt;/h2&gt;
&lt;p&gt;I ran in to some initial problems with this though, sadly. Problems I
was unable to really find a solution to for some time. The first problem
was speed, or lack of it in fact. Apache was quite literally dying on
me, a restart of Apache temporarily solved this problem, in the process
I also restarted nginx, this was probably a bad idea. I’d been tinkering
with the nginx config, setting gzip vars and other things, this caused
serious problems and made nginx throw 301 redirects for every single
http request, Apache also threw 301 redirects just to complete the cycle
of infinite loop. Needless to say I maxed out memory in no time.&lt;/p&gt;
&lt;p&gt;I reverted my changes and then found that the caching seemed to be
playing up now, eventually I noticed that this was actually due to my
.htaccess having the supercache data at the bottom of the file, instead
of the top. Fixed.&lt;/p&gt;
&lt;p&gt;Again came the speed problems, I noticed that when I used Ctrl+F5
instead of just F5 or opened the site in Firefox instead of Chrome I was
getting the same slow speed problems. While trying to watch my logs go
speeding by I found some very interesting messages. The first was from
mod_spamhaus which claimed my &lt;span class="caps"&gt;IP&lt;/span&gt; address was blacklisted, I ran to
their website and did a lookup, thankfully it seems to only be a local
blacklist, against my better judgement I disable mod_spamhaus for the
time being. The other issue was coming from mod_evasive, a few quick
config changes for it to handle lots of proxied requests from nginx when
the cache was old or not there.&lt;/p&gt;
&lt;p&gt;And that solved it, solved excluding mod_spamhaus. Now I need to either
find a solution or weigh the pros and cons of mod_spamhaus.&lt;/p&gt;
&lt;/div&gt;
</content><category term="tutorials"></category><category term="apache"></category><category term="cache"></category><category term="debian"></category><category term="nginx"></category><category term="wordpress"></category></entry></feed>