<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="/theme/xsl/atom.xsl" type="text/xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>kura.gg - coding</title><link href="https://kura.gg/" rel="alternate"></link><link href="https://kura.gg/feeds/coding.atom.xml" rel="self"></link><id>https://kura.gg/</id><updated>2016-05-21T00:20:00+01:00</updated><entry><title>Blackhole 2.0: or, How I Learned to Love Asyncio</title><link href="https://kura.gg/2016/05/21/blackhole-2.0-or-how-i-learned-to-love-asyncio/" rel="alternate"></link><published>2016-05-21T00:20:00+01:00</published><updated>2016-05-21T00:20:00+01:00</updated><author><name>kura</name></author><id>tag:kura.gg,2016-05-21:/2016/05/21/blackhole-2.0-or-how-i-learned-to-love-asyncio/</id><summary type="html">
&lt;p&gt;A brief history of a tiny part of the Internet.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://blackhole.io/1"&gt;Blackhole 1 — Blackhole as it was originally
known&lt;/a&gt; — was written on &lt;a class="reference external" href="https://docs.python.org/2/whatsnew/2.7.html"&gt;Python 2.7&lt;/a&gt;, briefly supporting &lt;a class="reference external" href="https://docs.python.org/2.6/whatsnew/2.6.html"&gt;Python 2.6&lt;/a&gt; for a time and also
supporting early version of &lt;a class="reference external" href="https://docs.python.org/3.2/whatsnew/3.2.html"&gt;Python 3&lt;/a&gt;, &lt;a class="reference external" href="https://www.pypy.org/features.html"&gt;PyPy 2&lt;/a&gt; and &lt;a class="reference external" href="https://www.pypy.org/features.html"&gt;PyPy 3&lt;/a&gt;. Built on top of &lt;a class="reference external" href="https://www.tornadoweb.org/en/stable/"&gt;Tornado&lt;/a&gt;, it was asynchronous in a fashion and
— quite simply — worked.&lt;/p&gt;
&lt;p&gt;The original prototype that became Blackhole was &lt;a class="reference external" href="/simplemta"&gt;SimpleMTA&lt;/a&gt; — a
prototype that was created quickly, to serve a very simple testing purpose that
I had for it.&lt;/p&gt;
&lt;p&gt;As I needed SimpleMTA to do more, I wrote Blackhole to accomplish that task.
I’d been using Tornado a bit and wanted to experiment with it more. Building
on top of Tornado created some oddities in how the program was designed and
that always irked me.&lt;/p&gt;
&lt;p&gt;Between the time of the last 1.8.X and the 2.0 release, I experimented with …&lt;/p&gt;</summary><content type="html">
&lt;p&gt;A brief history of a tiny part of the Internet.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://blackhole.io/1"&gt;Blackhole 1 — Blackhole as it was originally
known&lt;/a&gt; — was written on &lt;a class="reference external" href="https://docs.python.org/2/whatsnew/2.7.html"&gt;Python 2.7&lt;/a&gt;, briefly supporting &lt;a class="reference external" href="https://docs.python.org/2.6/whatsnew/2.6.html"&gt;Python 2.6&lt;/a&gt; for a time and also
supporting early version of &lt;a class="reference external" href="https://docs.python.org/3.2/whatsnew/3.2.html"&gt;Python 3&lt;/a&gt;, &lt;a class="reference external" href="https://www.pypy.org/features.html"&gt;PyPy 2&lt;/a&gt; and &lt;a class="reference external" href="https://www.pypy.org/features.html"&gt;PyPy 3&lt;/a&gt;. Built on top of &lt;a class="reference external" href="https://www.tornadoweb.org/en/stable/"&gt;Tornado&lt;/a&gt;, it was asynchronous in a fashion and
— quite simply — worked.&lt;/p&gt;
&lt;p&gt;The original prototype that became Blackhole was &lt;a class="reference external" href="/simplemta"&gt;SimpleMTA&lt;/a&gt; — a
prototype that was created quickly, to serve a very simple testing purpose that
I had for it.&lt;/p&gt;
&lt;p&gt;As I needed SimpleMTA to do more, I wrote Blackhole to accomplish that task.
I’d been using Tornado a bit and wanted to experiment with it more. Building
on top of Tornado created some oddities in how the program was designed and
that always irked me.&lt;/p&gt;
&lt;p&gt;Between the time of the last 1.8.X and the 2.0 release, I experimented with
rewriting the program on top of various libraries. The most obvious of these
was &lt;a class="reference external" href="https://twistedmatrix.com/trac/"&gt;Twisted&lt;/a&gt;. I’ve always been a fan of
Twisted but I don’t like &lt;tt class="docutils literal"&gt;theFormattingOfItsFunctionNames&lt;/tt&gt; and — like too
much of a good thing — callbacks can be bad for you.&lt;/p&gt;
&lt;p&gt;Another experiment was built on top of the old &lt;a class="reference external" href="https://docs.python.org/2/library/asyncore.html"&gt;asyncore&lt;/a&gt; and &lt;a class="reference external" href="https://docs.python.org/2/library/asynchat.html"&gt;asynchat&lt;/a&gt; standard library modules. A
branch of Blackhole 1.8 is indeed built and in working order built on top of
these very modules. Although never merged and released in the wild.&lt;/p&gt;
&lt;div class="section" id="enter-asyncio"&gt;
&lt;h2&gt;Enter asyncio&lt;/h2&gt;
&lt;p&gt;Originating as &lt;a class="reference external" href="https://github.com/python/asyncio"&gt;Tulip&lt;/a&gt; and merged in to
the Python standard library in &lt;a class="reference external" href="https://docs.python.org/3.4/whatsnew/3.4.html"&gt;Python 3.4&lt;/a&gt;, asyncio looked like a great
module to achieve what I wanted to achieve and to force me to actually use
Python 3.&lt;/p&gt;
&lt;p&gt;With &lt;a class="reference external" href="https://docs.python.org/3.5/whatsnew/3.5.html"&gt;Python 3.5&lt;/a&gt; came the
&lt;a class="reference external" href="https://docs.python.org/3.5/reference/compound_stmts.html#async-def"&gt;async def&lt;/a&gt;
declaration, the &lt;a class="reference external" href="https://docs.python.org/3.5/reference/expressions.html#await"&gt;await&lt;/a&gt; expression and
the &lt;a class="reference external" href="https://docs.python.org/3.5/reference/compound_stmts.html#async-for"&gt;async for&lt;/a&gt; statement.&lt;/p&gt;
&lt;p&gt;Since Blackhole is a tool written by me, for me and exposed as a service, it
made complete sense for me to jump-in-at-the-deep-end as it were and rewrite
the entirety of the software specifically for Python 3.5.&lt;/p&gt;
&lt;p&gt;Doing so meant I bypassed the need to use the &lt;tt class="docutils literal"&gt;@coroutine&lt;/tt&gt; decorator and the
&lt;tt class="docutils literal"&gt;yield from&lt;/tt&gt; expression, instead using their 3.5 equivalents in &lt;tt class="docutils literal"&gt;async def&lt;/tt&gt;
and &lt;tt class="docutils literal"&gt;await&lt;/tt&gt; respectively.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="all-i-see-are-bytes"&gt;
&lt;h2&gt;All I see are bytes&lt;/h2&gt;
&lt;p&gt;The trickest part for me was forcing myself to remember that the data passed
to and from the socket in Python 3 are bytes.&lt;/p&gt;
&lt;p&gt;That took a little while of constantly smashing my head in to my desk to
realise and remember. If something didn’t work during development, it was
always because I forgot to use &lt;tt class="docutils literal"&gt;.encode()&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;.decode()&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="getting-to-grips-with-asyncio"&gt;
&lt;h2&gt;Getting to grips with asyncio&lt;/h2&gt;
&lt;p&gt;I can honestly say that, with a little reading and checking out how some
libraries like &lt;a class="reference external" href="https://github.com/KeepSafe/aiohttp"&gt;aiohttp&lt;/a&gt; work, I got to
grips with the actual &lt;tt class="docutils literal"&gt;asyncio&lt;/tt&gt; module pretty quickly.&lt;/p&gt;
&lt;p&gt;I found using the &lt;tt class="docutils literal"&gt;async def&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;await&lt;/tt&gt; syntax made it even easier for me
to read and write the code, because I instantly knew how a function I’d written
previously should work, simply by looking at it’s declaration. Something I
have sometimes forgotten when passing callbacks all over the place.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="show-me-the-code"&gt;
&lt;h2&gt;Show me the code&lt;/h2&gt;
&lt;p&gt;So, let’s take a specific task and look at the code that handles it, written
on top of asyncio in Python 3.5.&lt;/p&gt;
&lt;p&gt;First up I’ll show the method that waits for data to be received on the socket.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Wait for data from the client.&lt;/span&gt;
&lt;span class="sd"&gt;    :returns: A line of received data.&lt;/span&gt;
&lt;span class="sd"&gt;    :rtype: :any:`str`&lt;/span&gt;
&lt;span class="sd"&gt;    .. note::&lt;/span&gt;
&lt;span class="sd"&gt;       Also handles client timeouts if they wait too long before sending&lt;/span&gt;
&lt;span class="sd"&gt;       data. -- https://blackhole.io/configuration-options.html#timeout&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connection_closed&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_reader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                                          &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                          &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TimeoutError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This function waits for data to be received from a client and returns it once
it’s been received.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The declaration of this function is different to how you’d write it for Python
3.4 or lower.&lt;/p&gt;
&lt;p&gt;The equivalent of this declaration for Python 3.4 is as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nd"&gt;@coroutine&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;wait&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Both ways declare that the function is an asynchronous coroutine.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connection_close&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This line does exactly what you’d expect, it runs the while loop until
&lt;tt class="docutils literal"&gt;self.connection_closed&lt;/tt&gt; does not equal &lt;tt class="docutils literal"&gt;False&lt;/tt&gt; or until the loop is exited
for another reason.&lt;/p&gt;
&lt;p&gt;This simply allows the connection handler to have connection state and stop
waiting for data if the connection is terminated elsewhere. Because the
entire program is asynchronous, the connection state may get modified elsewhere
while this method is still waiting for new data.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;try except&lt;/tt&gt; block actually works with the while statement.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_reader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                                  &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                  &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It’s easier to explain the arguments of the &lt;tt class="docutils literal"&gt;wait_for&lt;/tt&gt; method before anything else.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;self._reader.readline()&lt;/tt&gt; reads a line of data from a socket stream,
&lt;tt class="docutils literal"&gt;self.config.timeout&lt;/tt&gt; is the maximum time in seconds to wait for data, for
the sake of this example, let’s call it &lt;tt class="docutils literal"&gt;10&lt;/tt&gt; and finally &lt;tt class="docutils literal"&gt;loop=self.loop&lt;/tt&gt;
sets the event loop that the code executes on.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;asyncio.wait_for&lt;/tt&gt; creates an asynchronous task that waits for the
&lt;tt class="docutils literal"&gt;self._reader.readline()&lt;/tt&gt; future to complete or raises an
&lt;tt class="docutils literal"&gt;asyncio.TimeoutError&lt;/tt&gt; if the future does not complete within the time limit.&lt;/p&gt;
&lt;p&gt;As a example.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wait_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_reader&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Would wait for data for 10 seconds before raising a timeout error.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;asyncio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TimeoutError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;How the exception is handled shows how the &lt;tt class="docutils literal"&gt;while&lt;/tt&gt; statement is used. When a
timeout exception is raised, part of the code that handles that in the
&lt;tt class="docutils literal"&gt;self.timeout()&lt;/tt&gt; method changes the &lt;tt class="docutils literal"&gt;connection_closed&lt;/tt&gt; value.&lt;/p&gt;
&lt;p&gt;And finally the data received is returned.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Without going in to too much detail, below is the piece of code for handling
a timeout and terminating a connection, setting &lt;tt class="docutils literal"&gt;connection_closed&lt;/tt&gt; to exit
all possibly running &lt;tt class="docutils literal"&gt;while&lt;/tt&gt; loops.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Timeout a client connection.&lt;/span&gt;
&lt;span class="sd"&gt;    Sends the 421 timeout message to the client and closes the connection.&lt;/span&gt;
&lt;span class="sd"&gt;    https://blackhole.io/configuration-options.html#timeout&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;421&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Timeout'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Close the connection from the client."""&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_writer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clients&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_writer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;pass&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drain&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_connection_closed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="lambda-woes-aka-use-functools-partial"&gt;
&lt;h2&gt;lambda woes aka. use functools.partial&lt;/h2&gt;
&lt;p&gt;Later in the development of the new version of blackhole I added a feature
called &lt;tt class="docutils literal"&gt;flags&lt;/tt&gt;. These flags allow multiple listeners to be configured with
different runtime parameters. i.e. bounce all emails received on port 587
while accepting all emails received on port 25.&lt;/p&gt;
&lt;p&gt;These flags allow flexibility to control how email is handled on any specified port.&lt;/p&gt;
&lt;p&gt;It was during development of this feature that I discovered using a lambda
rather than a partial object from functools didn’t work quite how I was
expecting it to.&lt;/p&gt;
&lt;p&gt;The original piece of code iterated over each socket object and created an
asyncio server object for that socket as below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Create an asyncio 'server' for each socket."""&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;sock&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Smtp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clients&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                                               &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;servers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I wanted to change this code to pass in a set of flags that also belonged to
that specific socket, as below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Create an asyncio 'server' for each socket."""&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;sock&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;flags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'flags'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Smtp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clients&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                                            &lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                                               &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;servers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Can you spot the problem?&lt;/p&gt;
&lt;p&gt;When using a lambda in that context, creating an anonymous function to pass to
the &lt;tt class="docutils literal"&gt;create_server&lt;/tt&gt; method, I discovered the flag arguments were incorrect.
In fact, none of the sockets had their correct flags set, they were being
jumbled up instead of being used as expected.&lt;/p&gt;
&lt;p&gt;I’m not sure why that’s the case and I never actually looked it up to find out
why either. I knew the way to fix it was to use &lt;tt class="docutils literal"&gt;functools.partial&lt;/tt&gt; and it’s
also a nice, cleaner way to do it so I did.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""Create an asyncio 'server' for each socket."""&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;sock&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socks&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;flags&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'flags'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;factory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;functools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Smtp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clients&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;flags&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_server&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;servers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="so-is-asyncio-any-good"&gt;
&lt;h2&gt;So is asyncio any good?&lt;/h2&gt;
&lt;p&gt;I’m going to roundup this article with this possibly loaded and difficult question.&lt;/p&gt;
&lt;p&gt;Well, is it?&lt;/p&gt;
&lt;p&gt;In my eyes, yes. I have to admit that this is the first time in a very long
time — possibly ever — that I have fallen so head-over-heels in-love with a
library or module.&lt;/p&gt;
&lt;p&gt;I went from someone that didn’t use Python 3 and grudgingly added Python 3
support to libraries I’ve written, to someone that only uses Python 3.5 now.&lt;/p&gt;
&lt;p&gt;I haven’t use asyncio with Python 3.4 and I probably never will, I like the
3.5-only syntax changes far too much to go backwards and start using the
&lt;tt class="docutils literal"&gt;@coroutine&lt;/tt&gt; decorator and &lt;tt class="docutils literal"&gt;yield from&lt;/tt&gt; statement.&lt;/p&gt;
&lt;p&gt;My only gripe is that currently &lt;span class="caps"&gt;STARTTLS&lt;/span&gt; is not supported. Hopefully that will
arrive in the not-so-distant future and I understand why it’s currently not supported.&lt;/p&gt;
&lt;/div&gt;
</content><category term="coding"></category><category term="python"></category><category term="python3.5"></category><category term="3.5"></category><category term="asyncio"></category><category term="email"></category><category term="smtp"></category><category term="mta"></category></entry><entry><title>batfish(1) - writing a Digital Ocean V2 API wrapper</title><link href="https://kura.gg/2014/09/15/batfish-writing-a-digital-ocean-v2-api-wrapper/" rel="alternate"></link><published>2014-09-15T22:20:00+01:00</published><updated>2014-09-15T22:20:00+01:00</updated><author><name>kura</name></author><id>tag:kura.gg,2014-09-15:/2014/09/15/batfish-writing-a-digital-ocean-v2-api-wrapper/</id><summary type="html">
&lt;p&gt;Batfish is a Python client and &lt;span class="caps"&gt;API&lt;/span&gt; wrapper for the &lt;a class="reference external" href="https://developers.digitalocean.com/"&gt;Digital Ocean V2 &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt;. It can be used as a library module in
your own Python code but also provides a &lt;span class="caps"&gt;CLI&lt;/span&gt; interface and a shell-like command interpreter.&lt;/p&gt;
&lt;p&gt;Batfish is still under development and is considered in the Alpha stage. It is
not yet available via PyPI but can be tried out using the &lt;a class="reference external" href="https://github.com/kura/batfish"&gt;code available on
GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There is a small amount of &lt;a class="reference external" href="https://batfish.readthedocs.org"&gt;documentation available on Read The Docs&lt;/a&gt; and tests are still being written to get as
much coverage as possible and eaked out all of the bugs. You can find the
&lt;a class="reference external" href="https://travis-ci.org/kura/batfish"&gt;latest test status on Travis &lt;span class="caps"&gt;CI&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="module-interface"&gt;
&lt;h2&gt;Module interface&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;batfish&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authorize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"abcde12345"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;droplets&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Droplet&lt;/span&gt; &lt;span class="n"&gt;ego&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kura&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gg&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Droplet&lt;/span&gt; &lt;span class="n"&gt;fax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kura&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gg&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Droplet&lt;/span&gt; &lt;span class="n"&gt;jet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kura&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gg&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Droplet&lt;/span&gt; &lt;span class="n"&gt;ski&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kura&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gg&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;droplet_reboot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1234&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="cli-interface"&gt;
&lt;h2&gt;&lt;span class="caps"&gt;CLI&lt;/span&gt; interface&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;batfish&lt;span class="w"&gt; &lt;/span&gt;authorize
abcde12345
$&lt;span class="w"&gt; &lt;/span&gt;batfish&lt;span class="w"&gt; &lt;/span&gt;droplets
ego …&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">
&lt;p&gt;Batfish is a Python client and &lt;span class="caps"&gt;API&lt;/span&gt; wrapper for the &lt;a class="reference external" href="https://developers.digitalocean.com/"&gt;Digital Ocean V2 &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt;. It can be used as a library module in
your own Python code but also provides a &lt;span class="caps"&gt;CLI&lt;/span&gt; interface and a shell-like command interpreter.&lt;/p&gt;
&lt;p&gt;Batfish is still under development and is considered in the Alpha stage. It is
not yet available via PyPI but can be tried out using the &lt;a class="reference external" href="https://github.com/kura/batfish"&gt;code available on
GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There is a small amount of &lt;a class="reference external" href="https://batfish.readthedocs.org"&gt;documentation available on Read The Docs&lt;/a&gt; and tests are still being written to get as
much coverage as possible and eaked out all of the bugs. You can find the
&lt;a class="reference external" href="https://travis-ci.org/kura/batfish"&gt;latest test status on Travis &lt;span class="caps"&gt;CI&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="module-interface"&gt;
&lt;h2&gt;Module interface&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;batfish&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authorize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"abcde12345"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;droplets&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Droplet&lt;/span&gt; &lt;span class="n"&gt;ego&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kura&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gg&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Droplet&lt;/span&gt; &lt;span class="n"&gt;fax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kura&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gg&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Droplet&lt;/span&gt; &lt;span class="n"&gt;jet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kura&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gg&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Droplet&lt;/span&gt; &lt;span class="n"&gt;ski&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kura&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gg&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;droplet_reboot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1234&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="cli-interface"&gt;
&lt;h2&gt;&lt;span class="caps"&gt;CLI&lt;/span&gt; interface&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;batfish&lt;span class="w"&gt; &lt;/span&gt;authorize
abcde12345
$&lt;span class="w"&gt; &lt;/span&gt;batfish&lt;span class="w"&gt; &lt;/span&gt;droplets
ego.kura.gg&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;id:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;12345&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;cpu&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;mem:&lt;span class="w"&gt; &lt;/span&gt;512MB,&lt;span class="w"&gt; &lt;/span&gt;disk:&lt;span class="w"&gt; &lt;/span&gt;20GB,&lt;span class="w"&gt; &lt;/span&gt;ip:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;123&lt;/span&gt;.123.123.123&lt;span class="w"&gt; &lt;/span&gt;status:&lt;span class="w"&gt; &lt;/span&gt;active,&lt;span class="w"&gt; &lt;/span&gt;region:&lt;span class="w"&gt; &lt;/span&gt;Amsterdam&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
fax.kura.gg&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;id:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;12346&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;cpu&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;mem:&lt;span class="w"&gt; &lt;/span&gt;512MB,&lt;span class="w"&gt; &lt;/span&gt;disk:&lt;span class="w"&gt; &lt;/span&gt;20GB,&lt;span class="w"&gt; &lt;/span&gt;ip:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;123&lt;/span&gt;.123.123.123&lt;span class="w"&gt; &lt;/span&gt;status:&lt;span class="w"&gt; &lt;/span&gt;active,&lt;span class="w"&gt; &lt;/span&gt;region:&lt;span class="w"&gt; &lt;/span&gt;Amsterdam&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
jet.kura.gg&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;id:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;12347&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;cpu&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;mem:&lt;span class="w"&gt; &lt;/span&gt;512MB,&lt;span class="w"&gt; &lt;/span&gt;disk:&lt;span class="w"&gt; &lt;/span&gt;20GB,&lt;span class="w"&gt; &lt;/span&gt;ip:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;123&lt;/span&gt;.123.123.123&lt;span class="w"&gt; &lt;/span&gt;status:&lt;span class="w"&gt; &lt;/span&gt;active,&lt;span class="w"&gt; &lt;/span&gt;region:&lt;span class="w"&gt; &lt;/span&gt;Amsterdam&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
ski.kura.gg&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;id:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;12348&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;cpu&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;mem:&lt;span class="w"&gt; &lt;/span&gt;512MB,&lt;span class="w"&gt; &lt;/span&gt;disk:&lt;span class="w"&gt; &lt;/span&gt;20GB,&lt;span class="w"&gt; &lt;/span&gt;ip:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;123&lt;/span&gt;.123.123.123&lt;span class="w"&gt; &lt;/span&gt;status:&lt;span class="w"&gt; &lt;/span&gt;active,&lt;span class="w"&gt; &lt;/span&gt;region:&lt;span class="w"&gt; &lt;/span&gt;Amsterdam&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
$&lt;span class="w"&gt; &lt;/span&gt;batfish&lt;span class="w"&gt; &lt;/span&gt;droplet_reboot&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;12345&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="console-interface"&gt;
&lt;h2&gt;Console interface&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;batfish&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;authorize
abcde12345
batfish&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;droplets
ego.kura.gg&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;id:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;12345&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;cpu&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;mem:&lt;span class="w"&gt; &lt;/span&gt;512MB,&lt;span class="w"&gt; &lt;/span&gt;disk:&lt;span class="w"&gt; &lt;/span&gt;20GB,&lt;span class="w"&gt; &lt;/span&gt;ip:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;123&lt;/span&gt;.123.123.123&lt;span class="w"&gt; &lt;/span&gt;status:&lt;span class="w"&gt; &lt;/span&gt;active,&lt;span class="w"&gt; &lt;/span&gt;region:&lt;span class="w"&gt; &lt;/span&gt;Amsterdam&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
fax.kura.gg&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;id:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;12346&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;cpu&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;mem:&lt;span class="w"&gt; &lt;/span&gt;512MB,&lt;span class="w"&gt; &lt;/span&gt;disk:&lt;span class="w"&gt; &lt;/span&gt;20GB,&lt;span class="w"&gt; &lt;/span&gt;ip:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;123&lt;/span&gt;.123.123.123&lt;span class="w"&gt; &lt;/span&gt;status:&lt;span class="w"&gt; &lt;/span&gt;active,&lt;span class="w"&gt; &lt;/span&gt;region:&lt;span class="w"&gt; &lt;/span&gt;Amsterdam&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
jet.kura.gg&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;id:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;12347&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;cpu&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;mem:&lt;span class="w"&gt; &lt;/span&gt;512MB,&lt;span class="w"&gt; &lt;/span&gt;disk:&lt;span class="w"&gt; &lt;/span&gt;20GB,&lt;span class="w"&gt; &lt;/span&gt;ip:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;123&lt;/span&gt;.123.123.123&lt;span class="w"&gt; &lt;/span&gt;status:&lt;span class="w"&gt; &lt;/span&gt;active,&lt;span class="w"&gt; &lt;/span&gt;region:&lt;span class="w"&gt; &lt;/span&gt;Amsterdam&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
ski.kura.gg&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;id:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;12348&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;cpu&lt;span class="o"&gt;(&lt;/span&gt;s&lt;span class="o"&gt;)&lt;/span&gt;:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,&lt;span class="w"&gt; &lt;/span&gt;mem:&lt;span class="w"&gt; &lt;/span&gt;512MB,&lt;span class="w"&gt; &lt;/span&gt;disk:&lt;span class="w"&gt; &lt;/span&gt;20GB,&lt;span class="w"&gt; &lt;/span&gt;ip:&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;123&lt;/span&gt;.123.123.123&lt;span class="w"&gt; &lt;/span&gt;status:&lt;span class="w"&gt; &lt;/span&gt;active,&lt;span class="w"&gt; &lt;/span&gt;region:&lt;span class="w"&gt; &lt;/span&gt;Amsterdam&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
batfish&amp;gt;&lt;span class="w"&gt; &lt;/span&gt;droplet_reboot&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;12345&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="coding"></category><category term="python"></category><category term="digital ocean"></category></entry><entry><title>yarg(1) — A semi hard Cornish cheese, also queries PyPI</title><link href="https://kura.gg/2014/08/09/yarg/" rel="alternate"></link><published>2014-08-09T13:30:00+01:00</published><updated>2014-08-09T13:30:00+01:00</updated><author><name>kura</name></author><id>tag:kura.gg,2014-08-09:/2014/08/09/yarg/</id><content type="html">
&lt;p&gt;Yarg is a PyPI client, it was written for &lt;a class="reference external" href="https://pypip.in"&gt;pypip.in&lt;/a&gt; and can search packages as well as read the &lt;span class="caps"&gt;RSS&lt;/span&gt; feeds
from PyPI for new packages and new package version releases.&lt;/p&gt;
&lt;div class="section" id="search-interface"&gt;
&lt;h2&gt;Search interface&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;yarg&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yarg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"yarg"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;'yarg'&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;
&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;'Kura'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;'kura@kura.gg'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="newest-packages-interface"&gt;
&lt;h2&gt;Newest packages interface&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;yarg&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;packages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yarg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newest_packages&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;packages&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Package&lt;/span&gt; &lt;span class="n"&gt;yarg&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Package&lt;/span&gt; &lt;span class="n"&gt;gray&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Package&lt;/span&gt; &lt;span class="n"&gt;ragy&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;'yarg'&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;
&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;'https://pypi.python.org/pypi/yarg&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="updated-packages-interface"&gt;
&lt;h2&gt;Updated packages interface&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;yarg&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;packages&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yarg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;latest_updated_packages&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;packages&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Package&lt;/span&gt; &lt;span class="n"&gt;yarg&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Package&lt;/span&gt; &lt;span class="n"&gt;gray&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Package&lt;/span&gt; &lt;span class="n"&gt;ragy&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;
&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;'yarg'&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;
&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;'0.1.2'&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;packages&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;
&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;'https://pypi.python.org/pypi/yarg/0.1.2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="documentation"&gt;
&lt;h2&gt;Documentation&lt;/h2&gt;
&lt;p&gt;Full documentation is at &amp;lt;&lt;a class="reference external" href="https://yarg.readthedocs.org"&gt;https://yarg.readthedocs.org&lt;/a&gt;&amp;gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="coding"></category><category term="python"></category><category term="pypi"></category></entry><entry><title>Speeding up pypip.in and reducing load on PyPI</title><link href="https://kura.gg/2014/08/07/speeding-up-pypip.in-and-reducing-load-on-pypi/" rel="alternate"></link><published>2014-08-07T08:42:00+01:00</published><updated>2014-08-07T08:42:00+01:00</updated><author><name>kura</name></author><id>tag:kura.gg,2014-08-07:/2014/08/07/speeding-up-pypip.in-and-reducing-load-on-pypi/</id><summary type="html">
&lt;p&gt;As you might expect, &lt;a class="reference external" href="https://pypip.in"&gt;pypip.in&lt;/a&gt; employes a fair amount of
caching in the backend to control load on the imaging &lt;span class="caps"&gt;API&lt;/span&gt; and servers.&lt;/p&gt;
&lt;p&gt;For a long time, this cache was entirely managed by Varnish and was doing a
fantastic job. Varnish has a hit:miss ratio of 10:1, for every 10 hits we get
1 miss. This is a fairly decent ratio when you consider where these images are
displayed, how often they are viewed and that Varnish only caches the images
for an hour.&lt;/p&gt;
&lt;div class="section" id="the-impact-on-pypi"&gt;
&lt;h2&gt;The impact on PyPI&lt;/h2&gt;
&lt;p&gt;You will firstly need to understand how pypip.in used to work to understand the
changes that were made and why they were made.&lt;/p&gt;
&lt;p&gt;Let’s set up the request first - a request for a shield is made and it is not
present in the Varnish cache.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Request received in API layer
              |
              v
    API layer queries PyPI
              |
              v
   PyPI …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">
&lt;p&gt;As you might expect, &lt;a class="reference external" href="https://pypip.in"&gt;pypip.in&lt;/a&gt; employes a fair amount of
caching in the backend to control load on the imaging &lt;span class="caps"&gt;API&lt;/span&gt; and servers.&lt;/p&gt;
&lt;p&gt;For a long time, this cache was entirely managed by Varnish and was doing a
fantastic job. Varnish has a hit:miss ratio of 10:1, for every 10 hits we get
1 miss. This is a fairly decent ratio when you consider where these images are
displayed, how often they are viewed and that Varnish only caches the images
for an hour.&lt;/p&gt;
&lt;div class="section" id="the-impact-on-pypi"&gt;
&lt;h2&gt;The impact on PyPI&lt;/h2&gt;
&lt;p&gt;You will firstly need to understand how pypip.in used to work to understand the
changes that were made and why they were made.&lt;/p&gt;
&lt;p&gt;Let’s set up the request first - a request for a shield is made and it is not
present in the Varnish cache.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Request received in API layer
              |
              v
    API layer queries PyPI
              |
              v
   PyPI response translated
              |
              v
Image request for imaging layer
&lt;/pre&gt;
&lt;p&gt;This was true for every request made that did not exist in Varnish’s cache.&lt;/p&gt;
&lt;p&gt;Generally, if one shield was displayed for a project a second or more usually
was displayed too. This meant when loading the &lt;span class="caps"&gt;README&lt;/span&gt; document on GitHub for a
project would involve pypip.in making more than one request to PyPI for
information and then translating that data.&lt;/p&gt;
&lt;p&gt;I decided that caching the initial response for the first request from PyPI to
Redis would be a good idea. This cache is only meant to be short term and is in
place to make multiple images requested at the same time generate faster.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
       Request received in API layer
                     |
                     v
API layer queries Redis and falls back to PyPI
                     |
                     v
          PyPI response translated
                     |
                     v
       Image request for imaging layer
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="reducing-load-on-the-imaging-layer"&gt;
&lt;h2&gt;Reducing load on the imaging layer&lt;/h2&gt;
&lt;p&gt;I realised that out of all of the shields pypip.in serves, all but two of them
are generic and can be re-used.&lt;/p&gt;
&lt;p&gt;&lt;cite&gt;Downloads&lt;/cite&gt; and &lt;cite&gt;version&lt;/cite&gt; information are almost entirely unique but, &lt;cite&gt;Python
versions&lt;/cite&gt;, &lt;cite&gt;Python implementations&lt;/cite&gt;, &lt;cite&gt;development status&lt;/cite&gt;, &lt;cite&gt;wheel&lt;/cite&gt;, &lt;cite&gt;egg&lt;/cite&gt;,
&lt;cite&gt;format&lt;/cite&gt; and &lt;cite&gt;license&lt;/cite&gt; are all generic and will be identical for multiple projects.&lt;/p&gt;
&lt;p&gt;It would make perfect sense to cache these images and re-use them as required.
While caching them in Varnish would not be possible due to the &lt;span class="caps"&gt;URI&lt;/span&gt; structure,
caching the images on disk based on their data, colour and mime type would be
perfectly acceptable.&lt;/p&gt;
&lt;p&gt;The disks used to power pypip.in are of &lt;span class="caps"&gt;SSD&lt;/span&gt; quality (&lt;a class="reference external" href="https://www.digitalocean.com/?refcode=d76795840b23"&gt;thanks DigitalOcean&lt;/a&gt;,) so storing the images
on the disks themselves would be perfectly reasonable and, due to their nature
can be stored for a good length of time. I opted for 24 hours.&lt;/p&gt;
&lt;p&gt;Now the diagram looks like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
       Request received in API layer
                     |
                     v
API layer queries Redis and falls back to PyPI
                     |
                     v
          PyPI response translated
                     |
                     v
   Look for image in generic disk cache or
         request from imaging layer
&lt;/pre&gt;
&lt;p&gt;Due to the nature of the shields and their content, a request has to be made to
Redis or PyPI before a look up can be made to the generic disk cache (we need
to know the text data and shield colour from PyPI data,) it is still a very
good performance improvement on the whole.&lt;/p&gt;
&lt;/div&gt;
</content><category term="coding"></category><category term="python"></category><category term="pypipins"></category><category term="pypip.in"></category><category term="shields"></category></entry><entry><title>So you want to run your own copy of pypip.in?</title><link href="https://kura.gg/2014/07/26/so-you-want-to-run-your-own-copy-of-pypip.in/" rel="alternate"></link><published>2014-07-26T23:40:00+01:00</published><updated>2014-07-26T23:40:00+01:00</updated><author><name>kura</name></author><id>tag:kura.gg,2014-07-26:/2014/07/26/so-you-want-to-run-your-own-copy-of-pypip.in/</id><summary type="html">
&lt;p&gt;While pypip.in is available under the &lt;span class="caps"&gt;MIT&lt;/span&gt; license on &lt;a class="reference external" href="https://github.com/badges/pypipins"&gt;GitHub&lt;/a&gt;, it’s not explained how to really use it properly.&lt;/p&gt;
&lt;p&gt;You can gather how to set-up the Python source of the project and get the
&lt;a class="reference external" href="https://twistedmatrix.com"&gt;Twisted&lt;/a&gt; process running, this is totally reliant
on using the &lt;a class="reference external" href="https://img.shields.io"&gt;img.shields.io&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I decided to write this article explaining how to install your own copy of the
shields nodejs code, pypipin itself and even cover off supervisord and Varnish too.&lt;/p&gt;
&lt;div class="section" id="shields-nodejs"&gt;
&lt;h2&gt;shields &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; nodejs&lt;/h2&gt;
&lt;div class="section" id="nodejs"&gt;
&lt;h3&gt;nodejs&lt;/h3&gt;
&lt;p&gt;First of all you’ll need to get the latest source code copy of nodejs from the
&lt;a class="reference external" href="https://nodejs.org/download/"&gt;nodejs download page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Extract it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tar -xvzf node-&amp;lt;VERSION&amp;gt;.tar.gz
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd node-&amp;lt;VERSION&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You’ll need to install the build tools, if you don’t have them already.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install build-essential
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then make and install node.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make &amp;amp;&amp;amp; sudo make install
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="redis"&gt;
&lt;h3&gt;Redis&lt;/h3&gt;
&lt;p&gt;Redis is used to temporarily store PyPI responses.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo …&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">
&lt;p&gt;While pypip.in is available under the &lt;span class="caps"&gt;MIT&lt;/span&gt; license on &lt;a class="reference external" href="https://github.com/badges/pypipins"&gt;GitHub&lt;/a&gt;, it’s not explained how to really use it properly.&lt;/p&gt;
&lt;p&gt;You can gather how to set-up the Python source of the project and get the
&lt;a class="reference external" href="https://twistedmatrix.com"&gt;Twisted&lt;/a&gt; process running, this is totally reliant
on using the &lt;a class="reference external" href="https://img.shields.io"&gt;img.shields.io&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I decided to write this article explaining how to install your own copy of the
shields nodejs code, pypipin itself and even cover off supervisord and Varnish too.&lt;/p&gt;
&lt;div class="section" id="shields-nodejs"&gt;
&lt;h2&gt;shields &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; nodejs&lt;/h2&gt;
&lt;div class="section" id="nodejs"&gt;
&lt;h3&gt;nodejs&lt;/h3&gt;
&lt;p&gt;First of all you’ll need to get the latest source code copy of nodejs from the
&lt;a class="reference external" href="https://nodejs.org/download/"&gt;nodejs download page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Extract it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tar -xvzf node-&amp;lt;VERSION&amp;gt;.tar.gz
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd node-&amp;lt;VERSION&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You’ll need to install the build tools, if you don’t have them already.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install build-essential
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then make and install node.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make &amp;amp;&amp;amp; sudo make install
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="redis"&gt;
&lt;h3&gt;Redis&lt;/h3&gt;
&lt;p&gt;Redis is used to temporarily store PyPI responses.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install redis-server
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="shields"&gt;
&lt;h3&gt;shields&lt;/h3&gt;
&lt;p&gt;You’ll need to install git for the next step.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install git-core
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And get a copy of the shields repository.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone git@github.com:badges/shields.git
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once it’s checked out, you’ll need to install it’s requirements.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd shields &amp;amp;&amp;amp; npm install
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can confirm this works by running the shields server.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;node server 8080
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="pypipin"&gt;
&lt;h2&gt;pypipin&lt;/h2&gt;
&lt;p&gt;Clone the shields repository, the same way you did for shields above.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone git@github.com:badges/pypipins.git
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To do this properly, you’ll need to make sure you have virtualenv for Python.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install python-dev
wget -O - https://bootstrap.pypa.io/get-pip.py | sudo python
sudo pip install virtualenv
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, you’ll need to create a virtual environment.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;virtualenv /path/to/where/you/want/it/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then you can active it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;. /path/to/your/virtualenv/bin/activate
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And install the dev requirements from the pypipins directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install -r /path/to/pypipins/clone/requirements-dev.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You’ll need to edit shields.py, commenting out the img.shields.io host and
uncommon the local one.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/path/to/pypipins/clone/shields/shields.py


# SHIELD_URL = "https://img.shields.io/badge/%s-%s-%s.%s"
SHIELD_URL = "http://localhost:9000/badge/%s-%s-%s.%s"  # pypip.in uses a local version of img.shields.io
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once this is done, you can test the pypipins server.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/path/to/your/virtualenv/bin/python /path/to/pypipins/clone/shields/shields.py
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="supervisor-d"&gt;
&lt;h2&gt;supervisor(d)&lt;/h2&gt;
&lt;p&gt;Always install supervisor from apt, rather than from pip.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install supervisor
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then cd to where conf.d config files are stored for supervisor.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd /etc/supervisor/conf.d/
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In here, you’ll need to create a configuration for the shields nodejs server
and also for pypipins server.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;shields.conf


[program:shields]
directory=/path/to/shields/
command=node server 9000
stdout_logfile=/var/log/supervisor/shields.log
stderr_logfile=/var/log/supervisor/shields.error.log
user=www-data
group=www-data
autostart=true
autorestart=true
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pypipin.conf


[program:pypipin]
command=/path/to/virtualenv/bin/python /path/to/pypipin/clone/shields/shields.py
stdout_logfile=/var/log/supervisor/pypipin.log
stderr_logfile=/var/log/supervisor/pypipin.error.log
user=www-data
group=www-data
autostart=true
autorestart=true
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once this is done, you’ll need to load them in to supervisor itself.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo supervisorctl
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;reread
add shields
add pypipin
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now supervisor will automatically start both processes and keep them alive.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="varnish"&gt;
&lt;h2&gt;Varnish&lt;/h2&gt;
&lt;p&gt;The final step is to put Varnish in front of the system to cache images for you.
The shields server has the ability to use redis for caching but, I’d rather do
this with a proper &lt;span class="caps"&gt;HTTP&lt;/span&gt; cache rather than use redis.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install varnish
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tell Varnish to run on port 80.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/etc/default/varnish


DAEMON_OPTS="-a :80 \
             -T localhost:6082 \
             -f /etc/varnish/default.vcl \
             -S /etc/varnish/secret \
             -s malloc,256m"
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will run the Varnish &lt;span class="caps"&gt;HTTP&lt;/span&gt; server on port 80 and keep it’s admin interface
hidden from the world, binding it to port 6082 on the lo interface.&lt;/p&gt;
&lt;p&gt;The final step is to tell Varnish about the pypipins server.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/etc/varnish/default.vcl


backend default {
    .host = "127.0.0.1";
    .port = "8888";
}

sub vcl_recv {
    if (req.request != "GET") {
        return(pipe);
    }

    if (req.request == "GET") {
        remove req.http.cookie;
        remove req.http.authenticate;
        remove req.http.Etag;
        remove req.http.If-None-Match;
        return(lookup);
    }
    return(pass);
}

sub vcl_fetch {
    if (beresp.status &amp;gt;= 300) {
        return(hit_for_pass);
    }

    set beresp.ttl = 1h;
    set beresp.grace = 6h;
    unset beresp.http.Set-Cookie;
    unset beresp.http.Etag;
    unset beresp.http.Cache-Control;
    set beresp.http.Cache-Control = "no-cache";
    return (deliver);
}

sub vcl_deliver {
      if (obj.hits &amp;gt; 0) {
            set resp.http.X-Cache = "HIT";
            set resp.http.X-Cache-Hits = obj.hits;
      } else {
            set resp.http.X-Cache = "MISS";
      }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All done, restart Varnish.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo /etc/init.d/varnish restart
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You’ll be able to go to &lt;a class="reference external" href="http://yourserver.tld/download/PACKAGE/badge.svg"&gt;http://yourserver.tld/download/&amp;lt;&lt;span class="caps"&gt;PACKAGE&lt;/span&gt;&amp;gt;/badge.svg&lt;/a&gt; and everything should be
working as expected.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="notes-on-pypy"&gt;
&lt;h2&gt;Notes on PyPy&lt;/h2&gt;
&lt;p&gt;I personally use PyPy for running the pypipins server because, it’s a long
running process and PyPy speeds it up wonderfully.&lt;/p&gt;
&lt;p&gt;If you’re using Debian 7, the latest version of PyPy as of writing is 2.3.1 and
requires libffi6, if you’re using one of the prebuilt binaries. libffi6 is only
available in Jessie which is currently in testing.&lt;/p&gt;
&lt;p&gt;You can either use an older version of PyPy or, backport libffi6 from Jessie.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/etc/apt/sources.list


deb ftp://ftp.debian.org/debian/ jessie main
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/etc/apt/preferences.d/jessie


Package: *
Pin: release a=wheezy
Pin-Priority: 900

Package: libffi*
Pin: release a=jessie
Pin-Priority: 910
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will keep all packages pinned to wheezy except libffi+wildcard, which will
be pulled from Jessie.&lt;/p&gt;
&lt;p&gt;You can then simply install libffi6 from Jessie.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get update
sudo apt-get -u install libffi6/jessie
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ssl"&gt;
&lt;h2&gt;&lt;span class="caps"&gt;SSL&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;If you want to use &lt;span class="caps"&gt;SSL&lt;/span&gt; with your shields, you’ll need to install nginx in front
of Varnish.&lt;/p&gt;
&lt;p&gt;So instead of running Varnish on port 80, as shown above. Put it on a different
port, install and use nginx as you would for any other website and simply proxy
all requests back to Varnish.&lt;/p&gt;
&lt;/div&gt;
</content><category term="coding"></category><category term="python"></category><category term="pypipins"></category><category term="pypip.in"></category><category term="shields"></category></entry><entry><title>New pypip.in shields and styling</title><link href="https://kura.gg/2014/07/25/new-pypip.in-shields-and-styling/" rel="alternate"></link><published>2014-07-25T01:00:00+01:00</published><updated>2014-07-25T01:00:00+01:00</updated><author><name>kura</name></author><id>tag:kura.gg,2014-07-25:/2014/07/25/new-pypip.in-shields-and-styling/</id><summary type="html">
&lt;div class="section" id="supported-python-versions"&gt;
&lt;h2&gt;Supported Python versions&lt;/h2&gt;
&lt;p&gt;This one is generated from the list of classifiers you provide to PyPI.&lt;/p&gt;
&lt;p&gt;If no Python version classifiers exist, it defaults to Python 2.7. This is
because really, Python 3 is not widely used in production or supported by libraries.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="python-implementation-s"&gt;
&lt;h2&gt;Python implementation(s)&lt;/h2&gt;
&lt;p&gt;I think this one is really cool. Chances are you’re unlikely to get more than
two supported implementations, like CPython and PyPy or CPython and Stackless.&lt;/p&gt;
&lt;p&gt;The shield uses the Python implementation classifiers to generate this shield.
It supports all classifiers that PyPI supports (CPython, Jython, Iron Python,
PyPy and Stackless) and defaults to CPython is none are set.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="styling-changes"&gt;
&lt;h2&gt;Styling changes&lt;/h2&gt;
&lt;p&gt;This change is simply because of the upgrade of the shields library. This
allows us to use the default rounded badges like below.&lt;/p&gt;
&lt;p&gt;But also allow you to use a much nicer, cleaner, flat styling like the ones
used on this …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
&lt;div class="section" id="supported-python-versions"&gt;
&lt;h2&gt;Supported Python versions&lt;/h2&gt;
&lt;p&gt;This one is generated from the list of classifiers you provide to PyPI.&lt;/p&gt;
&lt;p&gt;If no Python version classifiers exist, it defaults to Python 2.7. This is
because really, Python 3 is not widely used in production or supported by libraries.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="python-implementation-s"&gt;
&lt;h2&gt;Python implementation(s)&lt;/h2&gt;
&lt;p&gt;I think this one is really cool. Chances are you’re unlikely to get more than
two supported implementations, like CPython and PyPy or CPython and Stackless.&lt;/p&gt;
&lt;p&gt;The shield uses the Python implementation classifiers to generate this shield.
It supports all classifiers that PyPI supports (CPython, Jython, Iron Python,
PyPy and Stackless) and defaults to CPython is none are set.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="styling-changes"&gt;
&lt;h2&gt;Styling changes&lt;/h2&gt;
&lt;p&gt;This change is simply because of the upgrade of the shields library. This
allows us to use the default rounded badges like below.&lt;/p&gt;
&lt;p&gt;But also allow you to use a much nicer, cleaner, flat styling like the ones
used on this page.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="svg-png"&gt;
&lt;h2&gt;&lt;span class="caps"&gt;SVG&lt;/span&gt; &amp;gt; &lt;span class="caps"&gt;PNG&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;The final change is that by default pypip.in now returns &lt;span class="caps"&gt;SVG&lt;/span&gt; images by default,
rather than &lt;span class="caps"&gt;PNG&lt;/span&gt;. You can of course get the badge in whatever format you wish.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;https://pypip.in/download/&amp;lt;PACKAGE&amp;gt;/badge.&amp;lt;MIMETYPE&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="coding"></category><category term="python"></category><category term="pypi"></category><category term="shields"></category></entry><entry><title>Pelican FontAwesome</title><link href="https://kura.gg/2014/06/08/pelican-fontawesome/" rel="alternate"></link><published>2014-06-08T11:30:00+01:00</published><updated>2014-06-08T11:30:00+01:00</updated><author><name>kura</name></author><id>tag:kura.gg,2014-06-08:/2014/06/08/pelican-fontawesome/</id><content type="html">
&lt;p&gt;Pelican FontAwesome allows you to embed &lt;a class="reference external" href="https://fortawesome.github.io/Font-Awesome/"&gt;FontAwesome&lt;/a&gt; icons in your &lt;span class="caps"&gt;RST&lt;/span&gt; posts and pages.&lt;/p&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;p&gt;To install pelican-fontawesome, simply install it from PyPI:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$&lt;span class="w"&gt; &lt;/span&gt;pip&lt;span class="w"&gt; &lt;/span&gt;install&lt;span class="w"&gt; &lt;/span&gt;pelican-fontawesome
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then enable it in your pelicanconf.py&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
    &lt;span class="s1"&gt;'pelican_fontawesome'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Include the FontAwesome &lt;span class="caps"&gt;CSS&lt;/span&gt; in your base template.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"//netdna.bootstrapcdn.com/font-awesome/4.1.0/css/font-awesome.min.css"&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"stylesheet"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="usage"&gt;
&lt;h2&gt;Usage&lt;/h2&gt;
&lt;p&gt;In your article or page, you simply need to add a reference to FontAwesome and
then the icon name.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;:fa:&lt;/span&gt;&lt;span class="nv"&gt;`fa-github`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which will result in:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;"fa fa-github"&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;span&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And the user will see: &lt;span class="fa fa-github"&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;You can also increase the size, just like the &lt;a class="reference external" href="https://fortawesome.github.io/Font-Awesome/examples/"&gt;FontAwesome documentation&lt;/a&gt; shows.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="na"&gt;:fa:&lt;/span&gt;&lt;span class="nv"&gt;`fa-github fa-4x`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Will result in: &lt;span class="fa fa-github fa-4x"&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="license"&gt;
&lt;h2&gt;License&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://opensource.org/licenses/MIT"&gt;&lt;span class="caps"&gt;MIT&lt;/span&gt;&lt;/a&gt; license.&lt;/p&gt;
&lt;/div&gt;
</content><category term="coding"></category><category term="pelican"></category><category term="fontawesome"></category><category term="icons"></category><category term="python"></category></entry><entry><title>Python platform and version dependent wheel build bot proposal</title><link href="https://kura.gg/2014/05/29/python-platform-and-version-dependent-wheel-build-bot-proposal/" rel="alternate"></link><published>2014-05-29T12:30:00+01:00</published><updated>2014-05-29T12:30:00+01:00</updated><author><name>kura</name></author><id>tag:kura.gg,2014-05-29:/2014/05/29/python-platform-and-version-dependent-wheel-build-bot-proposal/</id><summary type="html">&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;This proposal describes a build system for generating “wheel” archives and is
very, very informal. This plan was drawn up after a random discussion with
Jannis Liedel on Twitter and &lt;span class="caps"&gt;IRC&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Wheel files can be platform and Python-version dependent, a way of generating
these files automatically needs to be created and linked to the Packaging
Index (PyPI.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="design"&gt;
&lt;h2&gt;Design&lt;/h2&gt;
&lt;p&gt;After discussions with Jannis, I believe the simplest
solution would likely be the best solution for this problem. As such, I feel
that using a custom-built, lightweight solution makes more sense than using
something like buildbot.&lt;/p&gt;
&lt;div class="section" id="technology"&gt;
&lt;h3&gt;Technology&lt;/h3&gt;
&lt;p&gt;I feel the platform should leverage existing Python packages that are tried,
tested and well used in the community. Therefore I feel we should use a
combination of the following;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;RabbitMQ for queueing builds&lt;/li&gt;
&lt;li&gt;Celery for building wheels and&lt;/li&gt;
&lt;li&gt;pyenv for managing multiple Python versions&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="operating-systems"&gt;
&lt;h3&gt;Operating systems&lt;/h3&gt;
&lt;p&gt;I lack any understanding of Windows or …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="abstract"&gt;
&lt;h2&gt;Abstract&lt;/h2&gt;
&lt;p&gt;This proposal describes a build system for generating “wheel” archives and is
very, very informal. This plan was drawn up after a random discussion with
Jannis Liedel on Twitter and &lt;span class="caps"&gt;IRC&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Wheel files can be platform and Python-version dependent, a way of generating
these files automatically needs to be created and linked to the Packaging
Index (PyPI.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="design"&gt;
&lt;h2&gt;Design&lt;/h2&gt;
&lt;p&gt;After discussions with Jannis, I believe the simplest
solution would likely be the best solution for this problem. As such, I feel
that using a custom-built, lightweight solution makes more sense than using
something like buildbot.&lt;/p&gt;
&lt;div class="section" id="technology"&gt;
&lt;h3&gt;Technology&lt;/h3&gt;
&lt;p&gt;I feel the platform should leverage existing Python packages that are tried,
tested and well used in the community. Therefore I feel we should use a
combination of the following;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;RabbitMQ for queueing builds&lt;/li&gt;
&lt;li&gt;Celery for building wheels and&lt;/li&gt;
&lt;li&gt;pyenv for managing multiple Python versions&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="operating-systems"&gt;
&lt;h3&gt;Operating systems&lt;/h3&gt;
&lt;p&gt;I lack any understanding of Windows or Mac &lt;span class="caps"&gt;OS&lt;/span&gt; but, I believe the initial plan
should cover &lt;span class="caps"&gt;OS&lt;/span&gt; X and Linux, using a distro such as Ubuntu for building Linux packages.&lt;/p&gt;
&lt;p&gt;This way we can at least have wheels being built for &lt;span class="caps"&gt;OS&lt;/span&gt; X and Linux and work
on a plan to implement a Windows solution.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="pypi"&gt;
&lt;h2&gt;PyPI&lt;/h2&gt;
&lt;p&gt;My knowledge of PyPI internals are rather lacking, therefore I have no decided
how packages are passed to the build system to have their wheels built and
added to the PyPI warehouse.&lt;/p&gt;
&lt;p&gt;To begin with, we could simply provide a web form that allows a developer to
upload an sdist archive and be provided links to download their generated
wheel files.&lt;/p&gt;
&lt;p&gt;While this is not a good long term solution, it would at least allow for
testing of the build platform and for integration in to PyPI itself to be
fully discussed and implemented.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="notes"&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;This document is just a set of thoughts and ideas for how to do this, I’d
really like to get any feedback about this so we can action it and get
something going.&lt;/p&gt;
&lt;/div&gt;
</content><category term="coding"></category><category term="python"></category><category term="wheel"></category></entry><entry><title>tugboat-bash-completion</title><link href="https://kura.gg/2014/05/28/tugboat-bash-completion/" rel="alternate"></link><published>2014-05-28T09:00:00+01:00</published><updated>2014-05-28T09:00:00+01:00</updated><author><name>kura</name></author><id>tag:kura.gg,2014-05-28:/2014/05/28/tugboat-bash-completion/</id><summary type="html">
&lt;p&gt;tugboat-bash-completion is a bash completion script the &lt;a class="reference external" href="https://github.com/pearkes/tugboat"&gt;tugboat&lt;/a&gt; &lt;span class="caps"&gt;CLI&lt;/span&gt; interface for the &lt;a class="reference external" href="https://www.digitalocean.com/"&gt;Digital Ocean&lt;/a&gt; &lt;span class="caps"&gt;API&lt;/span&gt;.&lt;/p&gt;
&lt;div class="section" id="downloads"&gt;
&lt;h2&gt;Downloads&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/kura/tugboat-bash-completion/tarball/master"&gt;.tar.gz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/kura/tugboat-bash-completion/zipball/master"&gt;.zip&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;div class="section" id="debian-ubuntu"&gt;
&lt;h3&gt;Debian/Ubuntu&lt;/h3&gt;
&lt;div class="section" id="install-manually"&gt;
&lt;h4&gt;Install manually&lt;/h4&gt;
&lt;p&gt;Download the source file from above and run the commands below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;make&lt;span class="w"&gt; &lt;/span&gt;install
.&lt;span class="w"&gt; &lt;/span&gt;~/bashrc
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or you can do it the lazy way&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;wget&lt;span class="w"&gt; &lt;/span&gt;https://github.com/kura/tugboat-bash-completion/blob/master/tugboat&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-O&lt;span class="w"&gt; &lt;/span&gt;/etc/bash_completion.d/tugboat
.&lt;span class="w"&gt; &lt;/span&gt;~/bashrc
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="notes"&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;It’s worth noting that any command that supports a FUZZY_MATCH will take a
small amount of time to respond, due to querying the &lt;span class="caps"&gt;API&lt;/span&gt; for a list of either
droplets or images.&lt;/p&gt;
&lt;p&gt;Commands that do a droplet lookup;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;destroy&lt;/li&gt;
&lt;li&gt;halt&lt;/li&gt;
&lt;li&gt;info&lt;/li&gt;
&lt;li&gt;password-reset&lt;/li&gt;
&lt;li&gt;rebuild&lt;/li&gt;
&lt;li&gt;resize&lt;/li&gt;
&lt;li&gt;restart&lt;/li&gt;
&lt;li&gt;snapshot&lt;/li&gt;
&lt;li&gt;ssh&lt;/li&gt;
&lt;li&gt;start&lt;/li&gt;
&lt;li&gt;wait&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An image lookup;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;destroy_image&lt;/li&gt;
&lt;li&gt;info_image&lt;/li&gt;
&lt;li&gt;rebuild&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="source"&gt;
&lt;h2&gt;Source&lt;/h2&gt;
&lt;p&gt;The source can be found on &lt;a class="reference external" href="https://github.com/kura/tugboat-bash-completion"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="issues"&gt;
&lt;h2&gt;Issues&lt;/h2&gt;
&lt;p&gt;Issues can be tracked using &lt;a class="reference external" href="https://github.com/kura/tugboat-bash-completion/issues"&gt;GitHub Issues&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="license"&gt;
&lt;h2&gt;License&lt;/h2&gt;
&lt;p&gt;This software is licensed using the &lt;span class="caps"&gt;MIT&lt;/span&gt; License.
The license is provided in …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
&lt;p&gt;tugboat-bash-completion is a bash completion script the &lt;a class="reference external" href="https://github.com/pearkes/tugboat"&gt;tugboat&lt;/a&gt; &lt;span class="caps"&gt;CLI&lt;/span&gt; interface for the &lt;a class="reference external" href="https://www.digitalocean.com/"&gt;Digital Ocean&lt;/a&gt; &lt;span class="caps"&gt;API&lt;/span&gt;.&lt;/p&gt;
&lt;div class="section" id="downloads"&gt;
&lt;h2&gt;Downloads&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/kura/tugboat-bash-completion/tarball/master"&gt;.tar.gz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/kura/tugboat-bash-completion/zipball/master"&gt;.zip&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="installation"&gt;
&lt;h2&gt;Installation&lt;/h2&gt;
&lt;div class="section" id="debian-ubuntu"&gt;
&lt;h3&gt;Debian/Ubuntu&lt;/h3&gt;
&lt;div class="section" id="install-manually"&gt;
&lt;h4&gt;Install manually&lt;/h4&gt;
&lt;p&gt;Download the source file from above and run the commands below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;make&lt;span class="w"&gt; &lt;/span&gt;install
.&lt;span class="w"&gt; &lt;/span&gt;~/bashrc
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or you can do it the lazy way&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo&lt;span class="w"&gt; &lt;/span&gt;wget&lt;span class="w"&gt; &lt;/span&gt;https://github.com/kura/tugboat-bash-completion/blob/master/tugboat&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;-O&lt;span class="w"&gt; &lt;/span&gt;/etc/bash_completion.d/tugboat
.&lt;span class="w"&gt; &lt;/span&gt;~/bashrc
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="notes"&gt;
&lt;h2&gt;Notes&lt;/h2&gt;
&lt;p&gt;It’s worth noting that any command that supports a FUZZY_MATCH will take a
small amount of time to respond, due to querying the &lt;span class="caps"&gt;API&lt;/span&gt; for a list of either
droplets or images.&lt;/p&gt;
&lt;p&gt;Commands that do a droplet lookup;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;destroy&lt;/li&gt;
&lt;li&gt;halt&lt;/li&gt;
&lt;li&gt;info&lt;/li&gt;
&lt;li&gt;password-reset&lt;/li&gt;
&lt;li&gt;rebuild&lt;/li&gt;
&lt;li&gt;resize&lt;/li&gt;
&lt;li&gt;restart&lt;/li&gt;
&lt;li&gt;snapshot&lt;/li&gt;
&lt;li&gt;ssh&lt;/li&gt;
&lt;li&gt;start&lt;/li&gt;
&lt;li&gt;wait&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An image lookup;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;destroy_image&lt;/li&gt;
&lt;li&gt;info_image&lt;/li&gt;
&lt;li&gt;rebuild&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="source"&gt;
&lt;h2&gt;Source&lt;/h2&gt;
&lt;p&gt;The source can be found on &lt;a class="reference external" href="https://github.com/kura/tugboat-bash-completion"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="issues"&gt;
&lt;h2&gt;Issues&lt;/h2&gt;
&lt;p&gt;Issues can be tracked using &lt;a class="reference external" href="https://github.com/kura/tugboat-bash-completion/issues"&gt;GitHub Issues&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="license"&gt;
&lt;h2&gt;License&lt;/h2&gt;
&lt;p&gt;This software is licensed using the &lt;span class="caps"&gt;MIT&lt;/span&gt; License.
The license is provided in the &lt;a class="reference external" href="https://github.com/kura/tugboat-bash-completion/blob/master/LICENSE"&gt;source code repository&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="coding"></category><category term="digital ocean"></category><category term="tugboat"></category><category term="bash"></category><category term="completion"></category></entry><entry><title>Ghastly - A theme for Pelican</title><link href="https://kura.gg/2014/05/26/ghastly-a-theme-for-pelican/" rel="alternate"></link><published>2014-05-26T23:00:00+01:00</published><updated>2014-05-26T23:00:00+01:00</updated><author><name>kura</name></author><id>tag:kura.gg,2014-05-26:/2014/05/26/ghastly-a-theme-for-pelican/</id><content type="html">&lt;div class="figure"&gt;
&lt;img alt="Gastly, the Ghost Pokémon" src="/images/gastly.png"/&gt;
&lt;p class="caption"&gt;(Image by &lt;a class="reference external" href="https://raiba-art.deviantart.com/art/Gastly-294533100"&gt;Raiba-art&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;

&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I’d like to introduce Ghastly, a clean and minimal, lightweight theme for the
&lt;a class="reference external" href="https://getpelican.com"&gt;Pelican&lt;/a&gt; blogging platform.&lt;/p&gt;
&lt;p&gt;Ghastly is based heavily off of Casper, the default theme for
&lt;a class="reference external" href="https://ghost.org"&gt;Ghost&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It’s name is derived from the D&amp;amp;D monster, the Ghast and Gastly, the Pokémon.&lt;/p&gt;
&lt;/div&gt;
</content><category term="coding"></category><category term="pelican"></category><category term="ghost"></category></entry><entry><title>deadsnakes.sh</title><link href="https://kura.gg/2014/01/26/deadsnakes.sh/" rel="alternate"></link><published>2014-01-26T01:50:00+00:00</published><updated>2014-01-26T01:50:00+00:00</updated><author><name>kura</name></author><id>tag:kura.gg,2014-01-26:/2014/01/26/deadsnakes.sh/</id><content type="html">&lt;p&gt;If you’re an Python developer that uses Ubuntu or even Debian, you have
probably heard of Felix Krull’s &lt;a class="reference external" href="https://launchpad.net/~fkrull/+archive/deadsnakes"&gt;deadsnakes&lt;/a&gt; &lt;span class="caps"&gt;PPA&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;I find myself using it a lot and since I tend to destroy my environments quite
frequently, I thought I’d save myself some time and write a simple
shell script to install the &lt;span class="caps"&gt;PPA&lt;/span&gt;, the versions of Python I frequently use and,
after messing up a machine — ignore the existing version of python.&lt;/p&gt;
&lt;p&gt;Gist removed. Sorry.&lt;/p&gt;
</content><category term="coding"></category><category term="python"></category></entry><entry><title>Shields for PyPI packages</title><link href="https://kura.gg/2013/12/24/shields-for-pypi-packages/" rel="alternate"></link><published>2013-12-24T14:07:00+00:00</published><updated>2013-12-24T14:07:00+00:00</updated><author><name>kura</name></author><id>tag:kura.gg,2013-12-24:/2013/12/24/shields-for-pypi-packages/</id><summary type="html">
&lt;p&gt;Some time back in April 2013 I was bored and looking for a new project to keep
my attention, if only for a short period of time.&lt;/p&gt;
&lt;p&gt;My colleague &lt;a class="reference external" href="https://twitter.com/codeinthehole"&gt;@codeinthehole&lt;/a&gt; had an idea
but no time to implement it, this idea was to have shields like those of
&lt;a class="reference external" href="https://travis-ci.org"&gt;travis-ci&lt;/a&gt; (shown below) but displaying package
download counts.&lt;/p&gt;
&lt;img alt="Status of blackhole on Travis CI" src="https://api.travis-ci.org/kura/blackhole.png?branch=master"/&gt;
&lt;div class="section" id="tech-stack"&gt;
&lt;h2&gt;Tech stack&lt;/h2&gt;
&lt;p&gt;From the very start I decided to use
&lt;a class="reference external" href="https://www.tornadoweb.org/en/stable/"&gt;Tornado framework&lt;/a&gt;, although this may
change in the future.&lt;/p&gt;
&lt;p&gt;The original plan was to generate the images using Pillow (&lt;span class="caps"&gt;PIL&lt;/span&gt;) and then simply
cache them to disk. I decided it would make far more sense to do this using
&lt;a class="reference external" href="https://www.varnish-cache.org/"&gt;Varnish&lt;/a&gt; and not have to worry about it
working as expected.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="manually-generating-the-images"&gt;
&lt;h2&gt;Manually generating the images&lt;/h2&gt;
&lt;p&gt;The images were originally generated from a base template using Pillow, but
sadly Python’s image manipulation is not very good, especially it’s text
manipulation and the shields could …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
&lt;p&gt;Some time back in April 2013 I was bored and looking for a new project to keep
my attention, if only for a short period of time.&lt;/p&gt;
&lt;p&gt;My colleague &lt;a class="reference external" href="https://twitter.com/codeinthehole"&gt;@codeinthehole&lt;/a&gt; had an idea
but no time to implement it, this idea was to have shields like those of
&lt;a class="reference external" href="https://travis-ci.org"&gt;travis-ci&lt;/a&gt; (shown below) but displaying package
download counts.&lt;/p&gt;
&lt;img alt="Status of blackhole on Travis CI" src="https://api.travis-ci.org/kura/blackhole.png?branch=master"/&gt;
&lt;div class="section" id="tech-stack"&gt;
&lt;h2&gt;Tech stack&lt;/h2&gt;
&lt;p&gt;From the very start I decided to use
&lt;a class="reference external" href="https://www.tornadoweb.org/en/stable/"&gt;Tornado framework&lt;/a&gt;, although this may
change in the future.&lt;/p&gt;
&lt;p&gt;The original plan was to generate the images using Pillow (&lt;span class="caps"&gt;PIL&lt;/span&gt;) and then simply
cache them to disk. I decided it would make far more sense to do this using
&lt;a class="reference external" href="https://www.varnish-cache.org/"&gt;Varnish&lt;/a&gt; and not have to worry about it
working as expected.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="manually-generating-the-images"&gt;
&lt;h2&gt;Manually generating the images&lt;/h2&gt;
&lt;p&gt;The images were originally generated from a base template using Pillow, but
sadly Python’s image manipulation is not very good, especially it’s text
manipulation and the shields could have really used a bit of work.&lt;/p&gt;
&lt;p&gt;I reached out to the &lt;a class="reference external" href="https://github.com/gittip/shields.io"&gt;shields project&lt;/a&gt;
but sadly got no response so the images remained as they were.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="crate-io-shuts-down"&gt;
&lt;h2&gt;crate.io shuts down&lt;/h2&gt;
&lt;p&gt;Sadly &lt;a class="reference external" href="https://crate.io"&gt;crate.io&lt;/a&gt; stopped being a custom PyPI mirror in mid
December which meant I had to rewrite the codebase to use the official PyPI
&lt;span class="caps"&gt;JSON&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt;. In doing so I lost the ability to get download counts for all
versions or a specific version and instead, could only get a count by day,
week or month.&lt;/p&gt;
&lt;p&gt;It was while changing this functionality that I stumbled upon a &lt;a class="reference external" href="https://github.com/gittip/shields.io/issues/83"&gt;ticket from
the shields project&lt;/a&gt;
mentioning my shields and their poor artistic styling. The ticked mentioned an
&lt;a class="reference external" href="https://shields.io/"&gt;public &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt; for generating these images.&lt;/p&gt;
&lt;p&gt;After switching to this &lt;span class="caps"&gt;API&lt;/span&gt; I quickly found from PyPI Pin users on Twitter that
there was an issue in their &lt;span class="caps"&gt;API&lt;/span&gt;, specifically with version number formats.
Version numbers with a format of &lt;span class="caps"&gt;X.X.&lt;/span&gt;X worked fine but X.&lt;span class="caps"&gt;XX&lt;/span&gt; did not. I can only
assume that many other formats didn’t work either.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="b-repl-ca"&gt;
&lt;h2&gt;b.repl.ca&lt;/h2&gt;
&lt;p&gt;While trying to find the source code for shields.io on GitHub I found what they
consider &lt;a class="reference external" href="https://b.repl.ca/"&gt;a newer, better version&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I promptly switched to PyPI Pins to use this and queried the authors on GitHub
to make sure the &lt;span class="caps"&gt;API&lt;/span&gt; was meant to be public and usable, thankfully it was.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="eggs-wheels-and-licenses"&gt;
&lt;h2&gt;Eggs, wheels and licenses&lt;/h2&gt;
&lt;p&gt;With this new found image &lt;span class="caps"&gt;API&lt;/span&gt; and the wealth of data in the PyPI &lt;span class="caps"&gt;JSON&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; I
quickly decided to leverage it as much as I could and thus the egg, wheel and
license shields were created.&lt;/p&gt;
&lt;p&gt;The tech stack remains the same, I still cache all successful image requests
using Varnish to limit the impact on my Tornado servers and on the shields.io
service. I look forward to adding more shields and functionality in the future.&lt;/p&gt;
&lt;p&gt;You can access this set of services &lt;a class="reference external" href="https://pypip.in"&gt;on PyPI Pins&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="coding"></category><category term="python"></category><category term="pypi"></category><category term="shields"></category></entry><entry><title>My $PS1 with git branch, new files, staged files and commit status</title><link href="https://kura.gg/2013/08/18/my-ps1-with-git-branch-new-files-staged-files-and-commit-status/" rel="alternate"></link><published>2013-08-18T17:25:00+01:00</published><updated>2013-08-18T17:25:00+01:00</updated><author><name>kura</name></author><id>tag:kura.gg,2013-08-18:/2013/08/18/my-ps1-with-git-branch-new-files-staged-files-and-commit-status/</id><summary type="html">&lt;p&gt;I love my prompt, always have and always will. I spend so much of my life
in a terminal, usually with half a dozen mini terminals open in each tab.
As such I like to tweak it and get it as perfect as possible for my life, needs
and even mood.&lt;/p&gt;
&lt;p&gt;In the past I’ve had quite a large &lt;span class="caps"&gt;PS1&lt;/span&gt; that covers multiple lines and gives a
lot of information, after having that &lt;span class="caps"&gt;PS1&lt;/span&gt; in one form or another for some time
I decided it was time for a change, to a smaller &lt;span class="caps"&gt;PS1&lt;/span&gt; that takes up a lot less space.&lt;/p&gt;
&lt;p&gt;So here it is, the first image is my standard &lt;span class="caps"&gt;PS1&lt;/span&gt; when in a git repository,
the red @ means a file hasn’t been added to Git, a blue @ means a tracked file
has been modified but not stage and finally a green @ means a file is staged …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I love my prompt, always have and always will. I spend so much of my life
in a terminal, usually with half a dozen mini terminals open in each tab.
As such I like to tweak it and get it as perfect as possible for my life, needs
and even mood.&lt;/p&gt;
&lt;p&gt;In the past I’ve had quite a large &lt;span class="caps"&gt;PS1&lt;/span&gt; that covers multiple lines and gives a
lot of information, after having that &lt;span class="caps"&gt;PS1&lt;/span&gt; in one form or another for some time
I decided it was time for a change, to a smaller &lt;span class="caps"&gt;PS1&lt;/span&gt; that takes up a lot less space.&lt;/p&gt;
&lt;p&gt;So here it is, the first image is my standard &lt;span class="caps"&gt;PS1&lt;/span&gt; when in a git repository,
the red @ means a file hasn’t been added to Git, a blue @ means a tracked file
has been modified but not stage and finally a green @ means a file is staged
but still needs to be committed.&lt;/p&gt;
&lt;img alt="PS1 while in a git repository" src="/images/new-ps1.png"/&gt;
&lt;p&gt;When I have run &lt;cite&gt;sudo -s&lt;/cite&gt; my &lt;span class="caps"&gt;PS1&lt;/span&gt; changes to alert me to the fact I have
superuser privileges.&lt;/p&gt;
&lt;img alt="PS1 when I have scary privileges" src="/images/new-ps1-root.png"/&gt;
&lt;p&gt;You can find the source code used to power this &lt;span class="caps"&gt;PS1&lt;/span&gt; below which is stored in a
Gist on GitHub.&lt;/p&gt;
&lt;p&gt;Gist removed. Sorry.&lt;/p&gt;
</content><category term="coding"></category><category term="bash"></category><category term="dash"></category><category term="ps1"></category><category term="git"></category></entry><entry><title>Blackhole 1.8.0 development, Mock and Python entry_points</title><link href="https://kura.gg/2013/08/18/blackhole-1.8.0-development-mock-and-python-entry-points/" rel="alternate"></link><published>2013-08-18T12:00:00+01:00</published><updated>2013-08-18T12:00:00+01:00</updated><author><name>kura</name></author><id>tag:kura.gg,2013-08-18:/2013/08/18/blackhole-1.8.0-development-mock-and-python-entry-points/</id><summary type="html">
&lt;p&gt;Over the last week I’ve been doing a huge amount of refactoring of
&lt;a class="reference external" href="https://blackhole.io"&gt;Blackhole&lt;/a&gt; as well as writing dozens of additional
tests. To make Blackhole more testable I needed to make a big change to
how the program is launched and controlled.&lt;/p&gt;
&lt;div class="section" id="setup-py-scripts-vs-entry-points"&gt;
&lt;h2&gt;setup.py scripts vs. entry_points&lt;/h2&gt;
&lt;p&gt;Whenever I’ve written Python programs that require some kind of command line
script I’ve always used distutils’ scripts, this can be seen &lt;a class="reference external" href="https://github.com/kura/blackhole/blob/05c6647aeb25ecfcc17d9df535db330a68016a24/setup.py#L37-L39"&gt;in blackhole’s
setup.py on GitHub&lt;/a&gt;
or in the three line example below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;scripts&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;'blackhole/bin/blackhole'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;],&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In doing so, it allowed me to be lazy and write a lot of prodecural code in the
main “binary” which made it pretty much impossible to test. You can also see
that &lt;a class="reference external" href="https://github.com/kura/blackhole/blob/bb6cccca3a75def324ed5cb64a32fd2e5773a038/blackhole/bin/blackhole"&gt;on GitHub in the main “binary”&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I’ve noticed that most people who write Python packages that have some kind of
command line entry point use distutils …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
&lt;p&gt;Over the last week I’ve been doing a huge amount of refactoring of
&lt;a class="reference external" href="https://blackhole.io"&gt;Blackhole&lt;/a&gt; as well as writing dozens of additional
tests. To make Blackhole more testable I needed to make a big change to
how the program is launched and controlled.&lt;/p&gt;
&lt;div class="section" id="setup-py-scripts-vs-entry-points"&gt;
&lt;h2&gt;setup.py scripts vs. entry_points&lt;/h2&gt;
&lt;p&gt;Whenever I’ve written Python programs that require some kind of command line
script I’ve always used distutils’ scripts, this can be seen &lt;a class="reference external" href="https://github.com/kura/blackhole/blob/05c6647aeb25ecfcc17d9df535db330a68016a24/setup.py#L37-L39"&gt;in blackhole’s
setup.py on GitHub&lt;/a&gt;
or in the three line example below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;scripts&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;'blackhole/bin/blackhole'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;],&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In doing so, it allowed me to be lazy and write a lot of prodecural code in the
main “binary” which made it pretty much impossible to test. You can also see
that &lt;a class="reference external" href="https://github.com/kura/blackhole/blob/bb6cccca3a75def324ed5cb64a32fd2e5773a038/blackhole/bin/blackhole"&gt;on GitHub in the main “binary”&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I’ve noticed that most people who write Python packages that have some kind of
command line entry point use distutils’ &lt;cite&gt;entry_points&lt;/cite&gt; option instead of
&lt;cite&gt;scripts&lt;/cite&gt;. I decided to rewrite Blackhole to make it use the same entry_points
option and also make it’s new entry point as testable as possible.&lt;/p&gt;
&lt;div class="section" id="setup-py-entry-point-change"&gt;
&lt;h3&gt;setup.py entry_point change&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;entry_points&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;'console_scripts'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
        &lt;span class="s1"&gt;'blackhole = blackhole.application:run'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'blackhole'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="c1"&gt;# ...&lt;/span&gt;
      &lt;span class="n"&gt;entry_points&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;entry_points&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="c1"&gt;# ...&lt;/span&gt;
      &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I’m not going to go in to any real detal on how &lt;cite&gt;entry_points&lt;/cite&gt; works, there are
plenty of articles elsewhere on the internet that detail this.&lt;/p&gt;
&lt;p&gt;That being said, &lt;cite&gt;entry_points&lt;/cite&gt; is a dictionary, in it I set a &lt;cite&gt;console_scripts&lt;/cite&gt;
key that has a list of scripts that should be usable from the command line.&lt;/p&gt;
&lt;p&gt;Each list item is made up of two parts; the command name (what will be typed on
the command line to trigger the command) and the module(s) and method to run.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="blackhole-application-run"&gt;
&lt;h3&gt;blackhole.application:run&lt;/h3&gt;
&lt;p&gt;With the &lt;cite&gt;entry_points&lt;/cite&gt; changes outlined above, this allowed me to write an
entirely new and testable application.&lt;/p&gt;
&lt;p&gt;Now the method that launches Blackhole is much smaller and split in to testable parts.&lt;/p&gt;
&lt;p&gt;For example the &lt;cite&gt;run&lt;/cite&gt; method is below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    The run method is what actually spawns and manages blackhole.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SIGTERM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;terminate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;set_action&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;set_options&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;# Grab the sockets early for multiprocessing&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;action&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'start'&lt;/span&gt;&lt;span class="p"&gt;,):&lt;/span&gt;
        &lt;span class="n"&gt;socks&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sockets&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;setgid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;setuid&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;daemon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;action&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# Change group and user&lt;/span&gt;
    &lt;span class="n"&gt;io_loop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;# Iterate over the dictionary of socket connections&lt;/span&gt;
    &lt;span class="c1"&gt;# and add them to the IOLoop&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sock&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;socks&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iteritems&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;callback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;functools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connection_ready&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;io_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;io_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;READ&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;io_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;KeyboardInterrupt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ne"&gt;SystemExit&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;io_loop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For the full set of changes, take a look &lt;a class="reference external" href="https://github.com/kura/blackhole/blob/05c6647aeb25ecfcc17d9df535db330a68016a24/blackhole/application.py"&gt;on GitHub at blackhole.application&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="fun-with-mock"&gt;
&lt;h2&gt;Fun with Mock&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.voidspace.org.uk/python/mock/"&gt;Mock&lt;/a&gt; is an amazing library that
allows you to mock (fake) method calls and much more.&lt;/p&gt;
&lt;p&gt;I’ve known about Mock for a while, it’s used quite heavily at work but I’ve
never really felt like I needed to use it. Then I started writing more and more
tests for Blackhole, started using Mock and instantly fell in love.&lt;/p&gt;
&lt;div class="section" id="mocking-fqdn"&gt;
&lt;h3&gt;Mocking &lt;span class="caps"&gt;FQDN&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;As an example, with Blackhole 1.6.4 I added functionality to return an &lt;span class="caps"&gt;FQDN&lt;/span&gt;
when &lt;span class="caps"&gt;HELO&lt;/span&gt; or &lt;span class="caps"&gt;EHLO&lt;/span&gt; commands are received. I didn’t write any tests for this
because it uses a file on the filesystem or falls back to getting the &lt;span class="caps"&gt;FQDN&lt;/span&gt;
from the socket library.&lt;/p&gt;
&lt;p&gt;After playing with Mock, I decided I would actually write tests for this piece
of functionality and thankfully Mock made it insanely simple.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestMailNameFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;check_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"file.blackhole.io"&lt;/span&gt;

    &lt;span class="nd"&gt;@patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'os.path.exists'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;return_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_mail_name_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exists_mock&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'__builtin__.open'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                       &lt;span class="n"&gt;return_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_value&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
                &lt;span class="n"&gt;mn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_mailname&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'builtins.open'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                       &lt;span class="n"&gt;return_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_value&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
                &lt;span class="n"&gt;mn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_mailname&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above test mocks the filesystem calls, returning a known value. This allows
the tests to be run no matter how the machine running the tests is configured.&lt;/p&gt;
&lt;p&gt;The one slightly less standard part of this test is the fact it has a
try: except: block inside it, this is because I need to mock Python’s builtin
&lt;cite&gt;open&lt;/cite&gt; method. Blackhole works on both Python 2.6/7 and on Python 3.X and with
Python 3 the &lt;cite&gt;open&lt;/cite&gt; method was moved from &lt;cite&gt;__builtin__.open&lt;/cite&gt; to &lt;cite&gt;builtins.open&lt;/cite&gt;.
As such I have to attempt to run the Python 2.X version of the code and fallback
to Python 3.X version if the import fails.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestMailNameSocket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;check_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"socket.blackhole.io"&lt;/span&gt;

    &lt;span class="nd"&gt;@patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'os.path.exists'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;return_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nd"&gt;@patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'socket.getfqdn'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;return_value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;check_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_mail_name_socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exists_mock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket_mock&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;mn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_mailname&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;check_value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And the test above is for forcing the &lt;span class="caps"&gt;FQDN&lt;/span&gt; to be returned by Python’s socket
library, again the return value is a known value so that it can be tested
on any machine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mocking-delay-and-debug-options"&gt;
&lt;h3&gt;Mocking —delay and —debug options&lt;/h3&gt;
&lt;p&gt;Very little changes when the &lt;cite&gt;—delay&lt;/cite&gt; and &lt;cite&gt;—debug&lt;/cite&gt; arguments are passed in to
Blackhole and sadly it’s quite hard to test both of those calls.&lt;/p&gt;
&lt;p&gt;One thing that I would like to test is that a relevant warning message is
printed out to the console when either of these arguments is passed. Because
both options can be quite dangerous to use.&lt;/p&gt;
&lt;p&gt;It’s kind of a pointless thing to test for but it’s also nice to know that the
user is being warned correctly.&lt;/p&gt;
&lt;p&gt;With Mock I am able to to mock &lt;cite&gt;sys.stdout&lt;/cite&gt; and have it write the output to
&lt;cite&gt;StringIO&lt;/cite&gt; instead, so I can test the contents of &lt;cite&gt;StringIO&lt;/cite&gt; and confirm they
match what I expect them to be.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestSetOptionsDebug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
        &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ssl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;

    &lt;span class="nd"&gt;@patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'sys.stdout'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_callable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_set_options_debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout_mock&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"""WARNING: Using the debug flag!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;This will generate a lots"""&lt;/span&gt;\
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="sd"&gt;""" of disk I/O and large log files\n\n"""&lt;/span&gt;
        &lt;span class="n"&gt;set_options&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stdout_mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getvalue&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestSetOptionsDelay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
        &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delay&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ssl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;

    &lt;span class="nd"&gt;@patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'sys.stdout'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_callable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;StringIO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_set_options_delay&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout_mock&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"""WARNING: Using the delay flag!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"""&lt;/span&gt;\
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="sd"&gt;"""The delay flag is a blocking action """&lt;/span&gt;\
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="sd"&gt;"""and will cause connections to block.\n\n"""&lt;/span&gt;
        &lt;span class="n"&gt;set_options&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEquals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stdout_mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getvalue&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="mocking-daemon-actions"&gt;
&lt;h3&gt;Mocking daemon actions&lt;/h3&gt;
&lt;p&gt;Another thing that is nice to test is that the daemon is working correctly. I
decided it would be a good idea to mock start, stop and status commands as well
as mocking unknown commands too, to be sure how Blackhole would respond to a
user’s actions.&lt;/p&gt;
&lt;p&gt;Thankfully Mock allows you to mock calls and confirm that they have indeed been
called, for example the stop method calls &lt;cite&gt;sys.exit&lt;/cite&gt;, so I can confirm that this
call has actually been made.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestDaemonStop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'blackhole'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'stop'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nd"&gt;@patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'sys.exit'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nd"&gt;@patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'deiman.Deiman.stop'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_daemon_stop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exit_mock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;daemon_mock&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;daemon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'stop'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;daemon_mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;called&lt;/span&gt;
            &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;exit_mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;called&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestDaemonStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'blackhole'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'status'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nd"&gt;@patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'sys.exit'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nd"&gt;@patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'deiman.Deiman.status'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_daemon_status&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exit_mock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;daemon_mock&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;daemon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'status'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;daemon_mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;called&lt;/span&gt;
            &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;exit_mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;called&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestDaemonStart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setUp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'blackhole'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'start'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="nd"&gt;@patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'deiman.Deiman.start'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_daemon_start&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;daemon_mock&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;daemon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'start'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;daemon_mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;called&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertTrue&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Deiman&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestDaemonInvalidAction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="nd"&gt;@patch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'sys.exit'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_daemon_invalid_action&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exit_mock&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;daemon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'kurakurakura'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;exit_mock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;called&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="coding"></category><category term="python"></category><category term="blackhole"></category><category term="setup.py"></category><category term="entry_points"></category><category term="mock"></category><category term="tests"></category><category term="testing"></category></entry><entry><title>Writing a Vimeo and YouTube plugin for Pelican</title><link href="https://kura.gg/2013/08/09/writing-a-vimeo-and-youtube-plugin-for-pelican/" rel="alternate"></link><published>2013-08-09T17:38:00+01:00</published><updated>2013-08-09T17:38:00+01:00</updated><author><name>kura</name></author><id>tag:kura.gg,2013-08-09:/2013/08/09/writing-a-vimeo-and-youtube-plugin-for-pelican/</id><summary type="html">
&lt;p&gt;&lt;a class="reference external" href="https://getpelican.com/"&gt;Pelican&lt;/a&gt; is a Python-powered static blog generator
that processes &lt;a class="reference external" href="https://docutils.sourceforge.net/rst.html"&gt;ReStructuredText&lt;/a&gt;
and &lt;a class="reference external" href="https://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt; articles and
pages and converts them to &lt;span class="caps"&gt;HTML&lt;/span&gt;. I use Pelican to power this blog.&lt;/p&gt;
&lt;p&gt;There is a YouTube &lt;span class="caps"&gt;RST&lt;/span&gt; directive built in to Pelican core but it really
shouldn’t exist there.&lt;/p&gt;
&lt;p&gt;I submitted a pull request for Pelican core to enable Vimeo videos in articles
but that request was declined because it didn’t belong in the core. So I
decided I would write it as a plugin instead and while I was doing it, also
wrote a plugin for YouTube so that it could be removed from the core.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.getpelican.com/en/3.2/plugins.html#how-to-create-plugins"&gt;There is a decent amount of detail in the Pelican documentation on how to
write plugins&lt;/a&gt;, I’m
not going to cover the whole process but I thought I would cover a little of
what I did.&lt;/p&gt;
&lt;div class="section" id="adding-an-rst-directive"&gt;
&lt;h2&gt;Adding an &lt;span class="caps"&gt;RST&lt;/span&gt; directive&lt;/h2&gt;
&lt;p&gt;Really all we’re doing …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">
&lt;p&gt;&lt;a class="reference external" href="https://getpelican.com/"&gt;Pelican&lt;/a&gt; is a Python-powered static blog generator
that processes &lt;a class="reference external" href="https://docutils.sourceforge.net/rst.html"&gt;ReStructuredText&lt;/a&gt;
and &lt;a class="reference external" href="https://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt; articles and
pages and converts them to &lt;span class="caps"&gt;HTML&lt;/span&gt;. I use Pelican to power this blog.&lt;/p&gt;
&lt;p&gt;There is a YouTube &lt;span class="caps"&gt;RST&lt;/span&gt; directive built in to Pelican core but it really
shouldn’t exist there.&lt;/p&gt;
&lt;p&gt;I submitted a pull request for Pelican core to enable Vimeo videos in articles
but that request was declined because it didn’t belong in the core. So I
decided I would write it as a plugin instead and while I was doing it, also
wrote a plugin for YouTube so that it could be removed from the core.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://docs.getpelican.com/en/3.2/plugins.html#how-to-create-plugins"&gt;There is a decent amount of detail in the Pelican documentation on how to
write plugins&lt;/a&gt;, I’m
not going to cover the whole process but I thought I would cover a little of
what I did.&lt;/p&gt;
&lt;div class="section" id="adding-an-rst-directive"&gt;
&lt;h2&gt;Adding an &lt;span class="caps"&gt;RST&lt;/span&gt; directive&lt;/h2&gt;
&lt;p&gt;Really all we’re doing is modifying docutils on-the-fly to tell it how to
understand new directives, so we need to import directives from docutils&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;docutils.parsers.rst&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;directives&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Directive&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With this in place, we can dynamically register a new directive to docutils&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;directives&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register_directive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'vimeo'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Vimeo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first argument we pass in is the name of our directive, the second
argument is the name of the class we wish to be invoked.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="writing-the-directive"&gt;
&lt;h2&gt;Writing the Directive&lt;/h2&gt;
&lt;p&gt;I’ll now break down the Vimeo class and explain what it does, piece by piece.&lt;/p&gt;
&lt;p&gt;We will need to import an extra method from docutils&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;docutils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;nodes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is used to append segments of data together, in our case &lt;span class="caps"&gt;HTML&lt;/span&gt;.&lt;/p&gt;
&lt;div class="section" id="class-vimeo"&gt;
&lt;h3&gt;class Vimeo&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Vimeo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is pretty self explanatory, we define a new class that inherits from
&lt;cite&gt;docutils.parsers.rst.Directive&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;Next we define a method for handling our alignment choices&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;align&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argument&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;directives&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argument&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'left'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'center'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'right'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we need to set some base values against our class for docutils to know how
many arguments are required and so on, it’s pretty easy to understand. For the
alignment option we pass it the callable method declared above, but without
calling it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;required_arguments&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;optional_arguments&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;option_spec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;'width'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;directives&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;positive_int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'height'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;directives&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;positive_int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;'align'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;align&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;final_argument_whitespace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;has_content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And finally we move on to the meat of the plugin, the method that actually does
the processing.&lt;/p&gt;
&lt;p&gt;The method name is called run because that is required by docutils.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;First I get the videoID from the first argument in the &lt;span class="caps"&gt;RST&lt;/span&gt;, I tend set default
values for width, height and alignment. Those three arguments are optional, but
if they have been defined then I override the defaults.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;videoID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;420&lt;/span&gt;
&lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;315&lt;/span&gt;
&lt;span class="n"&gt;align&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'left'&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;'width'&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'width'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;'height'&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'height'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;'align'&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;align&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'align'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next I define the Vimeo &lt;span class="caps"&gt;URL&lt;/span&gt; and the two blocks of &lt;span class="caps"&gt;HTML&lt;/span&gt; that create the
surrounding div element and the video iframe. Here I also replace the videoID
in to the &lt;span class="caps"&gt;URL&lt;/span&gt; and also the optional arguments specified above.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'https://player.vimeo.com/video/&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;videoID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;div_block&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;div class="vimeo" align="&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;"&amp;gt;'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;align&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;embed_block&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;iframe width="&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;" height="&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;" src="&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;" '&lt;/span&gt;\
              &lt;span class="s1"&gt;'frameborder="0"&amp;gt;&amp;lt;/iframe&amp;gt;'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And finally I create a list of docutils nodes with the &lt;span class="caps"&gt;HTML&lt;/span&gt; we created above.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;div_block&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'html'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;embed_block&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'html'&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;/div&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'html'&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And that’s really it, it’s a simple as that. &lt;a class="reference external" href="https://github.com/kura/pelican_vimeo"&gt;You can view full source on
GitHub&lt;/a&gt; and also &lt;a class="reference external" href="/pelican-vimeo"&gt;read the manual for
pelican-vimeo on it’s software page on this website&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="coding"></category><category term="python"></category><category term="pelican"></category><category term="youtube"></category><category term="vimeo"></category></entry><entry><title>Writing the STARTTLS command in to Blackhole</title><link href="https://kura.gg/2013/07/31/writing-the-starttls-command-in-to-blackhole/" rel="alternate"></link><published>2013-07-31T13:36:00+01:00</published><updated>2013-07-31T13:36:00+01:00</updated><author><name>kura</name></author><id>tag:kura.gg,2013-07-31:/2013/07/31/writing-the-starttls-command-in-to-blackhole/</id><summary type="html">
&lt;p&gt;Blackhole has always been able to handle unencrypted &lt;span class="caps"&gt;SMTP&lt;/span&gt; and
for a long time it’s been able to handle encrypted &lt;span class="caps"&gt;SMTP&lt;/span&gt; via TLSv1.&lt;/p&gt;
&lt;p&gt;One thing Blackhole hasn’t been able to do until the 1.7.0 release
is handle &lt;cite&gt;&lt;span class="caps"&gt;STARTTLS&lt;/span&gt;&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;In the past the &lt;cite&gt;&lt;span class="caps"&gt;STARTTLS&lt;/span&gt;&lt;/cite&gt; command would cause Blackhole to return the
standard &lt;cite&gt;250 &lt;span class="caps"&gt;OK&lt;/span&gt;&lt;/cite&gt; response but would continue to operate on unencrypted
&lt;span class="caps"&gt;SMTP&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;I wanted to fix this and do it properly, but this meant learning how
to do so with Tornado, which itself proved to be tricky. I ended up
deciding to go to my local coding spot - the pub and hash it out.&lt;/p&gt;
&lt;div class="section" id="connection-stream"&gt;
&lt;h2&gt;connection_stream&lt;/h2&gt;
&lt;p&gt;The first thing I had to do was refactor the code that created the
instance of &lt;cite&gt;tornado.iostream.IOStream&lt;/cite&gt; and &lt;cite&gt;tornado.iostream.SSLIOStream&lt;/cite&gt;
so that it didn’t actually do the ssl wrapping.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;connection_stream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Detect which socket the connection …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">
&lt;p&gt;Blackhole has always been able to handle unencrypted &lt;span class="caps"&gt;SMTP&lt;/span&gt; and
for a long time it’s been able to handle encrypted &lt;span class="caps"&gt;SMTP&lt;/span&gt; via TLSv1.&lt;/p&gt;
&lt;p&gt;One thing Blackhole hasn’t been able to do until the 1.7.0 release
is handle &lt;cite&gt;&lt;span class="caps"&gt;STARTTLS&lt;/span&gt;&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;In the past the &lt;cite&gt;&lt;span class="caps"&gt;STARTTLS&lt;/span&gt;&lt;/cite&gt; command would cause Blackhole to return the
standard &lt;cite&gt;250 &lt;span class="caps"&gt;OK&lt;/span&gt;&lt;/cite&gt; response but would continue to operate on unencrypted
&lt;span class="caps"&gt;SMTP&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;I wanted to fix this and do it properly, but this meant learning how
to do so with Tornado, which itself proved to be tricky. I ended up
deciding to go to my local coding spot - the pub and hash it out.&lt;/p&gt;
&lt;div class="section" id="connection-stream"&gt;
&lt;h2&gt;connection_stream&lt;/h2&gt;
&lt;p&gt;The first thing I had to do was refactor the code that created the
instance of &lt;cite&gt;tornado.iostream.IOStream&lt;/cite&gt; and &lt;cite&gt;tornado.iostream.SSLIOStream&lt;/cite&gt;
so that it didn’t actually do the ssl wrapping.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;connection_stream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Detect which socket the connection is being made on,&lt;/span&gt;
&lt;span class="sd"&gt;    create and iostream for the connection, wrapping it&lt;/span&gt;
&lt;span class="sd"&gt;    in SSL if connected over the SSL socket.&lt;/span&gt;

&lt;span class="sd"&gt;    The parameter 'connection' is an instance of 'socket'&lt;/span&gt;
&lt;span class="sd"&gt;    from stdlib.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsockname&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ssl_port&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ssl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ssl_connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;iostream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IOStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="ssl-connection"&gt;
&lt;h2&gt;ssl_connection&lt;/h2&gt;
&lt;p&gt;In doing so I added another method that actually created an instance of
&lt;cite&gt;tornado.iostream.SSLIOStream&lt;/cite&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;ssl_connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;ssl_connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ssl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wrap_socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;sslkwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;iostream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SSLIOStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ssl_connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ssl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SSLError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;errno&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;ssl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SSL_ERROR_EOF&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;errno&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;errno&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ECONNABORTED&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;ssl_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This now gave me the ability to create an instance of &lt;cite&gt;SSLIOStream&lt;/cite&gt; without
doing all of the port checks that are required to create it when a connection
is made through the &lt;span class="caps"&gt;SSL&lt;/span&gt; enabled port.&lt;/p&gt;
&lt;p&gt;Next I had to find a way of modifying the stream on-the-fly, which was really
just a case of adding the current stream as an attribute of the &lt;cite&gt;MailState&lt;/cite&gt;
object which is unique for each connection to the server.&lt;/p&gt;
&lt;p&gt;The next and final step was to identify if &lt;cite&gt;&lt;span class="caps"&gt;STARTTLS&lt;/span&gt;&lt;/cite&gt; had been called and
overwrite the stream attribute of &lt;cite&gt;IOStream&lt;/cite&gt; with &lt;cite&gt;SSLIOStream&lt;/cite&gt;… This is
where everything got tricky.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="broken-file-descriptors"&gt;
&lt;h2&gt;Broken file descriptors&lt;/h2&gt;
&lt;p&gt;Tornado would error out when &lt;cite&gt;&lt;span class="caps"&gt;STARTTLS&lt;/span&gt;&lt;/cite&gt; was called with the following error&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;functools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;partial&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="mh"&gt;0x26d8260&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="n"&gt;Traceback&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;most&lt;/span&gt; &lt;span class="n"&gt;recent&lt;/span&gt; &lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="n"&gt;last&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
      &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;"/home/kura/.virtualenvs/blackhole-python2.7/local/lib/python2.7/site-packages/tornado-3.0.1-py2.7.egg/tornado/ioloop.py"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;453&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_run_callback&lt;/span&gt;
        &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;"/home/kura/.virtualenvs/blackhole-python2.7/local/lib/python2.7/site-packages/tornado-3.0.1-py2.7.egg/tornado/stack_context.py"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;241&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;wrapped&lt;/span&gt;
        &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;"/home/kura/.virtualenvs/blackhole-python2.7/local/lib/python2.7/site-packages/tornado-3.0.1-py2.7.egg/tornado/iostream.py"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;316&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;
        &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;"/home/kura/.virtualenvs/blackhole-python2.7/local/lib/python2.7/site-packages/tornado-3.0.1-py2.7.egg/tornado/stack_context.py"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;241&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;wrapped&lt;/span&gt;
        &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;"/home/kura/workspace/blackhole.io/blackhole/connection.py"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;212&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;handle&lt;/span&gt;
        &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;"/home/kura/workspace/blackhole.io/blackhole/connection.py"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;219&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;
        &lt;span class="n"&gt;mail_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_until&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;"/home/kura/.virtualenvs/blackhole-python2.7/local/lib/python2.7/site-packages/tornado-3.0.1-py2.7.egg/tornado/iostream.py"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;148&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;read_until&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_try_inline_read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;"/home/kura/.virtualenvs/blackhole-python2.7/local/lib/python2.7/site-packages/tornado-3.0.1-py2.7.egg/tornado/iostream.py"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;404&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_try_inline_read&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_maybe_add_error_listener&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
      &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;"/home/kura/.virtualenvs/blackhole-python2.7/local/lib/python2.7/site-packages/tornado-3.0.1-py2.7.egg/tornado/iostream.py"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;550&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_maybe_add_error_listener&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_add_io_state&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ioloop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IOLoop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;READ&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;"/home/kura/.virtualenvs/blackhole-python2.7/local/lib/python2.7/site-packages/tornado-3.0.1-py2.7.egg/tornado/iostream.py"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;580&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;_add_io_state&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_handle_events&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="s2"&gt;"/home/kura/.virtualenvs/blackhole-python2.7/local/lib/python2.7/site-packages/tornado-3.0.1-py2.7.egg/tornado/ioloop.py"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="mi"&gt;516&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;add_handler&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_impl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;events&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ERROR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="ne"&gt;IOError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Errno&lt;/span&gt; &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="n"&gt;exists&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I had no choice at this point but to do what I always do when I’m stumped,
&lt;a class="reference external" href="https://groups.google.com/forum/#!topic/python-tornado/"&gt;head over to the mailing list!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I didn’t get a response for a while so while waiting I decided to ask some intelligent people.&lt;/p&gt;
&lt;p&gt;I pointed a tweet at &lt;a class="reference external" href="https://twitter.com/alex_gaynor"&gt;@alex_gaynor&lt;/a&gt; which was
responded to by &lt;a class="reference external" href="https://twitter.com/fijall"&gt;@fijall&lt;/a&gt; but neither could help.
Alex mentioned Twisted which triggered a response from &lt;a class="reference external" href="https://twitter.com/hynek"&gt;@hynek&lt;/a&gt;
but sadly still no solution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-fix"&gt;
&lt;h2&gt;The fix&lt;/h2&gt;
&lt;p&gt;Then I received an email response from Ben Darnell on the Tornado mailing list which pointed
me in the right direction.&lt;/p&gt;
&lt;p&gt;In the end the simple fix was to modify the instance of &lt;cite&gt;tornado.ioloop.IOLoop&lt;/cite&gt; during run time
and removed the original instance of &lt;cite&gt;IOStream&lt;/cite&gt; from it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"starttls"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;fileno&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mail_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;IOLoop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;mail_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ssl_connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="connection-ready"&gt;
&lt;h2&gt;connection_ready&lt;/h2&gt;
&lt;p&gt;You can see this at work in the final version of the connect_ready method.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;connection_ready&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;events&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Accepts the socket connections and passes them off&lt;/span&gt;
&lt;span class="sd"&gt;    to be handled.&lt;/span&gt;

&lt;span class="sd"&gt;    'sock' is an instance of 'socket'.&lt;/span&gt;
&lt;span class="sd"&gt;    'fd' is an open file descriptor for the current connection.&lt;/span&gt;
&lt;span class="sd"&gt;    'events' is an integer of the number of events on the socket.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;accept&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;errno&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;errno&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EWOULDBLOCK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errno&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EAGAIN&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;raise&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;

        &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Connection from '&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;'"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

        &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setblocking&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;connection_stream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
        &lt;span class="n"&gt;mail_state&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MailState&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;mail_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;email_id&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;mail_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stream&lt;/span&gt;

        &lt;span class="c1"&gt;# Sadly there is nothing I can do about the handle and loop&lt;/span&gt;
        &lt;span class="c1"&gt;# fuctions. They have to exist within connection_ready&lt;/span&gt;
        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;            Handle a line of socket data, figure out if&lt;/span&gt;
&lt;span class="sd"&gt;            it's a valid SMTP keyword and handle it&lt;/span&gt;
&lt;span class="sd"&gt;            accordingly.&lt;/span&gt;
&lt;span class="sd"&gt;            """&lt;/span&gt;
            &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"[&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;] RECV: &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mail_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rstrip&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;
            &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;close&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;handle_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mail_state&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                        &lt;span class="n"&gt;write_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mail_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="c1"&gt;# Otherwise it's a single response&lt;/span&gt;
                    &lt;span class="n"&gt;write_response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mail_state&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"starttls"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;fileno&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mail_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="n"&gt;IOLoop&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileno&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;mail_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ssl_connection&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;close&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Closing"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="n"&gt;mail_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;mail_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

        &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;            Loop over the socket data until we receive&lt;/span&gt;
&lt;span class="sd"&gt;            a newline character (\n)&lt;/span&gt;
&lt;span class="sd"&gt;            """&lt;/span&gt;
            &lt;span class="c1"&gt;# Protection against stream already reading exceptions&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;mail_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reading&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="n"&gt;mail_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_until&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="n"&gt;hm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"220 &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt; [&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;]&lt;/span&gt;&lt;span class="se"&gt;\r\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;get_mailname&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;__fullname__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;mail_state&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content><category term="coding"></category><category term="python"></category><category term="tornado"></category><category term="iostream"></category><category term="ssl"></category><category term="starttls"></category><category term="blackhole"></category></entry><entry><title>Wrapping a Tornado IOStream with SSL</title><link href="https://kura.gg/2013/07/29/wrapping-a-tornado-iostream-with-ssl/" rel="alternate"></link><published>2013-07-29T20:00:00+01:00</published><updated>2013-07-29T20:00:00+01:00</updated><author><name>kura</name></author><id>tag:kura.gg,2013-07-29:/2013/07/29/wrapping-a-tornado-iostream-with-ssl/</id><summary type="html">
&lt;p&gt;As part of my effort to make &lt;a class="reference external" href="https://blackhole.io/"&gt;Blackhole&lt;/a&gt; as
useful and usable as possible, I needed to be able to support &lt;span class="caps"&gt;SSL&lt;/span&gt;/&lt;span class="caps"&gt;TLS&lt;/span&gt;
enabled connections.&lt;/p&gt;
&lt;p&gt;Tornado itself has two built-in IOStreams that help us do the job;
the first is the standard &lt;a class="reference external" href="https://www.tornadoweb.org/en/stable/iostream.html#tornado.iostream.IOStream"&gt;IOStream&lt;/a&gt;
and the second is the &lt;a class="reference external" href="https://www.tornadoweb.org/en/stable/iostream.html#tornado.iostream.SSLIOStream"&gt;SSLIOStream&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With this in mind we simply need to spawn two sockets, by default these
listen on port 25 for standard &lt;span class="caps"&gt;SMTP&lt;/span&gt; and port 465 for &lt;span class="caps"&gt;SSL&lt;/span&gt;/&lt;span class="caps"&gt;TLS&lt;/span&gt;
encrypted &lt;span class="caps"&gt;SMTP&lt;/span&gt;. With these two sockets bound we’re then very
simply able to listen for incoming connections on either socket
and use &lt;cite&gt;socket.socket.getsockname()&lt;/cite&gt; to figure out if the
connection is to the encrypted or unencrypted socket.&lt;/p&gt;
&lt;div class="section" id="code"&gt;
&lt;h2&gt;Code&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;connection_stream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Detect which socket the connection is being made on,&lt;/span&gt;
&lt;span class="sd"&gt;    create and iostream for the connection, wrapping it&lt;/span&gt;
&lt;span class="sd"&gt;    in SSL if connected over the SSL socket.&lt;/span&gt;

&lt;span class="sd"&gt;    The parameter 'connection' is an instance …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">
&lt;p&gt;As part of my effort to make &lt;a class="reference external" href="https://blackhole.io/"&gt;Blackhole&lt;/a&gt; as
useful and usable as possible, I needed to be able to support &lt;span class="caps"&gt;SSL&lt;/span&gt;/&lt;span class="caps"&gt;TLS&lt;/span&gt;
enabled connections.&lt;/p&gt;
&lt;p&gt;Tornado itself has two built-in IOStreams that help us do the job;
the first is the standard &lt;a class="reference external" href="https://www.tornadoweb.org/en/stable/iostream.html#tornado.iostream.IOStream"&gt;IOStream&lt;/a&gt;
and the second is the &lt;a class="reference external" href="https://www.tornadoweb.org/en/stable/iostream.html#tornado.iostream.SSLIOStream"&gt;SSLIOStream&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With this in mind we simply need to spawn two sockets, by default these
listen on port 25 for standard &lt;span class="caps"&gt;SMTP&lt;/span&gt; and port 465 for &lt;span class="caps"&gt;SSL&lt;/span&gt;/&lt;span class="caps"&gt;TLS&lt;/span&gt;
encrypted &lt;span class="caps"&gt;SMTP&lt;/span&gt;. With these two sockets bound we’re then very
simply able to listen for incoming connections on either socket
and use &lt;cite&gt;socket.socket.getsockname()&lt;/cite&gt; to figure out if the
connection is to the encrypted or unencrypted socket.&lt;/p&gt;
&lt;div class="section" id="code"&gt;
&lt;h2&gt;Code&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;connection_stream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;"""&lt;/span&gt;
&lt;span class="sd"&gt;    Detect which socket the connection is being made on,&lt;/span&gt;
&lt;span class="sd"&gt;    create and iostream for the connection, wrapping it&lt;/span&gt;
&lt;span class="sd"&gt;    in SSL if connected over the SSL socket.&lt;/span&gt;

&lt;span class="sd"&gt;    The parameter 'connection' is an instance of 'socket'&lt;/span&gt;
&lt;span class="sd"&gt;    from stdlib.&lt;/span&gt;
&lt;span class="sd"&gt;    """&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsockname&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ssl_port&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ssl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;ssl_connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ssl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wrap_socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;sslkwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ssl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SSLError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;errno&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;ssl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SSL_ERROR_EOF&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;errno&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;errno&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ECONNABORTED&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;ssl_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;raise&lt;/span&gt;
        &lt;span class="c1"&gt;# Do a nasty blanket Exception until SSL exceptions are fully known&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;iostream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SSLIOStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ssl_connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;ssl_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;iostream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IOStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So let’s explain a little bit how this works.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="if-connection-getsockname"&gt;
&lt;h2&gt;if connection.getsockname…&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getsockname&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ssl_port&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ssl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This piece of code checks the second value in the list returned by &lt;cite&gt;getsockname()&lt;/cite&gt;,
this item in the list will be the port number the socket is listening to.&lt;/p&gt;
&lt;p&gt;So we simply check to see if it’s the configured &lt;span class="caps"&gt;SSL&lt;/span&gt;/&lt;span class="caps"&gt;TLS&lt;/span&gt; port and if
&lt;span class="caps"&gt;SSL&lt;/span&gt;/&lt;span class="caps"&gt;TLS&lt;/span&gt; is turned on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="st-try-except"&gt;
&lt;h2&gt;1st try… except…&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;ssl_connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ssl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wrap_socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;sslkwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ssl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SSLError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;socket&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;errno&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;ssl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SSL_ERROR_EOF&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;errno&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;errno&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ECONNABORTED&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;ssl_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first try/except group will attemp to wrap the socket using Python’s
built-in &lt;span class="caps"&gt;SSL&lt;/span&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ssl_connection&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ssl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;wrap_socket&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;sslkwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If this throws an exception we try to determine what caused it and
close the connection, otherwise we raise the exception and crash out.
It’s not the nicest way to do it but in theory you shouldn’t be able
to reach the else (I may be wrong on this point though…).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="nd-try-except"&gt;
&lt;h2&gt;2nd try… except…&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Do a nasty blanket Exception until SSL exceptions are fully known&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;iostream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SSLIOStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ssl_connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ssl_connection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here we simply try to return an instance of Tornado’s
&lt;cite&gt;iostream.SSLIOStream&lt;/cite&gt;, if we get any kind of Exception it will be
raised, logged and the connection will be close.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="else"&gt;
&lt;h2&gt;else&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;iostream&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IOStream&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connection&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And the final else will return an instance of Tornado’s
&lt;cite&gt;iostream.IOStream&lt;/cite&gt; if &lt;span class="caps"&gt;SSL&lt;/span&gt;/&lt;span class="caps"&gt;TLS&lt;/span&gt; is disabled or if the connection
was made to the non &lt;span class="caps"&gt;SSL&lt;/span&gt;/&lt;span class="caps"&gt;TLS&lt;/span&gt; port.&lt;/p&gt;
&lt;/div&gt;
</content><category term="coding"></category><category term="python"></category><category term="tornado"></category><category term="iostream"></category><category term="ssl"></category><category term="blackhole"></category></entry></feed>